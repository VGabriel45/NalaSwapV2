[{"/Users/ja/Desktop/MyProjects/NalaSwap/webapp/nalaswap/src/index.js":"1","/Users/ja/Desktop/MyProjects/NalaSwap/webapp/nalaswap/src/App.js":"2","/Users/ja/Desktop/MyProjects/NalaSwap/webapp/nalaswap/src/pages/HomePage.js":"3","/Users/ja/Desktop/MyProjects/NalaSwap/webapp/nalaswap/src/pages/NftsPage.js":"4","/Users/ja/Desktop/MyProjects/NalaSwap/webapp/nalaswap/src/pages/NFTStakingPage.js":"5","/Users/ja/Desktop/MyProjects/NalaSwap/webapp/nalaswap/src/pages/StakePage.js":"6","/Users/ja/Desktop/MyProjects/NalaSwap/webapp/nalaswap/src/pages/Pools.js":"7","/Users/ja/Desktop/MyProjects/NalaSwap/webapp/nalaswap/src/components/Navbar.js":"8","/Users/ja/Desktop/MyProjects/NalaSwap/webapp/nalaswap/src/utils/availableTokens.js":"9"},{"size":459,"mtime":1653994934375,"results":"10","hashOfConfig":"11"},{"size":1798,"mtime":1653993327881,"results":"12","hashOfConfig":"11"},{"size":12249,"mtime":1655063311534,"results":"13","hashOfConfig":"11"},{"size":4628,"mtime":1654287211479,"results":"14","hashOfConfig":"11"},{"size":6843,"mtime":1653993300566,"results":"15","hashOfConfig":"11"},{"size":13937,"mtime":1655050478705,"results":"16","hashOfConfig":"11"},{"size":12292,"mtime":1655051401431,"results":"17","hashOfConfig":"11"},{"size":4937,"mtime":1653995056222,"results":"18","hashOfConfig":"11"},{"size":1256,"mtime":1655051666332,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"18pr10c",{"filePath":"23","messages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"25","messages":"26","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"27","messages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"22"},{"filePath":"30","messages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32","usedDeprecatedRules":"22"},{"filePath":"33","messages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"22"},{"filePath":"36","messages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"22"},{"filePath":"39","messages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"22"},{"filePath":"42","messages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"/Users/ja/Desktop/MyProjects/NalaSwap/webapp/nalaswap/src/index.js",[],["44","45"],"/Users/ja/Desktop/MyProjects/NalaSwap/webapp/nalaswap/src/App.js",[],"/Users/ja/Desktop/MyProjects/NalaSwap/webapp/nalaswap/src/pages/HomePage.js",["46","47","48","49","50","51","52","53"],"/Users/ja/Desktop/MyProjects/NalaSwap/webapp/nalaswap/src/pages/NftsPage.js",["54","55","56","57","58","59","60","61","62","63"],"import * as React from 'react';\nimport nftAbi from \"../ABIS/NFTCollection.json\";\nimport { BigNumber, Contract, ethers, utils } from 'ethers';\nimport {useEffect, useState, Fragment} from \"react\";\nimport Box from '@mui/material/Box';\nimport ButtonGroup from '@mui/material/ButtonGroup';\nimport contractAddresses from \"../utils/contractsAddresses.json\";\nimport Button from '@mui/material/Button';\nimport Card from '@mui/material/Card';\nimport CardActions from '@mui/material/CardActions';\nimport CardContent from '@mui/material/CardContent';\nimport CardMedia from '@mui/material/CardMedia';\nimport Typography from '@mui/material/Typography';\nimport Grid from '@mui/material/Grid';\n\nexport default function StakePage () {\n\n    const [errorMessage, setErrorMessage] = useState(\"\");\n    const [ownedNfts, setOwnedNfts] = useState([]);\n\n    const nftAddress = contractAddresses.nftCollectionAddress;\n\n    useEffect(() => {\n        const displayAndSet = async () => {setOwnedNfts(await displayOwnedNfts())};\n        displayAndSet();\n    }, [])\n\n    const getOwnedNFTS = async () => {\n        if (typeof window.ethereum !== 'undefined') {\n            const provider = new ethers.providers.Web3Provider(window.ethereum);\n            const signer = provider.getSigner();\n            let nftArr = [];\n            if (signer) {\n              const nftContract = new ethers.Contract(nftAddress, nftAbi, signer);\n              const ownedNftsCount = parseInt(await nftContract.balanceOf(signer.getAddress()));\n              for (let index = 0; index < ownedNftsCount; index++) {\n                    let nftId = await nftContract.tokenOfOwnerByIndex(signer.getAddress(), index);\n                    nftArr.push(nftId);                  \n              }\n              return nftArr;\n            }\n        }\n    }\n\n     const displayOwnedNfts = async () => {\n        let ids = await getOwnedNFTS();\n        let nftMetadataArr = [];\n        for (let index = 0; index < ids.length; index++) {\n            const response = await fetch(`https://gateway.pinata.cloud/ipfs/QmSxkTx7LDNvYYJFFtSVDafd4DD4sAUYD34YydcTML6N7X/${ids[index]}.json`)\n            const responseJson = await response.json();\n            nftMetadataArr.push(responseJson);\n        }\n        return nftMetadataArr;\n    }\n\n    const mintNft = async () => {\n        if (typeof window.ethereum !== 'undefined') {\n            const provider = new ethers.providers.Web3Provider(window.ethereum)\n            const signer = provider.getSigner()\n            if (signer) {\n              const nftContract = new ethers.Contract(nftAddress, nftAbi, signer);\n              try {\n                const tx = await nftContract.connect(signer).mint(\n                    signer.getAddress(),\n                    1,\n                    {value: ethers.utils.parseEther(\"1\"), from: signer.getAddress()}\n                )\n                tx.wait();\n                console.log(tx);\n                } catch (error) {\n                    console.log(\"Transaction error\");\n                }\n            } else {\n                setErrorMessage(\"Cannot stake 0 tokens\");\n            }\n        }\n        \n    }\n\n    const buttons = [\n        <Button key=\"Mint\" onClick={() => mintNft()}>Mint</Button>,\n    ];\n\n    return (\n        <Grid sx={{ flexGrow: 1 }} container spacing={2}>\n            <Button color=\"secondary\" variant=\"contained\" key=\"Mint\" onClick={() => mintNft()} style={{marginLeft: 180}}>Mint</Button>\n            <Grid item xs={12}>\n                <Grid container justifyContent=\"center\" spacing={3}>\n                    {ownedNfts.map(nft => \n                        <Grid key={nft.name} item>\n                            <Card sx={{ maxWidth: 345 }}>\n                            <CardMedia\n                                component=\"img\"\n                                height=\"140\"\n                                src={`https://gateway.pinata.cloud/ipfs/QmcEfnhCfPn5SFA9PQ6YRELsTrDRSkapYiHwEAifuWtNQp/${nft.edition}.png`}\n                                alt=\"green iguana\"\n                            />\n                            <CardContent>\n                                <Typography gutterBottom variant=\"h5\" component=\"div\">\n                                {nft.name}\n                                </Typography>\n                                <Typography variant=\"body2\" color=\"text.secondary\">\n                                An eye.\n                                </Typography>\n                            </CardContent>\n                        </Card>\n                        </Grid>\n                    )}\n                </Grid>\n            </Grid>\n        </Grid>\n    )\n}","/Users/ja/Desktop/MyProjects/NalaSwap/webapp/nalaswap/src/pages/NFTStakingPage.js",["64","65","66","67","68","69","70","71","72","73","74","75"],"import * as React from 'react';\nimport {useEffect, useState} from \"react\";\nimport nftStakingABI from \"../ABIS/NFTStaking.json\";\nimport nalaTokenABI from \"../ABIS/NalaTokenABI.json\";\nimport EyesNftABI from \"../ABIS/NFTCollection.json\";\nimport { BigNumber, Contract, ethers, utils } from 'ethers';\nimport { formatUnits, parseEther } from '@ethersproject/units';\nimport contractAddresses from \"../utils/contractsAddresses.json\";\n\nexport default function StakePage () {\n\n    const [errorMessage, setErrorMessage] = useState(\"\");\n    const [myStakedNfts, setMyStakedNfts] = useState([]);\n    const [rewardsBalance, setRewardsBalance] = useState(0);\n    const [unstakedNFTS, setUnstakedNFTS] = useState([]);\n\n    const nftAddress = contractAddresses.nftCollectionAddress;\n    const nftStakingAddress = contractAddresses.nftStakingContract;\n    const nalaTokenAddress = contractAddresses.nalaTokenAddress;\n\n    useEffect(() => {\n        getRewardsBalance();\n        const setAndDisplay = async () => {setMyStakedNfts(await getNFTSStaked())};\n        const setAndDisplayUnstakedNFTS = async () => {setUnstakedNFTS(await getNFTBalance())};\n        setAndDisplay();\n        setAndDisplayUnstakedNFTS();\n    }, []);\n\n    const stake = async (nftId) => {\n        if (typeof window.ethereum !== 'undefined') {\n            const provider = new ethers.providers.Web3Provider(window.ethereum);\n            const signer = provider.getSigner();\n            if (signer) {\n                const nftStakingContract = new ethers.Contract(nftStakingAddress, nftStakingABI, signer);\n                const eyesNft = new ethers.Contract(nftAddress, EyesNftABI, signer);\n                await eyesNft.setApprovalForAll(nftStakingAddress, true)\n                await nftStakingContract.stake(0, [nftId]);\n            }\n        }\n    }\n\n    const unStake = async (nftId) => {\n        if (typeof window.ethereum !== 'undefined') {\n            const provider = new ethers.providers.Web3Provider(window.ethereum);\n            const signer = provider.getSigner();\n            if (signer) {\n                const nftStakingContract = new ethers.Contract(nftStakingAddress, nftStakingABI, signer);\n                await nftStakingContract.unstake(0, [nftId]);\n            }\n        }\n    }\n\n    const claimRewards = async (nftId) => {\n        if (typeof window.ethereum !== 'undefined') {\n            const provider = new ethers.providers.Web3Provider(window.ethereum);\n            const signer = provider.getSigner();\n            if (signer) {\n                const nftStakingContract = new ethers.Contract(nftStakingAddress, nftStakingABI, signer);\n                await nftStakingContract.claim(0, [nftId]);\n            }\n        }\n    }\n\n    const getRewardsBalance = async () => {\n        if (typeof window.ethereum !== 'undefined') {\n            const provider = new ethers.providers.Web3Provider(window.ethereum);\n            const signer = provider.getSigner();\n            if (signer) {\n                const nftStakingContract = new ethers.Contract(nftStakingAddress, nftStakingABI, signer);\n                const balance = await nftStakingContract.earningInfo(signer.getAddress(), [1, 2]); // FIX\n                const tokensOfOwner = await nftStakingContract.tokensOfOwner(0, signer.getAddress());\n                setRewardsBalance(formatUnits(BigNumber.from(balance.toString(), 18)));\n            }\n        }\n    }\n\n    const getNFTSStaked = async () => {\n        let nftsIdsArr = [];\n        let nftMetadataArr = [];\n        if (typeof window.ethereum !== 'undefined') {\n            const provider = new ethers.providers.Web3Provider(window.ethereum);\n            const signer = provider.getSigner();\n            if (signer) {\n                const nftStakingContract = new ethers.Contract(nftStakingAddress, nftStakingABI, signer);\n                const eyesNft = new ethers.Contract(nftAddress, EyesNftABI, signer);\n                nftsIdsArr = await nftStakingContract.tokensOfOwner(0, signer.getAddress());\n                for (let index = 0; index < nftsIdsArr.length; index++) {\n                    const response = await fetch(`https://gateway.pinata.cloud/ipfs/QmSxkTx7LDNvYYJFFtSVDafd4DD4sAUYD34YydcTML6N7X/${nftsIdsArr[index]}.json`)\n                    const responseJson = await response.json();\n                    nftMetadataArr.push(responseJson);\n                }\n\n            }\n        }\n        return nftMetadataArr;\n    }\n\n    const getNFTBalance = async () => {\n        let nftMetadataArr = [];\n        if (typeof window.ethereum !== 'undefined') {\n            const provider = new ethers.providers.Web3Provider(window.ethereum);\n            const signer = provider.getSigner();\n            if (signer) {\n                const eyesNft = new ethers.Contract(nftAddress, EyesNftABI, signer);\n                const amountOfNfts = await eyesNft.balanceOf(signer.getAddress());\n                for (let index = 0; index < amountOfNfts; index++) {\n                    const nftID = await eyesNft.tokenOfOwnerByIndex(signer.getAddress(), index);\n                    const response = await fetch(`https://gateway.pinata.cloud/ipfs/QmSxkTx7LDNvYYJFFtSVDafd4DD4sAUYD34YydcTML6N7X/${nftID}.json`)\n                    const responseJson = await response.json();\n                    nftMetadataArr.push(responseJson);\n                }\n\n            }\n        }\n        return nftMetadataArr;\n    }\n\n    return (\n        <>\n            <div style={{display: \"flex\", flexDirection:\"row\", justifyContent: \"space-around\"}}>\n                <button onClick={() => claimRewards(1)}>Claim rewards</button>\n            </div>\n           <p>Rewards balance: {rewardsBalance}</p>\n           NFT'S Staked currently:\n           <div style={{display: \"flex\", flexDirection:\"row\", justifyContent: \"space-around\"}}>\n                {myStakedNfts.map(nft => \n                    <div style={{display: \"flex\", flexDirection:\"column\", justifyContent: \"space-around\"}}>\n                        <p>{nft.name}</p>\n                        <img style={{width: \"100px\", borderRadius: \"10px\"}} src={`https://gateway.pinata.cloud/ipfs/QmcEfnhCfPn5SFA9PQ6YRELsTrDRSkapYiHwEAifuWtNQp/${nft.edition}.png`}/>\n                        <button onClick={() => unStake(nft.edition)}>Unstake</button>\n                    </div>\n                )}\n                {unstakedNFTS.map(nft => \n                    <div style={{display: \"flex\", flexDirection:\"column\", justifyContent: \"space-around\"}}>\n                        <p>{nft.name}</p>\n                        <img style={{width: \"100px\", borderRadius: \"10px\"}} src={`https://gateway.pinata.cloud/ipfs/QmcEfnhCfPn5SFA9PQ6YRELsTrDRSkapYiHwEAifuWtNQp/${nft.edition}.png`}/>\n                        <button onClick={() => stake(nft.edition)}>Stake</button>\n                    </div>\n                )}\n            </div>\n        </>\n    )\n}","/Users/ja/Desktop/MyProjects/NalaSwap/webapp/nalaswap/src/pages/StakePage.js",["76","77","78","79","80","81","82","83","84"],"import * as React from 'react';\nimport stakingContractABI from \"../ABIS/StakingABI.json\";\nimport nalaRouterABI from \"../ABIS/NalaRouter.json\";\nimport nlaTokenABI from \"../ABIS/NalaTokenABI.json\";\nimport { BigNumber, Contract, ethers, utils } from 'ethers';\nimport { formatUnits, parseEther } from '@ethersproject/units';\nimport {useEffect, useState, Fragment} from \"react\";\nimport Box from '@mui/material/Box';\nimport ButtonGroup from '@mui/material/ButtonGroup';\nimport Button from '@mui/material/Button';\nimport TextField from '@mui/material/TextField';\nimport contractAddresses from \"../utils/contractsAddresses.json\";\nimport {BigNumber as JsBigNumber} from 'bignumber.js'\nimport {Widget} from \"web3uikit\";\nimport Switch from '@mui/material/Switch';\nimport FormGroup from '@mui/material/FormGroup';\nimport FormControlLabel from '@mui/material/FormControlLabel';\n\nexport default function StakePage () {\n\n    const [balance, setBalance] = useState(0);\n    const [apr, setApr] = useState(0);\n    const [TVL, setTVL] = useState(0);\n    const [tokenPriceInBUSD, setTokenPriceInBUSD] = useState(0);\n    const [activeStakers, setActiveStakers] = useState(0);\n    const [balanceWithRewards, setBalanceWithRewards] = useState(0);\n    const [amount, setAmount] = useState(0);\n    const [rewardsPerDay, setRewardsPerDay] = useState(0);\n    const [errorMessage, setErrorMessage] = useState(\"\");\n    const [autocompound, setAutoCompound] = useState(false);\n\n    const contractAddress = contractAddresses.stakingContract;\n    const nlaTokenAddress = contractAddresses.nalaTokenAddress;\n    const nalaRouterAddress = contractAddresses.nalaRouterContract;\n    const wBNBTokenAddress = \"0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c\";\n    const BUSDTokenAddress = \"0xe9e7cea3dedca5984780bafc599bd69add087d56\";\n\n    const TOKENS_PER_BLOCK = 1;\n\n    useEffect(() => {\n        //  const timer = setInterval(async () => {\n        //     getUserStakedAmount();\n        //     getRewardsPerDay();\n        //     getTVL();\n        //     getActiveStakers();\n        //     getTokenPriceInBUSD();\n        //     getUserBalanceWithRewards();\n        //     getAPR(TOKENS_PER_BLOCK); // get staked amout without using async await inside useEffect\n        //   }, 1000);\n        // return () => clearInterval(timer);\n        getUserStakedAmount();\n        getRewardsPerDay();\n        getTVL();\n        getActiveStakers();\n        getTokenPriceInBUSD();\n        getUserBalanceWithRewards();\n        getAPR(TOKENS_PER_BLOCK); // get staked amout without using async await inside useEffect\n    }, [])\n\n    const getAPR = async (\n        tokenPerBlock,\n      ) => {\n        if (typeof window.ethereum !== 'undefined') {\n            const provider = new ethers.providers.Web3Provider(window.ethereum)\n            const signer = provider.getSigner()\n            if(signer) {\n                try {\n                    const pancakeRouterV2 = new ethers.Contract(\"0x10ED43C718714eb63d5aA57B78B54704E256024E\", [\"function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts)\"], signer);\n                    const nalaToken = new ethers.Contract(nlaTokenAddress, nlaTokenABI, signer);\n                    const totalStaked = await nalaToken.balanceOf(contractAddress);\n                    console.log(`Total staked in staking contract = ${totalStaked / Math.pow(10, 18)}`);\n                    if(totalStaked > 0) {\n                        // how much NLA tokens we get for 1 BNB \n                        const amountsOut = await pancakeRouterV2\n                        .getAmountsOut(\n                            ethers.utils.parseEther(\"1\"), \n                            [wBNBTokenAddress, nlaTokenAddress]\n                        )\n\n                        const amoutOfNLAFor1BNB = formatUnits(amountsOut[1].toString(), 18);\n                        const nlaPriceInBNB = 1 / amoutOfNLAFor1BNB; // NLA Token price in BNB\n\n                        const totalRewardPricePerYear = new JsBigNumber(nlaPriceInBNB).times(tokenPerBlock).times(28640)\n                        const totalStakingTokenInPool = new JsBigNumber(nlaPriceInBNB).times(totalStaked / Math.pow(10, 18))\n                        const apr = totalRewardPricePerYear.div(totalStakingTokenInPool).times(10)\n\n                        setApr(apr.toNumber());\n                    }\n                } catch (error) {\n                    setApr(0);\n                }\n            }\n        }\n    }\n\n    const stakeTokens = async (amount) => {\n        if (typeof window.ethereum !== 'undefined') {\n            const provider = new ethers.providers.Web3Provider(window.ethereum)\n            const signer = provider.getSigner()\n            if (signer && parseInt(amount) > 0) {\n              const stakingContract = new ethers.Contract(contractAddress, stakingContractABI, signer);\n              const nlaToken = new ethers.Contract(nlaTokenAddress, [\"function approve(address _spender, uint256 _value) public returns (bool success)\"], signer);\n              const approveTx = await nlaToken.connect(signer).approve(stakingContract.address, \"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\");\n              approveTx.wait(3);\n              try {\n                const tx = await stakingContract.connect(signer).stakeTokens(\n                    ethers.utils.parseEther(amount.toString())\n                )\n                tx.wait();\n                console.log(tx);\n                } catch (error) {\n                    console.log(\"Transaction error\");\n                }\n            } else {\n                setErrorMessage(\"Cannot stake 0 tokens\");\n            }\n        }\n        \n    }\n\n    const withdrawTokens = async (amount) => {\n        if (typeof window.ethereum !== 'undefined') {\n            const provider = new ethers.providers.Web3Provider(window.ethereum)\n            const signer = provider.getSigner()\n            if (signer && parseInt(amount) > 0) {\n              const stakingContract = new ethers.Contract(contractAddress, stakingContractABI, signer);\n              const nlaToken = new ethers.Contract(nlaTokenAddress, [\"function approve(address _spender, uint256 _value) public returns (bool success)\"], signer);\n              nlaToken.connect(signer).approve(stakingContract.address, \"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\");\n              try {\n                const tx = await stakingContract.connect(signer).withdrawTokens(\n                    ethers.utils.parseEther(amount.toString())\n                )\n                tx.wait();\n                } catch (error) {\n                    console.log(\"Transaction error\");\n                }\n            } else {\n                setErrorMessage(\"Cannot stake 0 tokens\");\n            }\n        }\n        \n    }\n\n    const getUserStakedAmount = async () => {\n\n        let balance;\n\n        if (typeof window.ethereum !== 'undefined') {\n            const provider = new ethers.providers.Web3Provider(window.ethereum)\n            const signer = provider.getSigner()\n            if (signer) {\n              const stakingContract = new ethers.Contract(contractAddress, stakingContractABI, signer);\n              try {\n                balance = await stakingContract.stakerBalance(signer.getAddress());\n                } catch (error) {\n                    console.log(\"Transaction error\");\n                }\n            }\n        }\n\n        // console.log(formatUnits(BigNumber.from(balance.toString(), 18)));\n        setBalance(balance / Math.pow(10, 18));\n        return formatUnits(balance / Math.pow(10, 18));\n    }\n\n    const getUserBalanceWithRewards = async () => {\n\n        let balance;\n\n        if (typeof window.ethereum !== 'undefined') {\n            const provider = new ethers.providers.Web3Provider(window.ethereum)\n            const signer = provider.getSigner()\n            if (signer) {\n              const stakingContract = new ethers.Contract(contractAddress, stakingContractABI, signer);\n              try {\n                balance = await stakingContract.getBalanceWithRewards(signer.getAddress());\n                } catch (error) {\n                    console.log(\"Transaction error\");\n                }\n            }\n        }\n\n        // console.log(formatUnits(BigNumber.from(balance.toString(), 18)));\n        setBalanceWithRewards(balance / Math.pow(10, 18));\n    }\n\n    const getRewardsPerDay = async () => {\n        let rewards = 0;\n        if (typeof window.ethereum !== 'undefined') {\n            const provider = new ethers.providers.Web3Provider(window.ethereum)\n            const signer = provider.getSigner()\n            if (signer) {\n                const userStakedBalance = await getUserStakedAmount();\n                if(userStakedBalance > 0) {\n                    const stakingContract = new ethers.Contract(contractAddress, stakingContractABI, signer);\n                    try {\n                        rewards = await stakingContract.getRewardsPerDay(signer.getAddress());\n                        setRewardsPerDay(rewards / Math.pow(10, 18));\n                    } catch (error) {\n                        console.log(\"Transaction error\");\n                    }\n                }\n            }\n        }\n    }\n\n    const getTVL = async () => {\n        if (typeof window.ethereum !== 'undefined') {\n            const provider = new ethers.providers.Web3Provider(window.ethereum)\n            const signer = provider.getSigner()\n            if (signer) {\n                const nalaToken = new ethers.Contract(nlaTokenAddress, nlaTokenABI, signer);\n                const totalStaked = await nalaToken.balanceOf(contractAddress);\n                setTVL(totalStaked / Math.pow(10, 18));\n            }\n        }\n    }\n\n    const getTokenPriceInBUSD = async () => {\n        if (typeof window.ethereum !== 'undefined') {\n            const provider = new ethers.providers.Web3Provider(window.ethereum)\n            const signer = provider.getSigner()\n            if (signer) {\n                const nalaRouter = new ethers.Contract(nalaRouterAddress, nalaRouterABI, signer);\n                const amountsOut = await nalaRouter\n                .getAmountsOutTokens(\n                    ethers.utils.parseEther(\"1\"), \n                    [wBNBTokenAddress, nlaTokenAddress]\n                )\n\n                const amoutOfNLAFor1BNB = formatUnits(amountsOut[1].toString(), 18);\n                const nlaPriceInBNB = 1 / amoutOfNLAFor1BNB;\n\n                console.log(`NLA price in BNB = ${nlaPriceInBNB}`);\n\n                const bnbPriceInBUSD = await nalaRouter\n                .getAmountsOutTokens(\n                    ethers.utils.parseEther(\"1\"), \n                    [wBNBTokenAddress, BUSDTokenAddress]\n                )\n\n                const nlaPriceInBUSD = formatUnits(bnbPriceInBUSD[1].toString(), 18) * nlaPriceInBNB;\n\n                console.log(`NLA price in BUSD = ${nlaPriceInBUSD}`);\n\n                setTokenPriceInBUSD(nlaPriceInBUSD);\n            }\n        }\n    }\n\n    const getActiveStakers = async () => {\n        if (typeof window.ethereum !== 'undefined') {\n            const provider = new ethers.providers.Web3Provider(window.ethereum)\n            const signer = provider.getSigner()\n            if (signer) {\n                const stakingContract = new ethers.Contract(contractAddress, stakingContractABI, signer);\n                try {\n                    const activeStakersLength = await stakingContract.getActiveStakeholders();\n                    setActiveStakers(activeStakersLength);\n                    console.log(`Active stakeholders = ${activeStakersLength}`);\n                } catch (error) {\n                    console.log(error);\n                }\n            }\n        }\n    }\n\n    return (\n        <>\n            <div style={{ display: 'grid', gap: '20px', padding: '40px 20px', width: \"530px\" }}>\n                <FormGroup>\n                    <FormControlLabel\n                    control={\n                        <Switch\n                            checked={autocompound}\n                            onChange={() => {setAutoCompound(!autocompound)}}\n                            inputProps={{ 'aria-label': 'controlled' }}\n                        />\n                    }\n                    label={autocompound ? \"Autocompound on\" : \"Autocompound off\"}\n                    />\n                </FormGroup>\n                <section style={{ display: 'flex', gap: '20px' }}>\n                    <Widget info={`${rewardsPerDay.toFixed(2)} NLA`} title=\"Rewards per day\"/>\n                    <Widget info={`${TVL.toFixed(2)} NLA`} title=\"Total NLA staked\" />\n                </section>\n                <section style={{ display: 'flex', gap: '20px' }}>\n                    <Widget info={`${apr.toFixed(2)}%`} title=\"APR\" />\n                    <Widget info={parseInt(activeStakers)} title=\"Active stakers\" />\n                    <Widget info={`${tokenPriceInBUSD.toFixed(2)}$`} title=\"NLA Price in $\" />\n                </section>\n                <div style={{display: 'flex', flexDirection: 'row', justifyContent: 'space-around'}}>\n                    <Button style={{marginRight: \"25%\"}} color=\"secondary\" variant=\"contained\" key=\"Deposit\" onClick={() => stakeTokens(amount)}>Stake</Button>\n                    <Button color=\"secondary\" variant=\"contained\" key=\"Withdraw\" onClick={() => withdrawTokens(amount)}>Withdraw</Button>\n                </div>\n                <TextField id=\"outlined-basic\" label=\"Amount...\" variant=\"outlined\" size=\"small\" type=\"number\" onChange={(e) => setAmount(e.target.value)}/>\n                <small style={{color: \"red\"}}>{errorMessage}</small>\n                <div style={{display: 'flex', flexDirection: 'row', justifyContent: 'space-around'}}>\n                    <Button color=\"success\" variant=\"contained\" key=\"Withdraw\" onClick={() => withdrawTokens(amount)}>Claim rewards</Button>\n                </div>\n            </div>\n        </>\n    )\n}","/Users/ja/Desktop/MyProjects/NalaSwap/webapp/nalaswap/src/pages/Pools.js",["85","86","87","88","89","90","91","92","93","94","95","96"],"import * as React from 'react';\nimport {useEffect, useState} from \"react\";\nimport NalaRouterABI from \"../ABIS/NalaRouter.json\";\nimport contractAddresses from \"../utils/contractsAddresses.json\";\nimport {tokens} from \"../utils/availableTokens\";\nimport nalaRouterABI from \"../ABIS/NalaRouter.json\";\nimport pancakeFactoryABI from \"../ABIS/PancakeFactory.json\";\nimport lpTokenABI from \"../ABIS/LPTokenABI.json\";\nimport nalaTokenABI from \"../ABIS/NalaTokenABI.json\";\nimport { BigNumber, ethers } from 'ethers';\nimport {Widget} from \"web3uikit\";\nimport Button from '@mui/material/Button';\nimport TextField from '@mui/material/TextField';\n\nexport default function Pools () {\n\n    const nalaRouterAddress = contractAddresses.nalaRouterContract;\n    const nlaTokenAddress = contractAddresses.nalaTokenAddress;\n    const wBNBTokenAddress = \"0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c\";\n    const pancakeFactoryV2Address = \"0xcA143Ce32Fe78f1f7019d7d551a6402fC5350c73\";\n    const BUSDTokenAddress = \"0xe9e7cea3dedca5984780bafc599bd69add087d56\";\n\n    const [liquidity, setLiquidity] = useState(0);\n    const [amountToAddWBNB, setAmountToAddWBNB] = useState(0);\n    const [amountToAddNLA, setAmountToAddNLA] = useState(0);\n    const [amountToRemove, setAmountToRemove] = useState(0);\n    const [reserveWBNB, setReserveWBNB] = useState(0);\n    const [reserveNLA, setReserveNLA] = useState(0);\n    const [poolLiquidity, setPoolLiquidity] = useState(0);\n    const [tokenImported, setTokenImported] = useState(false);\n    const [lpTokenBalance, setLPTokenBalance] = useState(0);\n\n    useEffect(() => {\n        // const timer = setInterval(async () => {\n        //     getLPTokenBalance();\n        //     getReserves();\n        //   }, 1000);\n        // return () => clearInterval(timer);\n        getLPTokenBalance();\n        getReserves();\n    },[])\n   \n    const addLiquidityETH = async () => {\n        if (typeof window.ethereum !== 'undefined') {\n            const provider = new ethers.providers.Web3Provider(window.ethereum)\n            const signer = provider.getSigner();\n            if (signer) {\n                const nalaToken = new ethers.Contract(nlaTokenAddress, nalaTokenABI, signer);\n                const nalaRouter = new ethers.Contract(nalaRouterAddress, nalaRouterABI, signer);\n            \n                await nalaToken.connect(signer).approve(nalaRouterAddress, \"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\");\n                // const factory = await nalaRouter.factory();\n                // console.log(factory);\n                await nalaRouter.connect(signer).addLiquidityETH(\n                    nlaTokenAddress, \n                    ethers.utils.parseEther(amountToAddNLA.toString()),\n                    0, \n                    0, // amountETHMin\n                    {value: ethers.utils.parseEther(amountToAddWBNB.toString())}\n                );\n\n            }\n        }\n    }\n\n    const removeLiquidityETH = async (amountOfBNB) => {\n       \n    }\n\n    const setAmountsWBNB = async (amountOfBNB) => {\n        if(amountOfBNB === \"\") {\n            setAmountToAddNLA(\"\");\n            setAmountToAddWBNB(\"\");\n        }\n        if(parseInt(amountOfBNB) === 0) {\n            setAmountToAddNLA(0);\n            setAmountToAddWBNB(0);\n        }\n        else if (typeof window.ethereum !== 'undefined') {\n            const provider = new ethers.providers.Web3Provider(window.ethereum)\n            const signer = provider.getSigner();\n            if (signer) {\n                const nalaToken = new ethers.Contract(nlaTokenAddress, nalaTokenABI, signer);\n                const nalaRouter = new ethers.Contract(nalaRouterAddress, nalaRouterABI, signer);\n\n                const amountsOut = await nalaRouter\n                .getAmountsOutTokens(\n                    ethers.utils.parseEther(amountOfBNB.toString()), \n                    [wBNBTokenAddress, nlaTokenAddress]\n                )\n                console.log(`Amounts out = ${amountsOut[1] / Math.pow(10, 18)}`);\n                \n                setAmountToAddWBNB(amountOfBNB);\n                setAmountToAddNLA(amountsOut[1] / Math.pow(10, 18));\n            }\n        }\n    }\n\n    const setAmountsNLA = async (amountOfNLA) => {\n        console.log(amountOfNLA);\n        if(amountOfNLA === \"\") {\n            setAmountToAddNLA(\"\");\n            setAmountToAddWBNB(\"\");\n        }\n        if(parseInt(amountOfNLA) === 0) {\n            setAmountToAddNLA(0);\n            setAmountToAddWBNB(0);\n        }\n        else if (typeof window.ethereum !== 'undefined') {\n            const provider = new ethers.providers.Web3Provider(window.ethereum)\n            const signer = provider.getSigner();\n            if (signer) {\n                const nalaToken = new ethers.Contract(nlaTokenAddress, nalaTokenABI, signer);\n                const nalaRouter = new ethers.Contract(nalaRouterAddress, nalaRouterABI, signer);\n\n                const amountsOut = await nalaRouter\n                .getAmountsOutTokens(\n                    ethers.utils.parseEther(amountOfNLA.toString()), \n                    [nlaTokenAddress, wBNBTokenAddress]\n                )\n                console.log(`Amounts out = ${amountsOut[1] / Math.pow(10, 18)}`);\n                \n                setAmountToAddWBNB(amountsOut[1] / Math.pow(10, 18));\n                setAmountToAddNLA(amountOfNLA);\n            }\n        }\n    }\n\n    const findLPTokenAddress = async () => {\n        if (typeof window.ethereum !== 'undefined') {\n            const provider = new ethers.providers.Web3Provider(window.ethereum)\n            const signer = provider.getSigner();\n            if (signer) {\n                const pancakeFactory = new ethers.Contract(pancakeFactoryV2Address, pancakeFactoryABI, signer);\n                const lpTokenAddress = await pancakeFactory.getPair(wBNBTokenAddress, nlaTokenAddress);\n                console.log(\"LP Token address => \", lpTokenAddress);\n                return lpTokenAddress;\n            }\n        }\n    }\n\n    const importTokenToMetamask = async () => {\n        findLPTokenAddress();\n        try {\n          const wasAdded = await window.ethereum.request({\n            method: 'wallet_watchAsset',\n            params: {\n              type: 'ERC20', \n              options: {\n                address: await findLPTokenAddress(), \n                symbol: \"WBNB-NLA LP\", \n                decimals: 18, \n                image: \"https://png.pngitem.com/pimgs/s/121-1211195_head-small-to-medium-sized-cats-whiskers-cat.png\", \n              },\n            },\n          });\n          if (wasAdded) {\n            setTokenImported(true);\n            console.log('Thanks for your interest!');\n          } else {\n            setTokenImported(false);\n            console.log('NLA LP Token has not been added');\n          }\n        } catch (error) {\n          console.log(error);\n        }\n    }\n\n    const getLPTokenBalance = async () => {\n        if (typeof window.ethereum !== 'undefined') {\n            const provider = new ethers.providers.Web3Provider(window.ethereum)\n            const signer = provider.getSigner();\n            if (signer) {\n                const pancakeFactory = new ethers.Contract(pancakeFactoryV2Address, pancakeFactoryABI, signer);\n                const lpTokenAddress = await pancakeFactory.getPair(wBNBTokenAddress, nlaTokenAddress);\n                const lpTokenContract = new ethers.Contract(lpTokenAddress, lpTokenABI, signer);\n                const balance = await lpTokenContract.balanceOf(signer.getAddress());\n                console.log(\"LP BALANCE\", balance / Math.pow(10, 18));\n                setLPTokenBalance(balance)\n            }\n        }\n    }\n\n    const getReserves = async () => {\n        if (typeof window.ethereum !== 'undefined') {\n            const provider = new ethers.providers.Web3Provider(window.ethereum)\n            const signer = provider.getSigner();\n            if (signer) {\n                const pancakeFactory = new ethers.Contract(pancakeFactoryV2Address, pancakeFactoryABI, signer);\n                const lpTokenAddress = await pancakeFactory.getPair(wBNBTokenAddress, nlaTokenAddress);\n                const lpTokenContract = new ethers.Contract(lpTokenAddress, lpTokenABI, signer);\n                const reserves = await lpTokenContract.getReserves();\n                setReserveWBNB(reserves[0]);\n                setReserveNLA(reserves[1])\n                getTokenPriceInBUSD(reserves[0], reserves[1])\n            }\n        }\n    }\n\n    const getTokenPriceInBUSD = async (wbnbReserve, nlaReserve) => {\n        if (typeof window.ethereum !== 'undefined') {\n            const provider = new ethers.providers.Web3Provider(window.ethereum)\n            const signer = provider.getSigner()\n            if (signer) {\n                const nalaRouter = new ethers.Contract(nalaRouterAddress, nalaRouterABI, signer);\n                const amountsOut = await nalaRouter\n                .getAmountsOutTokens(\n                    ethers.utils.parseEther(\"1\"), \n                    [wBNBTokenAddress, nlaTokenAddress]\n                )\n\n                const amoutOfNLAFor1BNB = amountsOut[1] / Math.pow(10, 18);\n                const nlaPriceInBNB = 1 / amoutOfNLAFor1BNB;\n\n                // console.log(`NLA price in BNB = ${nlaPriceInBNB}`);\n\n                const bnbPriceInBUSD = await nalaRouter\n                .getAmountsOutTokens(\n                    ethers.utils.parseEther(\"1\"), \n                    [wBNBTokenAddress, BUSDTokenAddress]\n                )\n\n                // console.log(\"bnbPriceInBUSD\", bnbPriceInBUSD[1] / Math.pow(10, 18));\n\n                const nlaPriceInBUSD = (bnbPriceInBUSD[1] / Math.pow(10, 18)) * nlaPriceInBNB;\n                // console.log(\"nlaPriceInBUSD\", nlaPriceInBUSD);\n\n                const wbnbValueInBUSD = (bnbPriceInBUSD[1] / Math.pow(10, 18)) * (wbnbReserve / Math.pow(10, 18));\n                const nlaValueInBUSD = (nlaPriceInBUSD) * (nlaReserve / Math.pow(10, 18));\n\n                // console.log(\"wbnbValueInBUSD\", wbnbValueInBUSD);\n                // console.log(\"nlaValueInBUSD\", nlaValueInBUSD);\n\n                setPoolLiquidity(wbnbValueInBUSD + nlaValueInBUSD);\n\n            }\n        }\n    }\n\n    return (\n        <>\n            <div style={{ display: 'grid', gap: '20px', padding: '40px 20px', width:\"500px\" }}>\n                <section style={{ display: 'flex', gap: '20px' }}>\n                    <Widget info=\"WBNB - NLA\" title=\"Pool tokens\" />\n                    <Widget info={(lpTokenBalance / Math.pow(10, 18)).toFixed(6)} title=\"Your LP Balance\" />\n                </section>\n                <section style={{ display: 'flex', gap: '20px' }}>\n                    {/* <Widget info={(reserveWBNB / Math.pow(10, 18)).toFixed(2)} title=\"WBNB Reserve\" />\n                    <Widget info={(reserveNLA / Math.pow(10, 18)).toFixed(2)} title=\"NLA Reserve\" /> */\n                    <Widget info={`${poolLiquidity.toFixed(3)} $`} title=\"Total liquidity value in $\" />\n                    }\n                </section>\n                <div style={{display: 'flex', flexDirection: 'row', justifyContent: 'space-around'}}>\n                    <Button style={{marginRight: \"25%\"}} color=\"secondary\" variant=\"contained\" key=\"Deposit\" onClick={() => addLiquidityETH()}>Add liquidity</Button>\n                    <Button color=\"secondary\" variant=\"contained\" key=\"Withdraw\" onClick={() => removeLiquidityETH()}>Remove liquidity</Button>\n                </div>\n                <TextField value={amountToAddWBNB} id=\"outlined-basic\" label=\"Amount of WBNB...\" variant=\"outlined\" size=\"small\" type=\"number\" onChange={(e) => setAmountsWBNB(e.target.value)}/>\n                <TextField value={amountToAddNLA} id=\"outlined-basic\" label=\"Amount of NLA...\" variant=\"outlined\" size=\"small\" type=\"number\" onChange={(e) => setAmountsNLA(e.target.value)}/>\n                <div style={{display: 'flex', flexDirection: 'row', justifyContent: 'space-around'}}>\n                    {tokenImported ?\n                    <Button disabled={true} color=\"info\" variant=\"contained\" key=\"Deposit\">Token imported</Button> \n                    : <Button color=\"info\" variant=\"contained\" key=\"Deposit\" onClick={() => importTokenToMetamask()}>Import LP Token to metamask</Button>}\n                </div>\n            </div>\n        </>\n    )\n}","/Users/ja/Desktop/MyProjects/NalaSwap/webapp/nalaswap/src/components/Navbar.js",["97","98","99","100","101","102","103","104","105","106"],"import AppBar from '@mui/material/AppBar';\nimport Box from '@mui/material/Box';\nimport Toolbar from '@mui/material/Toolbar';\nimport IconButton from '@mui/material/IconButton';\nimport Typography from '@mui/material/Typography';\nimport Container from '@mui/material/Container';\nimport Button from '@mui/material/Button';\nimport Tooltip from '@mui/material/Tooltip';\nimport { ThemeProvider, createTheme } from '@mui/material/styles';\nimport Stack from '@mui/material/Stack';\nimport { useNavigate } from 'react-router-dom';\nimport {ConnectButton} from 'web3uikit';\n\nimport logo from \"../logo.svg\";\n\nimport { ethers } from \"ethers\";\nimport React, { useEffect, useState } from \"react\";\n\nconst pages = ['Swap', 'Pools', 'Stake NLA', 'Mint NFT', 'Stake NFT'];\n\nconst ResponsiveAppBar = () => {\n    const [anchorElNav, setAnchorElNav] = React.useState(null);\n    const [anchorElUser, setAnchorElUser] = React.useState(null);\n\n    const [errorMessage, setErrorMessage] = useState(null);\n    const [account, setAccount] = useState(null);\n    const [balance, setBalance] = useState(null);\n\n    const navigate = useNavigate();\n\n    useEffect(() => {\n        if (window.ethereum) {\n            window.ethereum.on(\"accountsChanged\", accountsChanged);\n            window.ethereum.on(\"chainChanged\", chainChanged);\n        }\n    },[]);\n\n    const connectHandler = async () => {\n        if (window.ethereum) {\n          try {\n            const res = await window.ethereum.request({\n              method: \"eth_requestAccounts\",\n            });\n            await accountsChanged(res[0]);\n          } catch (err) {\n            console.error(err);\n            setErrorMessage(\"There was a problem connecting to MetaMask\");\n          }\n        } else {\n          setErrorMessage(\"Install MetaMask\");\n        }\n    };\n    \n    const accountsChanged = async (newAccount) => {\n        setAccount(newAccount);\n        try {\n            const balance = await window.ethereum.request({\n            method: \"eth_getBalance\",\n            params: [newAccount.toString(), \"latest\"],\n            });\n            setBalance(ethers.utils.formatEther(balance));\n        } catch (err) {\n            console.error(err);\n            setErrorMessage(\"There was a problem connecting to MetaMask\");\n        }\n    };\n\n    const chainChanged = () => {\n        setErrorMessage(null);\n        setAccount(null);\n        setBalance(null);\n    };\n\n  const handlePageChange = () => {\n    setAnchorElNav(null);\n  };\n\n  const darkTheme = createTheme({\n    palette: {\n      mode: 'dark',\n      primary: {\n        main: '#1976d2',\n      },\n    },\n  });\n\n  return (\n    <Stack spacing={2} sx={{ flexGrow: 1 }}>\n        <ThemeProvider theme={darkTheme}>\n            <AppBar position=\"static\">\n            <Container maxWidth=\"xl\">\n                <Toolbar disableGutters>\n                <Typography\n                    variant=\"h6\"\n                    noWrap\n                    component=\"div\"\n                    sx={{ mr: 2, display: { xs: 'none', md: 'flex' } }}\n                >\n                    <img style={{width: \"50px\", height:\"50px\", margin:\"0px\", padding:\"0px\"}} src={logo} className=\"App-logo\" alt=\"logo\" />\n                </Typography>\n                <Box sx={{ flexGrow: 1, display: { xs: 'none', md: 'flex' } }}>\n                    {pages.map((page) => (\n                        <Button\n                            key={page}\n                            onClick={()=> navigate(page.toLowerCase())}\n                            sx={{ my: 1, color: 'yellow', display: 'block' }}\n                        >\n                            {page}\n                        </Button>\n                    ))}\n                </Box>\n                {/* <Box sx={{ flexGrow: 0, display: { xs: 'none', md: 'flex' } }}>\n                    <Tooltip title=\"Connect to metamask\">\n                    <IconButton onClick={connectHandler} sx={{ p: 0 }}>\n                        <img style={{width: \"50px\", height:\"50px\", margin:\"0px\", padding:\"0px\"}} src={\"https://upload.wikimedia.org/wikipedia/commons/thumb/3/36/MetaMask_Fox.svg/800px-MetaMask_Fox.svg.png\"} className=\"App-logo\" alt=\"logo\" />\n                    </IconButton>\n                    </Tooltip>\n                    {account !== null ? \n                        <Typography\n                        variant=\"small\"\n                        noWrap\n                        component=\"div\"\n                        sx={{ my: 2, ml: 1, display: 'block' }}\n                        >\n                            {`${account.substr(0,5)}...${account.substr(account.length - 5, account.length)}`}\n                        </Typography>\n                    : \"\"}\n                </Box> */}\n                <ConnectButton chainId={31337} moralisAuth={false} signingMessage=\"Connected !\" />\n                </Toolbar>\n            </Container>\n            </AppBar>\n        </ThemeProvider>\n    </Stack>\n  );\n};\nexport default ResponsiveAppBar;\n","/Users/ja/Desktop/MyProjects/NalaSwap/webapp/nalaswap/src/utils/availableTokens.js",[],{"ruleId":"107","replacedBy":"108"},{"ruleId":"109","replacedBy":"110"},{"ruleId":"111","severity":1,"message":"112","line":8,"column":10,"nodeType":"113","messageId":"114","endLine":8,"endColumn":19},{"ruleId":"111","severity":1,"message":"115","line":8,"column":21,"nodeType":"113","messageId":"114","endLine":8,"endColumn":29},{"ruleId":"111","severity":1,"message":"116","line":8,"column":39,"nodeType":"113","messageId":"114","endLine":8,"endColumn":44},{"ruleId":"111","severity":1,"message":"117","line":13,"column":10,"nodeType":"113","messageId":"114","endLine":13,"endColumn":21},{"ruleId":"111","severity":1,"message":"118","line":16,"column":9,"nodeType":"113","messageId":"114","endLine":16,"endColumn":17},{"ruleId":"119","severity":1,"message":"120","line":39,"column":7,"nodeType":"121","endLine":39,"endColumn":9,"suggestions":"122"},{"ruleId":"123","severity":1,"message":"124","line":222,"column":29,"nodeType":"125","endLine":222,"endColumn":178},{"ruleId":"123","severity":1,"message":"124","line":259,"column":29,"nodeType":"125","endLine":259,"endColumn":242},{"ruleId":"111","severity":1,"message":"112","line":3,"column":10,"nodeType":"113","messageId":"114","endLine":3,"endColumn":19},{"ruleId":"111","severity":1,"message":"115","line":3,"column":21,"nodeType":"113","messageId":"114","endLine":3,"endColumn":29},{"ruleId":"111","severity":1,"message":"116","line":3,"column":39,"nodeType":"113","messageId":"114","endLine":3,"endColumn":44},{"ruleId":"111","severity":1,"message":"126","line":4,"column":30,"nodeType":"113","messageId":"114","endLine":4,"endColumn":38},{"ruleId":"111","severity":1,"message":"127","line":5,"column":8,"nodeType":"113","messageId":"114","endLine":5,"endColumn":11},{"ruleId":"111","severity":1,"message":"128","line":6,"column":8,"nodeType":"113","messageId":"114","endLine":6,"endColumn":19},{"ruleId":"111","severity":1,"message":"129","line":10,"column":8,"nodeType":"113","messageId":"114","endLine":10,"endColumn":19},{"ruleId":"111","severity":1,"message":"130","line":18,"column":12,"nodeType":"113","messageId":"114","endLine":18,"endColumn":24},{"ruleId":"119","severity":1,"message":"131","line":26,"column":8,"nodeType":"121","endLine":26,"endColumn":10,"suggestions":"132"},{"ruleId":"111","severity":1,"message":"133","line":80,"column":11,"nodeType":"113","messageId":"114","endLine":80,"endColumn":18},{"ruleId":"111","severity":1,"message":"134","line":4,"column":8,"nodeType":"113","messageId":"114","endLine":4,"endColumn":20},{"ruleId":"111","severity":1,"message":"115","line":6,"column":21,"nodeType":"113","messageId":"114","endLine":6,"endColumn":29},{"ruleId":"111","severity":1,"message":"116","line":6,"column":39,"nodeType":"113","messageId":"114","endLine":6,"endColumn":44},{"ruleId":"111","severity":1,"message":"135","line":7,"column":23,"nodeType":"113","messageId":"114","endLine":7,"endColumn":33},{"ruleId":"111","severity":1,"message":"130","line":12,"column":12,"nodeType":"113","messageId":"114","endLine":12,"endColumn":24},{"ruleId":"111","severity":1,"message":"136","line":12,"column":26,"nodeType":"113","messageId":"114","endLine":12,"endColumn":41},{"ruleId":"111","severity":1,"message":"137","line":19,"column":11,"nodeType":"113","messageId":"114","endLine":19,"endColumn":27},{"ruleId":"119","severity":1,"message":"138","line":27,"column":8,"nodeType":"121","endLine":27,"endColumn":10,"suggestions":"139"},{"ruleId":"111","severity":1,"message":"140","line":71,"column":23,"nodeType":"113","messageId":"114","endLine":71,"endColumn":36},{"ruleId":"111","severity":1,"message":"141","line":85,"column":23,"nodeType":"113","messageId":"114","endLine":85,"endColumn":30},{"ruleId":"123","severity":1,"message":"124","line":129,"column":25,"nodeType":"125","endLine":129,"endColumn":186},{"ruleId":"123","severity":1,"message":"124","line":136,"column":25,"nodeType":"125","endLine":136,"endColumn":186},{"ruleId":"111","severity":1,"message":"112","line":5,"column":10,"nodeType":"113","messageId":"114","endLine":5,"endColumn":19},{"ruleId":"111","severity":1,"message":"115","line":5,"column":21,"nodeType":"113","messageId":"114","endLine":5,"endColumn":29},{"ruleId":"111","severity":1,"message":"116","line":5,"column":39,"nodeType":"113","messageId":"114","endLine":5,"endColumn":44},{"ruleId":"111","severity":1,"message":"135","line":6,"column":23,"nodeType":"113","messageId":"114","endLine":6,"endColumn":33},{"ruleId":"111","severity":1,"message":"127","line":8,"column":8,"nodeType":"113","messageId":"114","endLine":8,"endColumn":11},{"ruleId":"111","severity":1,"message":"128","line":9,"column":8,"nodeType":"113","messageId":"114","endLine":9,"endColumn":19},{"ruleId":"111","severity":1,"message":"142","line":21,"column":12,"nodeType":"113","messageId":"114","endLine":21,"endColumn":19},{"ruleId":"111","severity":1,"message":"143","line":26,"column":12,"nodeType":"113","messageId":"114","endLine":26,"endColumn":30},{"ruleId":"119","severity":1,"message":"144","line":58,"column":8,"nodeType":"121","endLine":58,"endColumn":10,"suggestions":"145"},{"ruleId":"111","severity":1,"message":"146","line":3,"column":8,"nodeType":"113","messageId":"114","endLine":3,"endColumn":21},{"ruleId":"111","severity":1,"message":"147","line":5,"column":9,"nodeType":"113","messageId":"114","endLine":5,"endColumn":15},{"ruleId":"111","severity":1,"message":"112","line":10,"column":10,"nodeType":"113","messageId":"114","endLine":10,"endColumn":19},{"ruleId":"111","severity":1,"message":"148","line":23,"column":12,"nodeType":"113","messageId":"114","endLine":23,"endColumn":21},{"ruleId":"111","severity":1,"message":"149","line":23,"column":23,"nodeType":"113","messageId":"114","endLine":23,"endColumn":35},{"ruleId":"111","severity":1,"message":"150","line":26,"column":12,"nodeType":"113","messageId":"114","endLine":26,"endColumn":26},{"ruleId":"111","severity":1,"message":"151","line":26,"column":28,"nodeType":"113","messageId":"114","endLine":26,"endColumn":45},{"ruleId":"111","severity":1,"message":"152","line":27,"column":12,"nodeType":"113","messageId":"114","endLine":27,"endColumn":23},{"ruleId":"111","severity":1,"message":"153","line":28,"column":12,"nodeType":"113","messageId":"114","endLine":28,"endColumn":22},{"ruleId":"119","severity":1,"message":"154","line":41,"column":7,"nodeType":"121","endLine":41,"endColumn":9,"suggestions":"155"},{"ruleId":"111","severity":1,"message":"156","line":83,"column":23,"nodeType":"113","messageId":"114","endLine":83,"endColumn":32},{"ruleId":"111","severity":1,"message":"156","line":113,"column":23,"nodeType":"113","messageId":"114","endLine":113,"endColumn":32},{"ruleId":"111","severity":1,"message":"157","line":4,"column":8,"nodeType":"113","messageId":"114","endLine":4,"endColumn":18},{"ruleId":"111","severity":1,"message":"158","line":8,"column":8,"nodeType":"113","messageId":"114","endLine":8,"endColumn":15},{"ruleId":"111","severity":1,"message":"159","line":22,"column":12,"nodeType":"113","messageId":"114","endLine":22,"endColumn":23},{"ruleId":"111","severity":1,"message":"160","line":23,"column":12,"nodeType":"113","messageId":"114","endLine":23,"endColumn":24},{"ruleId":"111","severity":1,"message":"161","line":23,"column":26,"nodeType":"113","messageId":"114","endLine":23,"endColumn":41},{"ruleId":"111","severity":1,"message":"130","line":25,"column":12,"nodeType":"113","messageId":"114","endLine":25,"endColumn":24},{"ruleId":"111","severity":1,"message":"162","line":26,"column":12,"nodeType":"113","messageId":"114","endLine":26,"endColumn":19},{"ruleId":"111","severity":1,"message":"142","line":27,"column":12,"nodeType":"113","messageId":"114","endLine":27,"endColumn":19},{"ruleId":"111","severity":1,"message":"163","line":38,"column":11,"nodeType":"113","messageId":"114","endLine":38,"endColumn":25},{"ruleId":"111","severity":1,"message":"164","line":74,"column":9,"nodeType":"113","messageId":"114","endLine":74,"endColumn":25},"no-native-reassign",["165"],"no-negated-in-lhs",["166"],"no-unused-vars","'BigNumber' is defined but never used.","Identifier","unusedVar","'Contract' is defined but never used.","'utils' is defined but never used.","'formatUnits' is defined but never used.","'Dropdown' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'tokenIn.address' and 'tokenOut.address'. Either include them or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setTokenInBalance' needs the current value of 'tokenIn.address'.","ArrayExpression",["167"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'Fragment' is defined but never used.","'Box' is defined but never used.","'ButtonGroup' is defined but never used.","'CardActions' is defined but never used.","'errorMessage' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'displayOwnedNfts'. Either include it or remove the dependency array.",["168"],"'buttons' is assigned a value but never used.","'nalaTokenABI' is defined but never used.","'parseEther' is defined but never used.","'setErrorMessage' is assigned a value but never used.","'nalaTokenAddress' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'getNFTBalance', 'getNFTSStaked', and 'getRewardsBalance'. Either include them or remove the dependency array.",["169"],"'tokensOfOwner' is assigned a value but never used.","'eyesNft' is assigned a value but never used.","'balance' is assigned a value but never used.","'balanceWithRewards' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'getAPR', 'getActiveStakers', 'getRewardsPerDay', 'getTVL', 'getTokenPriceInBUSD', 'getUserBalanceWithRewards', and 'getUserStakedAmount'. Either include them or remove the dependency array.",["170"],"'NalaRouterABI' is defined but never used.","'tokens' is defined but never used.","'liquidity' is assigned a value but never used.","'setLiquidity' is assigned a value but never used.","'amountToRemove' is assigned a value but never used.","'setAmountToRemove' is assigned a value but never used.","'reserveWBNB' is assigned a value but never used.","'reserveNLA' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'getLPTokenBalance' and 'getReserves'. Either include them or remove the dependency array.",["171"],"'nalaToken' is assigned a value but never used.","'IconButton' is defined but never used.","'Tooltip' is defined but never used.","'anchorElNav' is assigned a value but never used.","'anchorElUser' is assigned a value but never used.","'setAnchorElUser' is assigned a value but never used.","'account' is assigned a value but never used.","'connectHandler' is assigned a value but never used.","'handlePageChange' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"172","fix":"173"},{"desc":"174","fix":"175"},{"desc":"176","fix":"177"},{"desc":"178","fix":"179"},{"desc":"180","fix":"181"},"Update the dependencies array to be: [tokenIn.address, tokenOut.address]",{"range":"182","text":"183"},"Update the dependencies array to be: [displayOwnedNfts]",{"range":"184","text":"185"},"Update the dependencies array to be: [getNFTBalance, getNFTSStaked, getRewardsBalance]",{"range":"186","text":"187"},"Update the dependencies array to be: [getAPR, getActiveStakers, getRewardsPerDay, getTVL, getTokenPriceInBUSD, getUserBalanceWithRewards, getUserStakedAmount]",{"range":"188","text":"189"},"Update the dependencies array to be: [getLPTokenBalance, getReserves]",{"range":"190","text":"191"},[1573,1575],"[tokenIn.address, tokenOut.address]",[1032,1034],"[displayOwnedNfts]",[1200,1202],"[getNFTBalance, getNFTSStaked, getRewardsBalance]",[2566,2568],"[getAPR, getActiveStakers, getRewardsPerDay, getTVL, getTokenPriceInBUSD, getUserBalanceWithRewards, getUserStakedAmount]",[1827,1829],"[getLPTokenBalance, getReserves]"]