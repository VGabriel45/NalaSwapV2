[{"/Users/ja/Desktop/MyProjects/NalaSwap/webapp/nalaswap/src/index.js":"1","/Users/ja/Desktop/MyProjects/NalaSwap/webapp/nalaswap/src/App.js":"2","/Users/ja/Desktop/MyProjects/NalaSwap/webapp/nalaswap/src/pages/HomePage.js":"3","/Users/ja/Desktop/MyProjects/NalaSwap/webapp/nalaswap/src/pages/NftsPage.js":"4","/Users/ja/Desktop/MyProjects/NalaSwap/webapp/nalaswap/src/pages/NFTStakingPage.js":"5","/Users/ja/Desktop/MyProjects/NalaSwap/webapp/nalaswap/src/pages/StakePage.js":"6","/Users/ja/Desktop/MyProjects/NalaSwap/webapp/nalaswap/src/pages/Pools.js":"7","/Users/ja/Desktop/MyProjects/NalaSwap/webapp/nalaswap/src/components/Navbar.js":"8","/Users/ja/Desktop/MyProjects/NalaSwap/webapp/nalaswap/src/utils/availableTokens.js":"9"},{"size":459,"mtime":1653994934375,"results":"10","hashOfConfig":"11"},{"size":1798,"mtime":1653993327881,"results":"12","hashOfConfig":"11"},{"size":10885,"mtime":1653995052863,"results":"13","hashOfConfig":"11"},{"size":4628,"mtime":1654287211479,"results":"14","hashOfConfig":"11"},{"size":6843,"mtime":1653993300566,"results":"15","hashOfConfig":"11"},{"size":12508,"mtime":1654432003750,"results":"16","hashOfConfig":"11"},{"size":12468,"mtime":1654428008564,"results":"17","hashOfConfig":"11"},{"size":4937,"mtime":1653995056222,"results":"18","hashOfConfig":"11"},{"size":1111,"mtime":1654274026743,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"18pr10c",{"filePath":"23","messages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"25","messages":"26","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27","usedDeprecatedRules":"22"},{"filePath":"28","messages":"29","errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30","usedDeprecatedRules":"22"},{"filePath":"31","messages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"22"},{"filePath":"34","messages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"36","messages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"38","messages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40","usedDeprecatedRules":"22"},{"filePath":"41","messages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"/Users/ja/Desktop/MyProjects/NalaSwap/webapp/nalaswap/src/index.js",[],["43","44"],"/Users/ja/Desktop/MyProjects/NalaSwap/webapp/nalaswap/src/App.js",[],"/Users/ja/Desktop/MyProjects/NalaSwap/webapp/nalaswap/src/pages/HomePage.js",["45","46","47","48","49"],"import * as React from 'react';\nimport TextField from '@mui/material/TextField';\nimport Autocomplete from '@mui/material/Autocomplete';\nimport Box from '@mui/material/Box';\nimport Button from '@mui/material/Button';\nimport InputAdornment from '@mui/material/InputAdornment';\nimport {useEffect, useState, Fragment} from \"react\";\nimport { BigNumber, Contract, ethers, utils } from 'ethers';\nimport NalaRouterAbi from \"../ABIS/NalaRouter.json\"\nimport {tokens} from \"../utils/availableTokens\";\nimport RefreshIcon from '@mui/icons-material/Refresh';\nimport Tooltip from '@mui/material/Tooltip';\nimport { formatUnits } from '@ethersproject/units';\nimport CircularProgress from '@mui/material/CircularProgress';\nimport contractAddresses from \"../utils/contractsAddresses.json\";\n\nexport default function HomePage () {\n\n    const [tokenIn, setTokenIn] = useState(tokens[0]);\n    const [tokenOut, setTokenOut] = useState(tokens[1]);\n\n    const [amountIn, setAmountIn] = useState(0);\n    const [amountOut, setAmountOut] = useState(0);\n\n    const [tokenInBalance, setTokenInBalance] = useState(0);\n    const [tokenOutBalance, setTokenOutBalance] = useState(0);\n\n    const [loadingTransaction, setLoadingTransaction] = useState(false);\n\n    const contractAddress = contractAddresses.nalaRouterContract;\n\n    useEffect(() => {\n        const getBalances = async () => {\n            setTokenInBalance(await getTokenBalance(tokenIn.address));\n            setTokenOutBalance(await getTokenBalance(tokenOut.address));\n        }\n       getBalances();\n    },[]);\n\n    const swapExactTokensForBNB = async (tokenIn, amountIn, signer, nalaRouter) => {\n        setLoadingTransaction(true);\n        try {\n            const tokenInContract = new ethers.Contract(tokenIn.address, [\"function approve(address _spender, uint256 _value) public returns (bool success)\"], signer)\n            await tokenInContract.connect(signer).approve(contractAddress, \"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\")\n            const tx = await nalaRouter.connect(signer).swapExactTokensForBNB(\n                tokenIn.address, \n                ethers.utils.parseEther(amountIn.toString()),\n                0,\n            )\n            tx.wait();\n            setLoadingTransaction(false);\n        } catch (error) {\n            console.log(\"Transaction error\");\n            setLoadingTransaction(false);\n        }\n    }\n\n    const swapExactBNBForTokens = async (tokenOut, amountIn, signer, nalaRouter) => {\n        console.log(\"swapExactBNBForTokens\");\n        setLoadingTransaction(true);\n        try {\n            const tx = await nalaRouter\n                .connect(signer)\n                .swapExactBNBForTokens(\n                    0, \n                    tokenOut.address, \n                    { value: ethers.utils.parseEther(amountIn)}\n                );\n            tx.wait();\n            setLoadingTransaction(false);\n        } catch (error) {\n            console.log(\"Transaction error\");\n            setLoadingTransaction(false);\n        }\n        \n    }\n\n    const swapExactTokensForTokens = async (tokenIn, tokenOut, amountIn, signer, nalaRouter) => {\n        setLoadingTransaction(true);\n        try {\n            const tokenInContract = new ethers.Contract(tokenIn.address, [\"function approve(address _spender, uint256 _value) public returns (bool success)\"], signer)\n            await tokenInContract.connect(signer).approve(contractAddress, \"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\")\n            const tx = await nalaRouter.connect(signer).swapExactTokensForTokens(\n                ethers.utils.parseEther(amountIn.toString()),\n                0,\n                [tokenIn.address, tokenOut.address]\n            )\n            tx.wait();\n            setLoadingTransaction(false);\n        } catch (error) {\n            console.log(\"Transaction error\");\n            setLoadingTransaction(false);\n        }\n    }\n\n    const swapTokens = async (tokenIn, tokenOut, amountIn, amountOut) => {\n        if (typeof window.ethereum !== 'undefined') {\n            const provider = new ethers.providers.Web3Provider(window.ethereum)\n            const signer = provider.getSigner()\n            console.log(signer);\n            if (signer) {\n              const contract = new ethers.Contract(contractAddress, NalaRouterAbi, signer)\n              if(tokenIn.label === \"BNB\") {\n                swapExactBNBForTokens(tokenOut, amountIn, signer, contract);\n              } else if (tokenOut.label === \"BNB\") {\n                swapExactTokensForBNB(tokenIn, amountIn, signer, contract);\n              } else {\n                swapExactTokensForTokens(tokenIn, tokenOut, amountIn, signer, contract);\n              }\n            }\n        }\n    }\n\n    const switchTokenOrder = () => {\n        setTokenIn(tokenOut);\n        setTokenOut(tokenIn);\n    }\n\n    const getTokenBalance = async (tokenAddress) => {\n        if (typeof window.ethereum !== 'undefined') {\n            const provider = new ethers.providers.Web3Provider(window.ethereum)\n            const signer = provider.getSigner();\n            if (signer) {\n                const tokenInContract = new ethers.Contract(tokenAddress, [\"function balanceOf(address) public view returns (uint256)\"], signer);\n                const balance = await tokenInContract.balanceOf(signer.getAddress());\n                return formatUnits(BigNumber.from(balance.toString(), 18));\n            }\n        }\n    }\n\n    return (\n        <>\n            <Box\n                component=\"form\"\n                sx={{\n                    '& > :not(style)': { m: 1, width: '25ch'},\n                }}\n                noValidate\n                autoComplete=\"off\"\n                style={{borderRadius:\"10px\", border:\"2px solid #502199\", marginBottom:\"5%\"}}\n                >\n                <Autocomplete\n                    disablePortal\n                    id=\"selectBox1\"\n                    options={tokens.filter(token => token.address !== tokenOut.address)}\n                    sx={{ width: 300 }}\n                    renderInput={(params) => <TextField {...params} label={`Balance: ${tokenInBalance}`} /> }\n                    style={{border:\"1px solid #502199\", borderRadius: \"10px\"}}\n                    value={tokenIn.label ? tokenIn.label : \"BNB\"}\n                    onChange={(event, newValue) => {\n                        if(newValue.address !== tokenOut.address) {\n                            setTokenIn(newValue);\n                            setTokenInBalance(getTokenBalance(newValue.address));\n                            console.log(tokenInBalance);\n                        } \n                    }}\n                />\n                <TextField \n                    id=\"amountIn\" \n                    type=\"number\" \n                    placeholder=\"0.0\" \n                    variant=\"outlined\" \n                    value={amountIn}\n                    InputProps={{\n                        startAdornment: (\n                          <InputAdornment position=\"start\">\n                            <img src={tokenIn.image ? tokenIn.image : \"https://seeklogo.com/images/B/binance-coin-bnb-logo-97F9D55608-seeklogo.com.png\"} style={{width:\"25px\"}}/>\n                          </InputAdornment>\n                        ),\n                      }}\n                    onChange={async (e) => {\n                        if (typeof window.ethereum !== 'undefined') {\n                            const provider = new ethers.providers.Web3Provider(window.ethereum)\n                            const signer = provider.getSigner();\n                            if (signer) {\n                                const tokenInContract = new ethers.Contract(\"0x10ED43C718714eb63d5aA57B78B54704E256024E\", [\"function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts)\"], signer);\n                                setAmountIn(e.target.value);\n                                    const tokenOutAmount = await tokenInContract\n                                        .getAmountsOut(\n                                            ethers.utils.parseEther(amountIn.toString()), \n                                            [tokenIn.address, tokenOut.address]\n                                        )\n                                    setAmountOut(formatUnits(BigNumber.from(tokenOutAmount[1].toString(), 18)))\n                            }\n                        }\n                    }}\n                />\n                <div>\n                <Tooltip title=\"Switch token order\"> \n                    <Button onClick={() => switchTokenOrder()} variant=\"text\"><RefreshIcon sx={{ color:\"#FFEF00\"}}/></Button>\n                </Tooltip>\n                </div>\n                <Autocomplete\n                    disablePortal\n                    id=\"selectBox2\"\n                    options={tokens.filter(token => token.address !== tokenIn.address)}\n                    sx={{ width: \"80%\" }}\n                    renderInput={(params) => <TextField {...params} label={`Balance: ${tokenOutBalance}`} />}\n                    style={{border:\"1px solid #502199\", borderRadius: \"10px\"}}\n                    value={tokenOut.label ? tokenOut.label : \"BANANA\"}\n                    onChange={(event, newValue) => {\n                        if(newValue.address !== tokenIn.address) {\n                            setTokenOut(newValue);\n                            setTokenOutBalance(getTokenBalance(newValue.address));\n                            console.log(tokenOutBalance);\n                        } \n                    }}\n                />\n                <TextField \n                    id=\"amountOut\" \n                    type=\"number\" \n                    placeholder=\"0.0\" \n                    variant=\"outlined\" \n                    value={amountOut}\n                    InputProps={{\n                        startAdornment: (\n                          <InputAdornment position=\"start\">\n                            <img src={tokenOut.image ? tokenOut.image : \"https://raw.githubusercontent.com/trustwallet/assets/master/blockchains/smartchain/assets/0x603c7f932ED1fc6575303D8Fb018fDCBb0f39a95/logo.png\"} style={{width:\"25px\"}}/>\n                          </InputAdornment>\n                        ),\n                      }}\n                    onChange={(e, newValue) => {\n                        console.log(e.target.value);\n                        setAmountOut(e.target.value);\n                    }}\n                />\n            </Box>\n            <Button \n                onClick={() => swapTokens(tokenIn, tokenOut, amountIn, amountOut)} \n                variant=\"contained\" \n                style={{background: \"black\", width: \"100%\", color: \"#e3d476\"}}\n            >\n                {loadingTransaction ? <CircularProgress sx={{color:\"yellow\"}}/> : \"Swap tokens\"}\n            </Button>\n        </>\n        \n    )\n\n}","/Users/ja/Desktop/MyProjects/NalaSwap/webapp/nalaswap/src/pages/NftsPage.js",["50","51","52","53","54","55","56","57","58","59"],"import * as React from 'react';\nimport nftAbi from \"../ABIS/NFTCollection.json\";\nimport { BigNumber, Contract, ethers, utils } from 'ethers';\nimport {useEffect, useState, Fragment} from \"react\";\nimport Box from '@mui/material/Box';\nimport ButtonGroup from '@mui/material/ButtonGroup';\nimport contractAddresses from \"../utils/contractsAddresses.json\";\nimport Button from '@mui/material/Button';\nimport Card from '@mui/material/Card';\nimport CardActions from '@mui/material/CardActions';\nimport CardContent from '@mui/material/CardContent';\nimport CardMedia from '@mui/material/CardMedia';\nimport Typography from '@mui/material/Typography';\nimport Grid from '@mui/material/Grid';\n\nexport default function StakePage () {\n\n    const [errorMessage, setErrorMessage] = useState(\"\");\n    const [ownedNfts, setOwnedNfts] = useState([]);\n\n    const nftAddress = contractAddresses.nftCollectionAddress;\n\n    useEffect(() => {\n        const displayAndSet = async () => {setOwnedNfts(await displayOwnedNfts())};\n        displayAndSet();\n    }, [])\n\n    const getOwnedNFTS = async () => {\n        if (typeof window.ethereum !== 'undefined') {\n            const provider = new ethers.providers.Web3Provider(window.ethereum);\n            const signer = provider.getSigner();\n            let nftArr = [];\n            if (signer) {\n              const nftContract = new ethers.Contract(nftAddress, nftAbi, signer);\n              const ownedNftsCount = parseInt(await nftContract.balanceOf(signer.getAddress()));\n              for (let index = 0; index < ownedNftsCount; index++) {\n                    let nftId = await nftContract.tokenOfOwnerByIndex(signer.getAddress(), index);\n                    nftArr.push(nftId);                  \n              }\n              return nftArr;\n            }\n        }\n    }\n\n     const displayOwnedNfts = async () => {\n        let ids = await getOwnedNFTS();\n        let nftMetadataArr = [];\n        for (let index = 0; index < ids.length; index++) {\n            const response = await fetch(`https://gateway.pinata.cloud/ipfs/QmSxkTx7LDNvYYJFFtSVDafd4DD4sAUYD34YydcTML6N7X/${ids[index]}.json`)\n            const responseJson = await response.json();\n            nftMetadataArr.push(responseJson);\n        }\n        return nftMetadataArr;\n    }\n\n    const mintNft = async () => {\n        if (typeof window.ethereum !== 'undefined') {\n            const provider = new ethers.providers.Web3Provider(window.ethereum)\n            const signer = provider.getSigner()\n            if (signer) {\n              const nftContract = new ethers.Contract(nftAddress, nftAbi, signer);\n              try {\n                const tx = await nftContract.connect(signer).mint(\n                    signer.getAddress(),\n                    1,\n                    {value: ethers.utils.parseEther(\"1\"), from: signer.getAddress()}\n                )\n                tx.wait();\n                console.log(tx);\n                } catch (error) {\n                    console.log(\"Transaction error\");\n                }\n            } else {\n                setErrorMessage(\"Cannot stake 0 tokens\");\n            }\n        }\n        \n    }\n\n    const buttons = [\n        <Button key=\"Mint\" onClick={() => mintNft()}>Mint</Button>,\n    ];\n\n    return (\n        <Grid sx={{ flexGrow: 1 }} container spacing={2}>\n            <Button color=\"secondary\" variant=\"contained\" key=\"Mint\" onClick={() => mintNft()} style={{marginLeft: 180}}>Mint</Button>\n            <Grid item xs={12}>\n                <Grid container justifyContent=\"center\" spacing={3}>\n                    {ownedNfts.map(nft => \n                        <Grid key={nft.name} item>\n                            <Card sx={{ maxWidth: 345 }}>\n                            <CardMedia\n                                component=\"img\"\n                                height=\"140\"\n                                src={`https://gateway.pinata.cloud/ipfs/QmcEfnhCfPn5SFA9PQ6YRELsTrDRSkapYiHwEAifuWtNQp/${nft.edition}.png`}\n                                alt=\"green iguana\"\n                            />\n                            <CardContent>\n                                <Typography gutterBottom variant=\"h5\" component=\"div\">\n                                {nft.name}\n                                </Typography>\n                                <Typography variant=\"body2\" color=\"text.secondary\">\n                                An eye.\n                                </Typography>\n                            </CardContent>\n                        </Card>\n                        </Grid>\n                    )}\n                </Grid>\n            </Grid>\n        </Grid>\n    )\n}","/Users/ja/Desktop/MyProjects/NalaSwap/webapp/nalaswap/src/pages/NFTStakingPage.js",["60","61","62","63","64","65","66","67","68","69","70","71"],"import * as React from 'react';\nimport {useEffect, useState} from \"react\";\nimport nftStakingABI from \"../ABIS/NFTStaking.json\";\nimport nalaTokenABI from \"../ABIS/NalaTokenABI.json\";\nimport EyesNftABI from \"../ABIS/NFTCollection.json\";\nimport { BigNumber, Contract, ethers, utils } from 'ethers';\nimport { formatUnits, parseEther } from '@ethersproject/units';\nimport contractAddresses from \"../utils/contractsAddresses.json\";\n\nexport default function StakePage () {\n\n    const [errorMessage, setErrorMessage] = useState(\"\");\n    const [myStakedNfts, setMyStakedNfts] = useState([]);\n    const [rewardsBalance, setRewardsBalance] = useState(0);\n    const [unstakedNFTS, setUnstakedNFTS] = useState([]);\n\n    const nftAddress = contractAddresses.nftCollectionAddress;\n    const nftStakingAddress = contractAddresses.nftStakingContract;\n    const nalaTokenAddress = contractAddresses.nalaTokenAddress;\n\n    useEffect(() => {\n        getRewardsBalance();\n        const setAndDisplay = async () => {setMyStakedNfts(await getNFTSStaked())};\n        const setAndDisplayUnstakedNFTS = async () => {setUnstakedNFTS(await getNFTBalance())};\n        setAndDisplay();\n        setAndDisplayUnstakedNFTS();\n    }, []);\n\n    const stake = async (nftId) => {\n        if (typeof window.ethereum !== 'undefined') {\n            const provider = new ethers.providers.Web3Provider(window.ethereum);\n            const signer = provider.getSigner();\n            if (signer) {\n                const nftStakingContract = new ethers.Contract(nftStakingAddress, nftStakingABI, signer);\n                const eyesNft = new ethers.Contract(nftAddress, EyesNftABI, signer);\n                await eyesNft.setApprovalForAll(nftStakingAddress, true)\n                await nftStakingContract.stake(0, [nftId]);\n            }\n        }\n    }\n\n    const unStake = async (nftId) => {\n        if (typeof window.ethereum !== 'undefined') {\n            const provider = new ethers.providers.Web3Provider(window.ethereum);\n            const signer = provider.getSigner();\n            if (signer) {\n                const nftStakingContract = new ethers.Contract(nftStakingAddress, nftStakingABI, signer);\n                await nftStakingContract.unstake(0, [nftId]);\n            }\n        }\n    }\n\n    const claimRewards = async (nftId) => {\n        if (typeof window.ethereum !== 'undefined') {\n            const provider = new ethers.providers.Web3Provider(window.ethereum);\n            const signer = provider.getSigner();\n            if (signer) {\n                const nftStakingContract = new ethers.Contract(nftStakingAddress, nftStakingABI, signer);\n                await nftStakingContract.claim(0, [nftId]);\n            }\n        }\n    }\n\n    const getRewardsBalance = async () => {\n        if (typeof window.ethereum !== 'undefined') {\n            const provider = new ethers.providers.Web3Provider(window.ethereum);\n            const signer = provider.getSigner();\n            if (signer) {\n                const nftStakingContract = new ethers.Contract(nftStakingAddress, nftStakingABI, signer);\n                const balance = await nftStakingContract.earningInfo(signer.getAddress(), [1, 2]); // FIX\n                const tokensOfOwner = await nftStakingContract.tokensOfOwner(0, signer.getAddress());\n                setRewardsBalance(formatUnits(BigNumber.from(balance.toString(), 18)));\n            }\n        }\n    }\n\n    const getNFTSStaked = async () => {\n        let nftsIdsArr = [];\n        let nftMetadataArr = [];\n        if (typeof window.ethereum !== 'undefined') {\n            const provider = new ethers.providers.Web3Provider(window.ethereum);\n            const signer = provider.getSigner();\n            if (signer) {\n                const nftStakingContract = new ethers.Contract(nftStakingAddress, nftStakingABI, signer);\n                const eyesNft = new ethers.Contract(nftAddress, EyesNftABI, signer);\n                nftsIdsArr = await nftStakingContract.tokensOfOwner(0, signer.getAddress());\n                for (let index = 0; index < nftsIdsArr.length; index++) {\n                    const response = await fetch(`https://gateway.pinata.cloud/ipfs/QmSxkTx7LDNvYYJFFtSVDafd4DD4sAUYD34YydcTML6N7X/${nftsIdsArr[index]}.json`)\n                    const responseJson = await response.json();\n                    nftMetadataArr.push(responseJson);\n                }\n\n            }\n        }\n        return nftMetadataArr;\n    }\n\n    const getNFTBalance = async () => {\n        let nftMetadataArr = [];\n        if (typeof window.ethereum !== 'undefined') {\n            const provider = new ethers.providers.Web3Provider(window.ethereum);\n            const signer = provider.getSigner();\n            if (signer) {\n                const eyesNft = new ethers.Contract(nftAddress, EyesNftABI, signer);\n                const amountOfNfts = await eyesNft.balanceOf(signer.getAddress());\n                for (let index = 0; index < amountOfNfts; index++) {\n                    const nftID = await eyesNft.tokenOfOwnerByIndex(signer.getAddress(), index);\n                    const response = await fetch(`https://gateway.pinata.cloud/ipfs/QmSxkTx7LDNvYYJFFtSVDafd4DD4sAUYD34YydcTML6N7X/${nftID}.json`)\n                    const responseJson = await response.json();\n                    nftMetadataArr.push(responseJson);\n                }\n\n            }\n        }\n        return nftMetadataArr;\n    }\n\n    return (\n        <>\n            <div style={{display: \"flex\", flexDirection:\"row\", justifyContent: \"space-around\"}}>\n                <button onClick={() => claimRewards(1)}>Claim rewards</button>\n            </div>\n           <p>Rewards balance: {rewardsBalance}</p>\n           NFT'S Staked currently:\n           <div style={{display: \"flex\", flexDirection:\"row\", justifyContent: \"space-around\"}}>\n                {myStakedNfts.map(nft => \n                    <div style={{display: \"flex\", flexDirection:\"column\", justifyContent: \"space-around\"}}>\n                        <p>{nft.name}</p>\n                        <img style={{width: \"100px\", borderRadius: \"10px\"}} src={`https://gateway.pinata.cloud/ipfs/QmcEfnhCfPn5SFA9PQ6YRELsTrDRSkapYiHwEAifuWtNQp/${nft.edition}.png`}/>\n                        <button onClick={() => unStake(nft.edition)}>Unstake</button>\n                    </div>\n                )}\n                {unstakedNFTS.map(nft => \n                    <div style={{display: \"flex\", flexDirection:\"column\", justifyContent: \"space-around\"}}>\n                        <p>{nft.name}</p>\n                        <img style={{width: \"100px\", borderRadius: \"10px\"}} src={`https://gateway.pinata.cloud/ipfs/QmcEfnhCfPn5SFA9PQ6YRELsTrDRSkapYiHwEAifuWtNQp/${nft.edition}.png`}/>\n                        <button onClick={() => stake(nft.edition)}>Stake</button>\n                    </div>\n                )}\n            </div>\n        </>\n    )\n}","/Users/ja/Desktop/MyProjects/NalaSwap/webapp/nalaswap/src/pages/StakePage.js",["72","73","74","75","76","77","78","79","80"],"/Users/ja/Desktop/MyProjects/NalaSwap/webapp/nalaswap/src/pages/Pools.js",["81","82","83","84","85","86"],"/Users/ja/Desktop/MyProjects/NalaSwap/webapp/nalaswap/src/components/Navbar.js",["87","88","89","90","91","92","93","94","95","96"],"import AppBar from '@mui/material/AppBar';\nimport Box from '@mui/material/Box';\nimport Toolbar from '@mui/material/Toolbar';\nimport IconButton from '@mui/material/IconButton';\nimport Typography from '@mui/material/Typography';\nimport Container from '@mui/material/Container';\nimport Button from '@mui/material/Button';\nimport Tooltip from '@mui/material/Tooltip';\nimport { ThemeProvider, createTheme } from '@mui/material/styles';\nimport Stack from '@mui/material/Stack';\nimport { useNavigate } from 'react-router-dom';\nimport {ConnectButton} from 'web3uikit';\n\nimport logo from \"../logo.svg\";\n\nimport { ethers } from \"ethers\";\nimport React, { useEffect, useState } from \"react\";\n\nconst pages = ['Swap', 'Pools', 'Stake NLA', 'Mint NFT', 'Stake NFT'];\n\nconst ResponsiveAppBar = () => {\n    const [anchorElNav, setAnchorElNav] = React.useState(null);\n    const [anchorElUser, setAnchorElUser] = React.useState(null);\n\n    const [errorMessage, setErrorMessage] = useState(null);\n    const [account, setAccount] = useState(null);\n    const [balance, setBalance] = useState(null);\n\n    const navigate = useNavigate();\n\n    useEffect(() => {\n        if (window.ethereum) {\n            window.ethereum.on(\"accountsChanged\", accountsChanged);\n            window.ethereum.on(\"chainChanged\", chainChanged);\n        }\n    },[]);\n\n    const connectHandler = async () => {\n        if (window.ethereum) {\n          try {\n            const res = await window.ethereum.request({\n              method: \"eth_requestAccounts\",\n            });\n            await accountsChanged(res[0]);\n          } catch (err) {\n            console.error(err);\n            setErrorMessage(\"There was a problem connecting to MetaMask\");\n          }\n        } else {\n          setErrorMessage(\"Install MetaMask\");\n        }\n    };\n    \n    const accountsChanged = async (newAccount) => {\n        setAccount(newAccount);\n        try {\n            const balance = await window.ethereum.request({\n            method: \"eth_getBalance\",\n            params: [newAccount.toString(), \"latest\"],\n            });\n            setBalance(ethers.utils.formatEther(balance));\n        } catch (err) {\n            console.error(err);\n            setErrorMessage(\"There was a problem connecting to MetaMask\");\n        }\n    };\n\n    const chainChanged = () => {\n        setErrorMessage(null);\n        setAccount(null);\n        setBalance(null);\n    };\n\n  const handlePageChange = () => {\n    setAnchorElNav(null);\n  };\n\n  const darkTheme = createTheme({\n    palette: {\n      mode: 'dark',\n      primary: {\n        main: '#1976d2',\n      },\n    },\n  });\n\n  return (\n    <Stack spacing={2} sx={{ flexGrow: 1 }}>\n        <ThemeProvider theme={darkTheme}>\n            <AppBar position=\"static\">\n            <Container maxWidth=\"xl\">\n                <Toolbar disableGutters>\n                <Typography\n                    variant=\"h6\"\n                    noWrap\n                    component=\"div\"\n                    sx={{ mr: 2, display: { xs: 'none', md: 'flex' } }}\n                >\n                    <img style={{width: \"50px\", height:\"50px\", margin:\"0px\", padding:\"0px\"}} src={logo} className=\"App-logo\" alt=\"logo\" />\n                </Typography>\n                <Box sx={{ flexGrow: 1, display: { xs: 'none', md: 'flex' } }}>\n                    {pages.map((page) => (\n                        <Button\n                            key={page}\n                            onClick={()=> navigate(page.toLowerCase())}\n                            sx={{ my: 1, color: 'yellow', display: 'block' }}\n                        >\n                            {page}\n                        </Button>\n                    ))}\n                </Box>\n                {/* <Box sx={{ flexGrow: 0, display: { xs: 'none', md: 'flex' } }}>\n                    <Tooltip title=\"Connect to metamask\">\n                    <IconButton onClick={connectHandler} sx={{ p: 0 }}>\n                        <img style={{width: \"50px\", height:\"50px\", margin:\"0px\", padding:\"0px\"}} src={\"https://upload.wikimedia.org/wikipedia/commons/thumb/3/36/MetaMask_Fox.svg/800px-MetaMask_Fox.svg.png\"} className=\"App-logo\" alt=\"logo\" />\n                    </IconButton>\n                    </Tooltip>\n                    {account !== null ? \n                        <Typography\n                        variant=\"small\"\n                        noWrap\n                        component=\"div\"\n                        sx={{ my: 2, ml: 1, display: 'block' }}\n                        >\n                            {`${account.substr(0,5)}...${account.substr(account.length - 5, account.length)}`}\n                        </Typography>\n                    : \"\"}\n                </Box> */}\n                <ConnectButton chainId={31337} moralisAuth={false} signingMessage=\"Connected !\" />\n                </Toolbar>\n            </Container>\n            </AppBar>\n        </ThemeProvider>\n    </Stack>\n  );\n};\nexport default ResponsiveAppBar;\n","/Users/ja/Desktop/MyProjects/NalaSwap/webapp/nalaswap/src/utils/availableTokens.js",[],{"ruleId":"97","replacedBy":"98"},{"ruleId":"99","replacedBy":"100"},{"ruleId":"101","severity":1,"message":"102","line":8,"column":21,"nodeType":"103","messageId":"104","endLine":8,"endColumn":29},{"ruleId":"101","severity":1,"message":"105","line":8,"column":39,"nodeType":"103","messageId":"104","endLine":8,"endColumn":44},{"ruleId":"106","severity":1,"message":"107","line":38,"column":7,"nodeType":"108","endLine":38,"endColumn":9,"suggestions":"109"},{"ruleId":"110","severity":1,"message":"111","line":167,"column":29,"nodeType":"112","endLine":167,"endColumn":178},{"ruleId":"110","severity":1,"message":"111","line":218,"column":29,"nodeType":"112","endLine":218,"endColumn":242},{"ruleId":"101","severity":1,"message":"113","line":3,"column":10,"nodeType":"103","messageId":"104","endLine":3,"endColumn":19},{"ruleId":"101","severity":1,"message":"102","line":3,"column":21,"nodeType":"103","messageId":"104","endLine":3,"endColumn":29},{"ruleId":"101","severity":1,"message":"105","line":3,"column":39,"nodeType":"103","messageId":"104","endLine":3,"endColumn":44},{"ruleId":"101","severity":1,"message":"114","line":4,"column":30,"nodeType":"103","messageId":"104","endLine":4,"endColumn":38},{"ruleId":"101","severity":1,"message":"115","line":5,"column":8,"nodeType":"103","messageId":"104","endLine":5,"endColumn":11},{"ruleId":"101","severity":1,"message":"116","line":6,"column":8,"nodeType":"103","messageId":"104","endLine":6,"endColumn":19},{"ruleId":"101","severity":1,"message":"117","line":10,"column":8,"nodeType":"103","messageId":"104","endLine":10,"endColumn":19},{"ruleId":"101","severity":1,"message":"118","line":18,"column":12,"nodeType":"103","messageId":"104","endLine":18,"endColumn":24},{"ruleId":"106","severity":1,"message":"119","line":26,"column":8,"nodeType":"108","endLine":26,"endColumn":10,"suggestions":"120"},{"ruleId":"101","severity":1,"message":"121","line":80,"column":11,"nodeType":"103","messageId":"104","endLine":80,"endColumn":18},{"ruleId":"101","severity":1,"message":"122","line":4,"column":8,"nodeType":"103","messageId":"104","endLine":4,"endColumn":20},{"ruleId":"101","severity":1,"message":"102","line":6,"column":21,"nodeType":"103","messageId":"104","endLine":6,"endColumn":29},{"ruleId":"101","severity":1,"message":"105","line":6,"column":39,"nodeType":"103","messageId":"104","endLine":6,"endColumn":44},{"ruleId":"101","severity":1,"message":"123","line":7,"column":23,"nodeType":"103","messageId":"104","endLine":7,"endColumn":33},{"ruleId":"101","severity":1,"message":"118","line":12,"column":12,"nodeType":"103","messageId":"104","endLine":12,"endColumn":24},{"ruleId":"101","severity":1,"message":"124","line":12,"column":26,"nodeType":"103","messageId":"104","endLine":12,"endColumn":41},{"ruleId":"101","severity":1,"message":"125","line":19,"column":11,"nodeType":"103","messageId":"104","endLine":19,"endColumn":27},{"ruleId":"106","severity":1,"message":"126","line":27,"column":8,"nodeType":"108","endLine":27,"endColumn":10,"suggestions":"127"},{"ruleId":"101","severity":1,"message":"128","line":71,"column":23,"nodeType":"103","messageId":"104","endLine":71,"endColumn":36},{"ruleId":"101","severity":1,"message":"129","line":85,"column":23,"nodeType":"103","messageId":"104","endLine":85,"endColumn":30},{"ruleId":"110","severity":1,"message":"111","line":129,"column":25,"nodeType":"112","endLine":129,"endColumn":186},{"ruleId":"110","severity":1,"message":"111","line":136,"column":25,"nodeType":"112","endLine":136,"endColumn":186},{"ruleId":"101","severity":1,"message":"113","line":5,"column":10,"nodeType":"103","messageId":"104","endLine":5,"endColumn":19},{"ruleId":"101","severity":1,"message":"102","line":5,"column":21,"nodeType":"103","messageId":"104","endLine":5,"endColumn":29},{"ruleId":"101","severity":1,"message":"105","line":5,"column":39,"nodeType":"103","messageId":"104","endLine":5,"endColumn":44},{"ruleId":"101","severity":1,"message":"123","line":6,"column":23,"nodeType":"103","messageId":"104","endLine":6,"endColumn":33},{"ruleId":"101","severity":1,"message":"115","line":8,"column":8,"nodeType":"103","messageId":"104","endLine":8,"endColumn":11},{"ruleId":"101","severity":1,"message":"116","line":9,"column":8,"nodeType":"103","messageId":"104","endLine":9,"endColumn":19},{"ruleId":"101","severity":1,"message":"130","line":18,"column":12,"nodeType":"103","messageId":"104","endLine":18,"endColumn":19},{"ruleId":"101","severity":1,"message":"131","line":23,"column":12,"nodeType":"103","messageId":"104","endLine":23,"endColumn":30},{"ruleId":"106","severity":1,"message":"132","line":44,"column":8,"nodeType":"108","endLine":44,"endColumn":10,"suggestions":"133"},{"ruleId":"101","severity":1,"message":"134","line":3,"column":8,"nodeType":"103","messageId":"104","endLine":3,"endColumn":21},{"ruleId":"101","severity":1,"message":"135","line":5,"column":9,"nodeType":"103","messageId":"104","endLine":5,"endColumn":15},{"ruleId":"101","severity":1,"message":"113","line":8,"column":10,"nodeType":"103","messageId":"104","endLine":8,"endColumn":19},{"ruleId":"101","severity":1,"message":"136","line":17,"column":12,"nodeType":"103","messageId":"104","endLine":17,"endColumn":21},{"ruleId":"101","severity":1,"message":"137","line":17,"column":23,"nodeType":"103","messageId":"104","endLine":17,"endColumn":35},{"ruleId":"101","severity":1,"message":"138","line":19,"column":11,"nodeType":"103","messageId":"104","endLine":19,"endColumn":19},{"ruleId":"101","severity":1,"message":"139","line":4,"column":8,"nodeType":"103","messageId":"104","endLine":4,"endColumn":18},{"ruleId":"101","severity":1,"message":"140","line":8,"column":8,"nodeType":"103","messageId":"104","endLine":8,"endColumn":15},{"ruleId":"101","severity":1,"message":"141","line":22,"column":12,"nodeType":"103","messageId":"104","endLine":22,"endColumn":23},{"ruleId":"101","severity":1,"message":"142","line":23,"column":12,"nodeType":"103","messageId":"104","endLine":23,"endColumn":24},{"ruleId":"101","severity":1,"message":"143","line":23,"column":26,"nodeType":"103","messageId":"104","endLine":23,"endColumn":41},{"ruleId":"101","severity":1,"message":"118","line":25,"column":12,"nodeType":"103","messageId":"104","endLine":25,"endColumn":24},{"ruleId":"101","severity":1,"message":"144","line":26,"column":12,"nodeType":"103","messageId":"104","endLine":26,"endColumn":19},{"ruleId":"101","severity":1,"message":"130","line":27,"column":12,"nodeType":"103","messageId":"104","endLine":27,"endColumn":19},{"ruleId":"101","severity":1,"message":"145","line":38,"column":11,"nodeType":"103","messageId":"104","endLine":38,"endColumn":25},{"ruleId":"101","severity":1,"message":"146","line":74,"column":9,"nodeType":"103","messageId":"104","endLine":74,"endColumn":25},"no-native-reassign",["147"],"no-negated-in-lhs",["148"],"no-unused-vars","'Contract' is defined but never used.","Identifier","unusedVar","'utils' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'tokenIn.address' and 'tokenOut.address'. Either include them or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setTokenInBalance' needs the current value of 'tokenIn.address'.","ArrayExpression",["149"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'BigNumber' is defined but never used.","'Fragment' is defined but never used.","'Box' is defined but never used.","'ButtonGroup' is defined but never used.","'CardActions' is defined but never used.","'errorMessage' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'displayOwnedNfts'. Either include it or remove the dependency array.",["150"],"'buttons' is assigned a value but never used.","'nalaTokenABI' is defined but never used.","'parseEther' is defined but never used.","'setErrorMessage' is assigned a value but never used.","'nalaTokenAddress' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'getNFTBalance', 'getNFTSStaked', and 'getRewardsBalance'. Either include them or remove the dependency array.",["151"],"'tokensOfOwner' is assigned a value but never used.","'eyesNft' is assigned a value but never used.","'balance' is assigned a value but never used.","'balanceWithRewards' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'getAPR', 'getActiveStakers', 'getRewardsPerDay', 'getTVL', 'getTokenPriceInBUSD', 'getUserBalanceWithRewards', and 'getUserStakedAmount'. Either include them or remove the dependency array.",["152"],"'NalaRouterABI' is defined but never used.","'tokens' is defined but never used.","'liquidity' is assigned a value but never used.","'setLiquidity' is assigned a value but never used.","'erc20ABI' is assigned a value but never used.","'IconButton' is defined but never used.","'Tooltip' is defined but never used.","'anchorElNav' is assigned a value but never used.","'anchorElUser' is assigned a value but never used.","'setAnchorElUser' is assigned a value but never used.","'account' is assigned a value but never used.","'connectHandler' is assigned a value but never used.","'handlePageChange' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"153","fix":"154"},{"desc":"155","fix":"156"},{"desc":"157","fix":"158"},{"desc":"159","fix":"160"},"Update the dependencies array to be: [tokenIn.address, tokenOut.address]",{"range":"161","text":"162"},"Update the dependencies array to be: [displayOwnedNfts]",{"range":"163","text":"164"},"Update the dependencies array to be: [getNFTBalance, getNFTSStaked, getRewardsBalance]",{"range":"165","text":"166"},"Update the dependencies array to be: [getAPR, getActiveStakers, getRewardsPerDay, getTVL, getTokenPriceInBUSD, getUserBalanceWithRewards, getUserStakedAmount]",{"range":"167","text":"168"},[1537,1539],"[tokenIn.address, tokenOut.address]",[1032,1034],"[displayOwnedNfts]",[1200,1202],"[getNFTBalance, getNFTSStaked, getRewardsBalance]",[1910,1912],"[getAPR, getActiveStakers, getRewardsPerDay, getTVL, getTokenPriceInBUSD, getUserBalanceWithRewards, getUserStakedAmount]"]