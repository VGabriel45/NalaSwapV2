{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ModulesLogger = void 0;\n\nconst ansi_escapes_1 = __importDefault(require(\"ansi-escapes\"));\n\nconst chalk_1 = __importDefault(require(\"chalk\"));\n\nconst ethereumjs_util_1 = require(\"ethereumjs-util\");\n\nconst util_1 = __importDefault(require(\"util\"));\n\nconst errors_1 = require(\"../../../core/errors\");\n\nconst errors_2 = require(\"../../../core/providers/errors\");\n\nconst wei_values_1 = require(\"../../../util/wei-values\");\n\nconst message_trace_1 = require(\"../../stack-traces/message-trace\");\n\nconst model_1 = require(\"../../stack-traces/model\");\n\nconst solidity_errors_1 = require(\"../../stack-traces/solidity-errors\");\n\nconst solidity_stack_trace_1 = require(\"../../stack-traces/solidity-stack-trace\");\n\nfunction printLine(line) {\n  console.log(line);\n}\n\nfunction replaceLastLine(newLine) {\n  if (process.stdout.isTTY === true) {\n    process.stdout.write( // eslint-disable-next-line prefer-template\n    ansi_escapes_1.default.cursorHide + ansi_escapes_1.default.cursorPrevLine + newLine + ansi_escapes_1.default.eraseEndLine + \"\\n\" + ansi_escapes_1.default.cursorShow);\n  } else {\n    process.stdout.write(`${newLine}\\n`);\n  }\n}\n/**\n * Handles all the logging made from the Hardhat Network.\n *\n * Methods of this class follow this convention:\n * - Methods that start with `log` add those messages to a list of things to log\n * - Methods that start with `print` print to stdout immediately\n */\n\n\nclass ModulesLogger {\n  constructor(_enabled) {\n    let _printLine = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : printLine;\n\n    let _replaceLastLine = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : replaceLastLine;\n\n    this._enabled = _enabled;\n    this._printLine = _printLine;\n    this._replaceLastLine = _replaceLastLine;\n    this._logs = [];\n    this._titleLength = 0;\n    this._currentIndent = 0;\n    this._emptyIntervalMinedBlocksRangeStart = undefined;\n    this._emptyHardhatMinedBlocksRangeStart = undefined;\n    this._methodCollapsedCount = 0;\n  }\n\n  isEnabled() {\n    return this._enabled;\n  }\n\n  setEnabled(enabled) {\n    this._enabled = enabled;\n  }\n\n  isLoggedError(err) {\n    return err instanceof solidity_errors_1.SolidityError || err instanceof errors_2.TransactionExecutionError;\n  }\n\n  logBlockFromAutomine(result, codes, txHashToHighlight) {\n    const {\n      block,\n      blockResult,\n      traces\n    } = result;\n    const {\n      results\n    } = blockResult;\n    (0, errors_1.assertHardhatInvariant)(results.length === codes.length, \"The array of codes should have the same length as the array of results\");\n\n    this._indent(() => {\n      this._logBlockNumber(block);\n\n      this._indent(() => {\n        this._logBaseFeePerGas(block);\n\n        for (let i = 0; i < block.transactions.length; i++) {\n          const tx = block.transactions[i];\n          const txGasUsed = results[i].gasUsed.toNumber();\n          const txTrace = traces[i];\n          const code = codes[i];\n          const highlightTxHash = tx.hash().equals(txHashToHighlight);\n\n          this._logTxInsideBlock(tx, txTrace, code, txGasUsed, {\n            highlightTxHash\n          });\n\n          this._logEmptyLineBetweenTransactions(i, block.transactions.length);\n        }\n      });\n    });\n  }\n\n  logMinedBlock(result, codes) {\n    const {\n      block,\n      blockResult,\n      traces\n    } = result;\n    const {\n      results\n    } = blockResult;\n    (0, errors_1.assertHardhatInvariant)(results.length === codes.length, \"The array of codes should have the same length as the array of results\");\n    const blockNumber = result.block.header.number.toNumber();\n    const isEmpty = result.block.transactions.length === 0;\n\n    this._indent(() => {\n      this.logMinedBlockNumber(blockNumber, isEmpty, block.header.baseFeePerGas);\n\n      if (isEmpty) {\n        return;\n      }\n\n      this._indent(() => {\n        this._logBlockHash(block);\n\n        this._indent(() => {\n          this._logBaseFeePerGas(block);\n\n          for (let i = 0; i < block.transactions.length; i++) {\n            const tx = block.transactions[i];\n            const txGasUsed = results[i].gasUsed.toNumber();\n            const txTrace = traces[i];\n            const code = codes[i];\n\n            this._logTxInsideBlock(tx, txTrace, code, txGasUsed, {\n              highlightTxHash: false\n            });\n\n            this._logEmptyLineBetweenTransactions(i, block.transactions.length);\n          }\n        });\n      });\n    });\n  }\n\n  logIntervalMinedBlock(result, codes) {\n    const {\n      block,\n      blockResult,\n      traces\n    } = result;\n    const {\n      results\n    } = blockResult;\n    (0, errors_1.assertHardhatInvariant)(results.length === codes.length, \"The array of codes should have the same length as the array of results\");\n\n    this._indent(() => {\n      this._logBlockHash(block);\n\n      this._indent(() => {\n        this._logBaseFeePerGas(block);\n\n        for (let i = 0; i < block.transactions.length; i++) {\n          const tx = block.transactions[i];\n          const txGasUsed = results[i].gasUsed.toNumber();\n          const txTrace = traces[i];\n          const code = codes[i];\n\n          this._logTxInsideBlock(tx, txTrace, code, txGasUsed, {\n            highlightTxHash: false\n          });\n\n          this._logEmptyLineBetweenTransactions(i, block.transactions.length);\n        }\n      });\n    });\n  }\n\n  logSingleTransaction(tx, block, txGasUsed, txTrace, code) {\n    this._indent(() => {\n      var _a;\n\n      this._logContractAndFunctionName(txTrace.trace, code);\n\n      const txHash = (0, ethereumjs_util_1.bufferToHex)(tx.hash());\n\n      this._logWithTitle(\"Transaction\", txHash);\n\n      this._logTxFrom(tx.getSenderAddress().toBuffer());\n\n      this._logTxTo((_a = tx.to) === null || _a === void 0 ? void 0 : _a.toBuffer(), txTrace.trace);\n\n      this._logTxValue(new ethereumjs_util_1.BN(tx.value));\n\n      this._logWithTitle(\"Gas used\", `${txGasUsed} of ${tx.gasLimit.toNumber()}`);\n\n      this._logWithTitle(`Block #${block.header.number.toNumber()}`, (0, ethereumjs_util_1.bufferToHex)(block.hash()));\n\n      this._logConsoleLogMessages(txTrace.consoleLogMessages);\n\n      if (txTrace.error !== undefined) {\n        this._logError(txTrace.error);\n      }\n    });\n  }\n\n  logCurrentlySentTransaction(tx, txGasUsed, txTrace, code, block) {\n    this._indent(() => {\n      var _a;\n\n      this._log(\"Currently sent transaction:\");\n\n      this.logEmptyLine();\n\n      this._logContractAndFunctionName(txTrace.trace, code);\n\n      const txHash = (0, ethereumjs_util_1.bufferToHex)(tx.hash());\n\n      this._logWithTitle(\"Transaction\", txHash);\n\n      this._logTxFrom(tx.getSenderAddress().toBuffer());\n\n      this._logTxTo((_a = tx.to) === null || _a === void 0 ? void 0 : _a.toBuffer(), txTrace.trace);\n\n      this._logTxValue(new ethereumjs_util_1.BN(tx.value));\n\n      this._logWithTitle(\"Gas used\", `${txGasUsed} of ${tx.gasLimit.toNumber()}`);\n\n      this._logWithTitle(`Block #${block.header.number.toNumber()}`, (0, ethereumjs_util_1.bufferToHex)(block.hash()));\n\n      this._logConsoleLogMessages(txTrace.consoleLogMessages);\n\n      if (txTrace.error !== undefined) {\n        this._logError(txTrace.error);\n      }\n    });\n  }\n\n  logEstimateGasTrace(callParams, code, trace, consoleLogMessages, error) {\n    this._indent(() => {\n      this._logContractAndFunctionName(trace, code, {\n        printNonContractCalled: true\n      });\n\n      this._logTxFrom(callParams.from);\n\n      this._logTxTo(callParams.to, trace);\n\n      this._logTxValue(new ethereumjs_util_1.BN(callParams.value));\n\n      this._logConsoleLogMessages(consoleLogMessages);\n\n      this._logError(error);\n    });\n  }\n\n  logCallTrace(callParams, code, trace, consoleLogMessages, error) {\n    this._indent(() => {\n      this._logContractAndFunctionName(trace, code, {\n        printNonContractCalled: true\n      });\n\n      this._logTxFrom(callParams.from);\n\n      this._logTxTo(callParams.to, trace);\n\n      if (callParams.value.gtn(0)) {\n        this._logTxValue(callParams.value);\n      }\n\n      this._logConsoleLogMessages(consoleLogMessages);\n\n      if (error !== undefined) {\n        // TODO: If throwOnCallFailures is false, this will log the error, but the RPC method won't be red\n        this._logError(error);\n      }\n    });\n  }\n\n  logMinedBlockNumber(blockNumber, isEmpty, baseFeePerGas) {\n    if (isEmpty) {\n      this._log(`Mined empty block #${blockNumber}${baseFeePerGas !== undefined ? ` with base fee ${baseFeePerGas.toString()}` : \"\"}`);\n\n      return;\n    }\n\n    this._log(`Mined block #${blockNumber}`);\n  }\n\n  logMultipleTransactionsWarning() {\n    this._indent(() => {\n      this._log(\"There were other pending transactions mined in the same block:\");\n    });\n\n    this.logEmptyLine();\n  }\n\n  logMultipleBlocksWarning() {\n    this._indent(() => {\n      this._log(\"There were other pending transactions. More than one block had to be mined:\");\n    });\n\n    this.logEmptyLine();\n  }\n\n  logEmptyLine() {\n    this._log(\"\");\n  }\n\n  _logBaseFeePerGas(block) {\n    if (block.header.baseFeePerGas !== undefined) {\n      this._log(`Base fee: ${block.header.baseFeePerGas.toString()}`);\n    }\n  }\n\n  printErrorMessage(errorMessage) {\n    this._indent(() => {\n      this._print(errorMessage);\n    });\n  }\n\n  printFailedMethod(method) {\n    this._print(method, {\n      color: chalk_1.default.red\n    });\n  }\n  /**\n   * Print all accumulated logs\n   */\n\n\n  printLogs() {\n    const logs = this._getLogs();\n\n    if (logs.length === 0) {\n      return false;\n    }\n\n    for (const msg of logs) {\n      this._print(msg);\n    }\n\n    this._clearLogs();\n\n    return true;\n  }\n\n  printIntervalMinedBlockNumber(blockNumber, isEmpty, baseFeePerGas) {\n    if (this._emptyIntervalMinedBlocksRangeStart !== undefined) {\n      this._print(`Mined empty block range #${this._emptyIntervalMinedBlocksRangeStart} to #${blockNumber}`, {\n        collapseIntervalMinedBlock: true,\n        replaceLastLine: true\n      });\n    } else {\n      this._emptyIntervalMinedBlocksRangeStart = blockNumber;\n\n      if (isEmpty) {\n        this._print(`Mined empty block #${blockNumber}${baseFeePerGas !== undefined ? ` with base fee ${baseFeePerGas.toString()}` : \"\"}`, {\n          collapseIntervalMinedBlock: true\n        });\n\n        return;\n      }\n\n      this._print(`Mined block #${blockNumber}`, {\n        collapseIntervalMinedBlock: true\n      });\n    }\n  }\n\n  logEmptyHardhatMinedBlock(blockNumber, baseFeePerGas) {\n    this._indent(() => {\n      if (this._emptyHardhatMinedBlocksRangeStart !== undefined) {\n        this._log(`Mined empty block range #${this._emptyHardhatMinedBlocksRangeStart} to #${blockNumber}`, {\n          collapseHardhatMinedBlock: true,\n          replaceLastLine: true\n        });\n      } else {\n        this._emptyHardhatMinedBlocksRangeStart = blockNumber;\n\n        this._log(`Mined empty block #${blockNumber}${baseFeePerGas !== undefined ? ` with base fee ${baseFeePerGas.toString()}` : \"\"}`, {\n          collapseHardhatMinedBlock: true\n        });\n\n        return;\n      }\n    });\n  }\n\n  printMetaMaskWarning() {\n    const message = \"If you are using MetaMask, you can learn how to fix this error here: https://hardhat.org/metamask-issue\";\n\n    this._indent(() => {\n      this._print(message, {\n        color: chalk_1.default.yellow\n      });\n    });\n  }\n\n  printMethod(method) {\n    if (this._shouldCollapseMethod(method)) {\n      this._methodCollapsedCount += 1;\n\n      this._print(chalk_1.default.green(`${method} (${this._methodCollapsedCount})`), {\n        collapsePrintedMethod: true,\n        replaceLastLine: true\n      });\n    } else {\n      this._startCollapsingMethod(method);\n\n      this._print(method, {\n        color: chalk_1.default.green,\n        collapsePrintedMethod: true\n      });\n    }\n  }\n\n  printMethodNotSupported(method) {\n    this._print(`${method} - Method not supported`, {\n      color: chalk_1.default.red\n    });\n  }\n\n  printEmptyLine() {\n    this._print(\"\");\n  }\n\n  printUnknownError(err) {\n    this._indent(() => {\n      this._printError(err);\n\n      this.printEmptyLine();\n\n      this._print(\"If you think this is a bug in Hardhat, please report it here: https://hardhat.org/reportbug\");\n    });\n  }\n\n  _format(msg) {\n    let {\n      color\n    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    if (msg === \"\") {\n      // don't indent empty lines\n      return msg;\n    }\n\n    if (this._currentIndent > 0) {\n      msg = msg.split(\"\\n\").map(line => \" \".repeat(this._currentIndent) + line).join(\"\\n\");\n    }\n\n    if (color !== undefined) {\n      return color(msg);\n    }\n\n    return msg;\n  }\n\n  _indent(cb) {\n    let enabled = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n\n    if (enabled) {\n      this._currentIndent += 2;\n    }\n\n    try {\n      return cb();\n    } finally {\n      if (enabled) {\n        this._currentIndent -= 2;\n      }\n    }\n  }\n\n  _indentSingleLine(message) {\n    return \" \".repeat(this._currentIndent) + message;\n  }\n\n  _log(msg) {\n    let printOptions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    if (printOptions.collapsePrintedMethod !== true) {\n      this._stopCollapsingMethod();\n    }\n\n    if (printOptions.collapseIntervalMinedBlock !== true) {\n      this._emptyIntervalMinedBlocksRangeStart = undefined;\n    }\n\n    if (printOptions.collapseHardhatMinedBlock !== true) {\n      this._emptyHardhatMinedBlocksRangeStart = undefined;\n    }\n\n    const formattedMessage = this._format(msg, printOptions);\n\n    if (printOptions.replaceLastLine === true) {\n      this._logs[this._logs.length - 1] = formattedMessage;\n    } else {\n      this._logs.push(formattedMessage);\n    }\n  }\n\n  _logError(err) {\n    if (this.isLoggedError(err)) {\n      this.logEmptyLine();\n\n      this._log(util_1.default.inspect(err));\n    }\n  }\n\n  _logTxInsideBlock(tx, txTrace, code, txGasUsed, _ref) {\n    let {\n      highlightTxHash\n    } = _ref;\n    // indentAfterTransactionHash: true,\n    // printTxBlockNumber: false,\n    // startWithTxHash: true,\n    let txHash = (0, ethereumjs_util_1.bufferToHex)(tx.hash());\n\n    if (highlightTxHash) {\n      txHash = chalk_1.default.bold(txHash);\n    }\n\n    this._logWithTitle(\"Transaction\", txHash);\n\n    this._indent(() => {\n      var _a;\n\n      this._logContractAndFunctionName(txTrace.trace, code);\n\n      this._logTxFrom(tx.getSenderAddress().toBuffer());\n\n      this._logTxTo((_a = tx.to) === null || _a === void 0 ? void 0 : _a.toBuffer(), txTrace.trace);\n\n      this._logTxValue(new ethereumjs_util_1.BN(tx.value));\n\n      this._logWithTitle(\"Gas used\", `${txGasUsed} of ${tx.gasLimit.toNumber()}`);\n\n      this._logConsoleLogMessages(txTrace.consoleLogMessages);\n\n      if (txTrace.error !== undefined) {\n        this._logError(txTrace.error);\n      }\n    });\n  }\n  /**\n   *  This should be the only function that calls _printLine and\n   *  _replaceLastLine (except for the special console.sol case),\n   *  because it's the only function that checks if the logger\n   *  is enabled.\n   */\n\n\n  _print(msg) {\n    let printOptions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    if (!this._enabled) {\n      return;\n    }\n\n    if (printOptions.collapsePrintedMethod !== true) {\n      this._stopCollapsingMethod();\n    }\n\n    if (printOptions.collapseIntervalMinedBlock !== true) {\n      this._emptyIntervalMinedBlocksRangeStart = undefined;\n    }\n\n    if (printOptions.collapseHardhatMinedBlock !== true) {\n      this._emptyHardhatMinedBlocksRangeStart = undefined;\n    }\n\n    const formattedMessage = this._format(msg, printOptions);\n\n    if (printOptions.replaceLastLine === true) {\n      this._replaceLastLine(formattedMessage);\n    } else {\n      this._printLine(formattedMessage);\n    }\n  }\n\n  _printError(err) {\n    if (this.isLoggedError(err)) {\n      this.printEmptyLine();\n\n      this._print(util_1.default.inspect(err));\n    }\n  }\n\n  _logContractAndFunctionName(trace, code) {\n    let {\n      printNonContractCalled = false\n    } = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n    if (trace === undefined) {\n      return;\n    }\n\n    if ((0, message_trace_1.isPrecompileTrace)(trace)) {\n      this._logWithTitle(\"Precompile call\", `<PrecompileContract ${trace.precompile}>`);\n\n      return;\n    }\n\n    if ((0, message_trace_1.isCreateTrace)(trace)) {\n      if (trace.bytecode === undefined) {\n        this._logWithTitle(\"Contract deployment\", solidity_stack_trace_1.UNRECOGNIZED_CONTRACT_NAME);\n      } else {\n        this._logWithTitle(\"Contract deployment\", trace.bytecode.contract.name);\n      }\n\n      if (trace.deployedContract !== undefined && trace.error === undefined) {\n        this._logWithTitle(\"Contract address\", (0, ethereumjs_util_1.bufferToHex)(trace.deployedContract));\n      }\n\n      return;\n    }\n\n    if (code.length === 0) {\n      if (printNonContractCalled) {\n        this._log(`WARNING: Calling an account which is not a contract`);\n      }\n\n      return;\n    }\n\n    if (trace.bytecode === undefined) {\n      this._logWithTitle(\"Contract call\", solidity_stack_trace_1.UNRECOGNIZED_CONTRACT_NAME);\n\n      return;\n    }\n\n    const func = trace.bytecode.contract.getFunctionFromSelector(trace.calldata.slice(0, 4));\n    const functionName = func === undefined ? solidity_stack_trace_1.UNRECOGNIZED_FUNCTION_NAME : func.type === model_1.ContractFunctionType.FALLBACK ? solidity_stack_trace_1.FALLBACK_FUNCTION_NAME : func.type === model_1.ContractFunctionType.RECEIVE ? solidity_stack_trace_1.RECEIVE_FUNCTION_NAME : func.name;\n\n    this._logWithTitle(\"Contract call\", `${trace.bytecode.contract.name}#${functionName}`);\n  }\n\n  _shouldCollapseMethod(method) {\n    return method === this._methodBeingCollapsed && !this._hasLogs() && this._methodCollapsedCount > 0;\n  }\n\n  _startCollapsingMethod(method) {\n    this._methodBeingCollapsed = method;\n    this._methodCollapsedCount = 1;\n  }\n\n  _stopCollapsingMethod() {\n    this._methodBeingCollapsed = undefined;\n    this._methodCollapsedCount = 0;\n  }\n\n  _logTxTo(to, trace) {\n    if (trace !== undefined && (0, message_trace_1.isCreateTrace)(trace)) {\n      return;\n    }\n\n    if (to === undefined) {\n      // only for the type-checker, since `to` is undefined only when\n      // the message is a create trace\n      return;\n    }\n\n    const toString = (0, ethereumjs_util_1.bufferToHex)(to);\n\n    this._logWithTitle(\"To\", toString);\n  }\n\n  _logTxValue(value) {\n    this._logWithTitle(\"Value\", (0, wei_values_1.weiToHumanReadableString)(value));\n  }\n\n  _logTxFrom(from) {\n    this._logWithTitle(\"From\", (0, ethereumjs_util_1.bufferToHex)(from));\n  }\n\n  _logBlockNumber(block) {\n    this._log(`Block #${block.header.number.toNumber()}: ${(0, ethereumjs_util_1.bufferToHex)(block.hash())}`);\n  }\n\n  _logEmptyLineBetweenTransactions(currentIndex, totalTransactions) {\n    if (currentIndex + 1 < totalTransactions && totalTransactions > 1) {\n      this.logEmptyLine();\n    }\n  }\n\n  _logBlockHash(block) {\n    this._log(`Block: ${(0, ethereumjs_util_1.bufferToHex)(block.hash())}`);\n  }\n\n  _logConsoleLogMessages(messages) {\n    // This is a especial case, as we always want to print the console.log\n    // messages. The difference is how.\n    // If we have a logger, we should use that, so that logs are printed in\n    // order. If we don't, we just print the messages here.\n    if (!this._enabled) {\n      for (const msg of messages) {\n        this._printLine(msg);\n      }\n\n      return;\n    }\n\n    if (messages.length === 0) {\n      return;\n    }\n\n    this.logEmptyLine();\n\n    this._log(\"console.log:\");\n\n    for (const msg of messages) {\n      this._log(`  ${msg}`);\n    }\n  }\n\n  _logWithTitle(title, message) {\n    title = this._indentSingleLine(title); // We always use the max title length we've seen. Otherwise the value move\n    // a lot with each tx/call.\n\n    if (title.length > this._titleLength) {\n      this._titleLength = title.length;\n    }\n\n    this._logs.push([title, message]);\n  }\n\n  _clearLogs() {\n    this._logs = [];\n  }\n\n  _hasLogs() {\n    return this._logs.length > 0;\n  }\n\n  _getLogs() {\n    return this._logs.map(l => {\n      if (typeof l === \"string\") {\n        return l;\n      }\n\n      const title = `${l[0]}:`;\n      return `${title.padEnd(this._titleLength + 1)} ${l[1]}`;\n    });\n  }\n\n}\n\nexports.ModulesLogger = ModulesLogger;","map":{"version":3,"mappings":"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","names":["printLine","line","console","log","replaceLastLine","newLine","process","stdout","isTTY","write","ansi_escapes_1","cursorHide","cursorPrevLine","eraseEndLine","cursorShow","ModulesLogger","constructor","_enabled","_printLine","_replaceLastLine","undefined","isEnabled","setEnabled","enabled","isLoggedError","err","solidity_errors_1","errors_2","logBlockFromAutomine","result","codes","txHashToHighlight","block","blockResult","traces","results","length","_indent","_logBlockNumber","_logBaseFeePerGas","i","transactions","tx","txGasUsed","gasUsed","toNumber","txTrace","code","highlightTxHash","hash","equals","_logTxInsideBlock","_logEmptyLineBetweenTransactions","logMinedBlock","blockNumber","header","number","isEmpty","logMinedBlockNumber","baseFeePerGas","_logBlockHash","logIntervalMinedBlock","logSingleTransaction","_logContractAndFunctionName","trace","txHash","_logWithTitle","_logTxFrom","getSenderAddress","toBuffer","_logTxTo","to","_a","_logTxValue","ethereumjs_util_1","value","gasLimit","_logConsoleLogMessages","consoleLogMessages","error","_logError","logCurrentlySentTransaction","_log","logEmptyLine","logEstimateGasTrace","callParams","printNonContractCalled","from","logCallTrace","gtn","toString","logMultipleTransactionsWarning","logMultipleBlocksWarning","printErrorMessage","errorMessage","_print","printFailedMethod","method","color","chalk_1","red","printLogs","logs","_getLogs","msg","_clearLogs","printIntervalMinedBlockNumber","_emptyIntervalMinedBlocksRangeStart","collapseIntervalMinedBlock","logEmptyHardhatMinedBlock","_emptyHardhatMinedBlocksRangeStart","collapseHardhatMinedBlock","printMetaMaskWarning","message","yellow","printMethod","_shouldCollapseMethod","_methodCollapsedCount","green","collapsePrintedMethod","_startCollapsingMethod","printMethodNotSupported","printEmptyLine","printUnknownError","_printError","_format","_currentIndent","split","map","repeat","join","cb","_indentSingleLine","printOptions","_stopCollapsingMethod","formattedMessage","_logs","push","util_1","inspect","bold","precompile","bytecode","solidity_stack_trace_1","contract","name","deployedContract","func","getFunctionFromSelector","calldata","slice","functionName","type","model_1","FALLBACK","RECEIVE","_methodBeingCollapsed","_hasLogs","currentIndex","totalTransactions","messages","title","_titleLength","l","padEnd","exports"],"sourceRoot":"","sources":["../../../../src/internal/hardhat-network/provider/modules/logger.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}