{"ast":null,"code":"import _defineProperty from '@babel/runtime/helpers/defineProperty';\nimport merge from 'lodash.merge';\nimport logLevel, { levels } from 'loglevel';\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n\n  return target;\n}\n\nconst log = logLevel.getLogger(\"http-helpers\");\nlog.setLevel(levels.INFO);\nlet apiKey = \"torus-default\";\nlet embedHost = \"\"; // #region API Keys\n\nconst gatewayAuthHeader = \"x-api-key\";\nconst gatewayEmbedHostHeader = \"x-embed-host\";\n\nfunction setEmbedHost(embedHost_) {\n  embedHost = embedHost_;\n}\n\nfunction clearEmbedHost() {\n  embedHost = \"\";\n}\n\nfunction getEmbedHost() {\n  return embedHost;\n}\n\nfunction setAPIKey(apiKey_) {\n  apiKey = apiKey_;\n}\n\nfunction clearAPIKey() {\n  apiKey = \"torus-default\";\n}\n\nfunction getAPIKey() {\n  return apiKey;\n} // #endregion\n\n\nfunction setLogLevel(level) {\n  log.setLevel(level);\n}\n\nfunction getApiKeyHeaders() {\n  const headers = {};\n  if (apiKey) headers[gatewayAuthHeader] = apiKey;\n  if (embedHost) headers[gatewayEmbedHostHeader] = embedHost;\n  return headers;\n}\n\nfunction debugLogResponse(response) {\n  log.info(\"Response: \".concat(response.status, \" \").concat(response.statusText));\n  log.info(\"Url: \".concat(response.url));\n}\n\nconst promiseTimeout = (ms, promise) => {\n  const timeout = new Promise((resolve, reject) => {\n    const id = setTimeout(() => {\n      clearTimeout(id);\n      reject(new Error(\"Timed out in \".concat(ms, \"ms\")));\n    }, ms);\n  });\n  return Promise.race([promise, timeout]);\n};\n\nconst get = async function (url) {\n  let options_ = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  let customOptions = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  const defaultOptions = {\n    mode: \"cors\",\n    headers: {}\n  };\n\n  if (customOptions.useAPIKey) {\n    defaultOptions.headers = _objectSpread(_objectSpread({}, defaultOptions.headers), getApiKeyHeaders());\n  }\n\n  const options = merge(defaultOptions, options_, {\n    method: \"GET\"\n  });\n  const response = await fetch(url, options);\n\n  if (response.ok) {\n    return response.json();\n  }\n\n  debugLogResponse(response);\n  throw response;\n};\n\nconst post = function (url) {\n  let data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  let options_ = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  let customOptions = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  const defaultOptions = {\n    mode: \"cors\",\n    headers: {\n      \"Content-Type\": \"application/json; charset=utf-8\"\n    }\n  };\n\n  if (customOptions.useAPIKey) {\n    defaultOptions.headers = _objectSpread(_objectSpread({}, defaultOptions.headers), getApiKeyHeaders());\n  }\n\n  const options = merge(defaultOptions, options_, {\n    method: \"POST\"\n  }); // deep merge changes the structure of form data and url encoded data ,\n  // so we should not deepmerge body data\n\n  if (customOptions.isUrlEncodedData) {\n    // for multipart request browser/client will add multipart content type\n    // along with multipart boundary , so for multipart request send\n    // content-type: undefined or send with multipart boundary if already known\n    options.body = data; // If url encoded data, this must not be the content type\n\n    if (options.headers[\"Content-Type\"] === \"application/json; charset=utf-8\") delete options.headers[\"Content-Type\"];\n  } else {\n    options.body = JSON.stringify(data);\n  }\n\n  return promiseTimeout(customOptions.timeout || 60000, fetch(url, options).then(response => {\n    if (response.ok) {\n      return response.json();\n    }\n\n    debugLogResponse(response);\n    throw response;\n  }));\n};\n\nconst patch = async function (url) {\n  let data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  let options_ = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  let customOptions = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  const defaultOptions = {\n    mode: \"cors\",\n    headers: {\n      \"Content-Type\": \"application/json; charset=utf-8\"\n    }\n  }; // for multipart request browser/client will add multipart content type\n  // along with multipart boundary , so for multipart request send\n  // content-type: undefined or send with multipart boundary if already known\n\n  if (customOptions.useAPIKey) {\n    defaultOptions.headers = _objectSpread(_objectSpread({}, defaultOptions.headers), getApiKeyHeaders());\n  }\n\n  const options = merge(defaultOptions, options_, {\n    method: \"PATCH\"\n  }); // deep merge changes the structure of form data and url encoded data ,\n  // so we should not deepmerge body data\n\n  if (customOptions.isUrlEncodedData) {\n    // for multipart request browser/client will add multipart content type\n    // along with multipart boundary , so for multipart request send\n    // content-type: undefined or send with multipart boundary if already known\n    options.body = data; // If url encoded data, this must not be the content type\n\n    if (options.headers[\"Content-Type\"] === \"application/json; charset=utf-8\") delete options.headers[\"Content-Type\"];\n  } else {\n    options.body = JSON.stringify(data);\n  }\n\n  const response = await fetch(url, options);\n\n  if (response.ok) {\n    return response.json();\n  }\n\n  debugLogResponse(response);\n  throw response;\n};\n\nconst remove = async function (url) {\n  let data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  let options_ = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  let customOptions = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  const defaultOptions = {\n    mode: \"cors\",\n    headers: {\n      \"Content-Type\": \"application/json; charset=utf-8\"\n    }\n  }; // for multipart request browser/client will add multipart content type\n  // along with multipart boundary , so for multipart request send\n  // content-type: undefined or send with multipart boundary if already known\n\n  if (customOptions.useAPIKey) {\n    defaultOptions.headers = _objectSpread(_objectSpread({}, defaultOptions.headers), getApiKeyHeaders());\n  }\n\n  const options = merge(defaultOptions, options_, {\n    method: \"DELETE\"\n  });\n\n  if (customOptions.isUrlEncodedData) {\n    // for multipart request browser/client will add multipart content type\n    // along with multipart boundary , so for multipart request send\n    // content-type: undefined or send with multipart boundary if already known\n    options.body = data; // If url encoded data, this must not be the content type\n\n    if (options.headers[\"Content-Type\"] === \"application/json; charset=utf-8\") delete options.headers[\"Content-Type\"];\n  } else {\n    options.body = JSON.stringify(data);\n  }\n\n  const response = await fetch(url, options);\n\n  if (response.ok) {\n    return response.json();\n  }\n\n  debugLogResponse(response);\n  throw response;\n};\n\nconst generateJsonRPCObject = (method, parameters) => ({\n  jsonrpc: \"2.0\",\n  method,\n  id: 10,\n  params: parameters\n});\n\nconst promiseRace = function (url, options) {\n  let timeout = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 60000;\n  return Promise.race([get(url, options), new Promise((resolve, reject) => {\n    setTimeout(() => {\n      reject(new Error(\"timed out\"));\n    }, timeout);\n  })]);\n};\n\nexport { clearAPIKey, clearEmbedHost, gatewayAuthHeader, gatewayEmbedHostHeader, generateJsonRPCObject, get, getAPIKey, getEmbedHost, patch, post, promiseRace, promiseTimeout, remove, setAPIKey, setEmbedHost, setLogLevel };","map":{"version":3,"mappings":"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","names":["log","logLevel","getLogger","setLevel","levels","INFO","apiKey","embedHost","gatewayAuthHeader","gatewayEmbedHostHeader","setEmbedHost","embedHost_","clearEmbedHost","getEmbedHost","setAPIKey","apiKey_","clearAPIKey","getAPIKey","setLogLevel","level","getApiKeyHeaders","headers","debugLogResponse","response","info","status","concat","statusText","url","promiseTimeout","ms","promise","timeout","Promise","resolve","reject","id","setTimeout","clearTimeout","Error","race","get","options_","customOptions","defaultOptions","mode","useAPIKey","options","merge","method","fetch","ok","json","post","data","isUrlEncodedData","body","JSON","stringify","then","patch","remove","generateJsonRPCObject","parameters","jsonrpc","params","promiseRace"],"sources":["../src/index.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}