{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  Object.defineProperty(o, k2, {\n    enumerable: true,\n    get: function () {\n      return m[k];\n    }\n  });\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.CompilerDownloader = exports.CompilerPlatform = void 0;\n\nconst chalk_1 = __importDefault(require(\"chalk\"));\n\nconst debug_1 = __importDefault(require(\"debug\"));\n\nconst fs_extra_1 = __importDefault(require(\"fs-extra\"));\n\nconst os_1 = __importDefault(require(\"os\"));\n\nconst path_1 = __importDefault(require(\"path\"));\n\nconst errors_1 = require(\"../../core/errors\");\n\nconst errors_list_1 = require(\"../../core/errors-list\");\n\nvar CompilerPlatform;\n\n(function (CompilerPlatform) {\n  CompilerPlatform[\"LINUX\"] = \"linux-amd64\";\n  CompilerPlatform[\"WINDOWS\"] = \"windows-amd64\";\n  CompilerPlatform[\"MACOS\"] = \"macosx-amd64\";\n  CompilerPlatform[\"WASM\"] = \"wasm\";\n})(CompilerPlatform = exports.CompilerPlatform || (exports.CompilerPlatform = {}));\n\nconst log = (0, debug_1.default)(\"hardhat:core:solidity:downloader\");\nconst COMPILER_FILES_DIR_URL_SOLC = \"https://binaries.soliditylang.org/\";\n\nasync function downloadFile(url, destinationFile) {\n  const {\n    download\n  } = await Promise.resolve().then(() => __importStar(require(\"../../util/download\")));\n  log(`Downloading from ${url} to ${destinationFile}`);\n  await download(url, destinationFile);\n}\n\nclass CompilerDownloader {\n  constructor(_compilersDir) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    var _a, _b;\n\n    this._compilersDir = _compilersDir;\n    this._download = (_a = options.download) !== null && _a !== void 0 ? _a : downloadFile;\n    this._forceSolcJs = (_b = options.forceSolcJs) !== null && _b !== void 0 ? _b : false;\n  }\n\n  async isCompilerDownloaded(version) {\n    const compilerBuild = await this.getCompilerBuild(version);\n\n    const downloadedFilePath = this._getDownloadedFilePath(compilerBuild);\n\n    return this._fileExists(downloadedFilePath);\n  }\n\n  async verifyCompiler(compilerBuild, downloadedFilePath) {\n    const ethereumjsUtil = await Promise.resolve().then(() => __importStar(require(\"ethereumjs-util\")));\n    const expectedKeccak256 = compilerBuild.keccak256;\n    const compiler = await fs_extra_1.default.readFile(downloadedFilePath);\n    const compilerKeccak256 = ethereumjsUtil.bufferToHex(ethereumjsUtil.keccak(compiler));\n\n    if (expectedKeccak256 !== compilerKeccak256) {\n      await fs_extra_1.default.unlink(downloadedFilePath);\n      await fs_extra_1.default.unlink(this.getCompilersListPath(compilerBuild.platform));\n      throw new errors_1.HardhatError(errors_list_1.ERRORS.SOLC.INVALID_DOWNLOAD, {\n        remoteVersion: compilerBuild.version\n      });\n    }\n  }\n\n  async getDownloadedCompilerPath(version) {\n    const {\n      default: AdmZip\n    } = await Promise.resolve().then(() => __importStar(require(\"adm-zip\")));\n\n    try {\n      const compilerBuild = await this.getCompilerBuild(version);\n\n      let downloadedFilePath = this._getDownloadedFilePath(compilerBuild);\n\n      if (!(await this._fileExists(downloadedFilePath))) {\n        await this.downloadCompiler(compilerBuild, downloadedFilePath);\n      }\n\n      await this.verifyCompiler(compilerBuild, downloadedFilePath);\n\n      if (compilerBuild.platform === CompilerPlatform.LINUX || compilerBuild.platform === CompilerPlatform.MACOS) {\n        fs_extra_1.default.chmodSync(downloadedFilePath, 0o755);\n      } else if (compilerBuild.platform === CompilerPlatform.WINDOWS) {\n        // some window builds are zipped, some are not\n        if (downloadedFilePath.endsWith(\".zip\")) {\n          const zip = new AdmZip(downloadedFilePath);\n          zip.extractAllTo(path_1.default.join(this._compilersDir, compilerBuild.version));\n          downloadedFilePath = path_1.default.join(this._compilersDir, compilerBuild.version, \"solc.exe\");\n        }\n      }\n\n      return {\n        compilerPath: downloadedFilePath,\n        platform: compilerBuild.platform\n      };\n    } catch (e) {\n      if (e instanceof Error) {\n        if (errors_1.HardhatError.isHardhatError(e)) {\n          throw e;\n        }\n\n        console.warn(chalk_1.default.yellow(`There was an unexpected problem downloading the compiler: ${e.message}`));\n      }\n    }\n  }\n\n  async getCompilersList(platform) {\n    let pendingRetries = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 3;\n\n    if (!(await this.compilersListExists(platform))) {\n      await this.downloadCompilersList(platform);\n    }\n\n    try {\n      return await fs_extra_1.default.readJSON(this.getCompilersListPath(platform));\n    } catch (error) {\n      // if parsing throws a syntax error, redownload and parse once more\n      if (!(error instanceof SyntaxError) || pendingRetries === 0) {\n        // eslint-disable-next-line @nomiclabs/hardhat-internal-rules/only-hardhat-error\n        throw error;\n      } // remove the malformed list and retry\n\n\n      await fs_extra_1.default.remove(this.getCompilersListPath(platform));\n      return this.getCompilersList(platform, pendingRetries - 1);\n    }\n  }\n\n  async getCompilerBuild(version) {\n    const platform = this._getCurrentPlatform();\n\n    if (await this._versionExists(version, platform)) {\n      try {\n        return await this._getCompilerBuildByPlatform(version, platform);\n      } catch (_a) {\n        log(\"Couldn't download native compiler, using solcjs instead\");\n      }\n    }\n\n    return this._getCompilerBuildByPlatform(version, CompilerPlatform.WASM);\n  }\n\n  async downloadCompilersList() {\n    let platform = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this._getCurrentPlatform();\n\n    try {\n      await this._download(getCompilerListURL(platform), this.getCompilersListPath(platform));\n    } catch (error) {\n      throw new errors_1.HardhatError(errors_list_1.ERRORS.SOLC.VERSION_LIST_DOWNLOAD_FAILED, {}, error);\n    }\n  }\n\n  async downloadCompiler(compilerBuild, downloadedFilePath) {\n    log(`Downloading compiler version ${compilerBuild.version} platform ${compilerBuild.platform}`);\n    const compilerUrl = getCompilerURL(compilerBuild.platform, compilerBuild.path);\n\n    try {\n      await this._download(compilerUrl, downloadedFilePath);\n    } catch (error) {\n      throw new errors_1.HardhatError(errors_list_1.ERRORS.SOLC.DOWNLOAD_FAILED, {\n        remoteVersion: compilerBuild.version\n      }, error);\n    }\n  }\n\n  async compilersListExists(platform) {\n    return fs_extra_1.default.pathExists(this.getCompilersListPath(platform));\n  }\n\n  getCompilersListPath(platform) {\n    return path_1.default.join(this._compilersDir, platform, \"list.json\");\n  }\n\n  _getDownloadedFilePath(compilerBuild) {\n    return path_1.default.join(this._compilersDir, compilerBuild.platform, compilerBuild.path);\n  }\n\n  async _fetchVersionPath(version, platform) {\n    const compilersListExisted = await this.compilersListExists(platform);\n    let list = await this.getCompilersList(platform);\n    let compilerBuildPath = list.releases[version]; // We may need to re-download the compilers list.\n\n    if (compilerBuildPath === undefined && compilersListExisted) {\n      await fs_extra_1.default.unlink(this.getCompilersListPath(platform));\n      list = await this.getCompilersList(platform);\n      compilerBuildPath = list.releases[version];\n    }\n\n    return compilerBuildPath;\n  }\n\n  async _versionExists(version, platform) {\n    const versionPath = await this._fetchVersionPath(version, platform);\n    return versionPath !== undefined;\n  }\n\n  async _getCompilerBuildByPlatform(version, platform) {\n    const compilerBuildPath = await this._fetchVersionPath(version, platform);\n    const list = await this.getCompilersList(platform);\n    const compilerBuild = list.builds.find(b => b.path === compilerBuildPath);\n\n    if (compilerBuild === undefined) {\n      throw new errors_1.HardhatError(errors_list_1.ERRORS.SOLC.INVALID_VERSION, {\n        version\n      });\n    }\n\n    compilerBuild.platform = platform;\n    return compilerBuild;\n  }\n\n  async _fileExists(filePath) {\n    return fs_extra_1.default.pathExists(filePath);\n  }\n\n  _getCurrentPlatform() {\n    if (this._forceSolcJs) {\n      return CompilerPlatform.WASM;\n    }\n\n    switch (os_1.default.platform()) {\n      case \"win32\":\n        return CompilerPlatform.WINDOWS;\n\n      case \"linux\":\n        return CompilerPlatform.LINUX;\n\n      case \"darwin\":\n        return CompilerPlatform.MACOS;\n\n      default:\n        return CompilerPlatform.WASM;\n    }\n  }\n\n}\n\nexports.CompilerDownloader = CompilerDownloader;\n\nfunction getCompilerURL(platform, filePath) {\n  return `${COMPILER_FILES_DIR_URL_SOLC}${platform}/${filePath}`;\n}\n\nfunction getCompilerListURL(platform) {\n  return getCompilerURL(platform, \"list.json\");\n}","map":{"version":3,"mappings":"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","names":["CompilerPlatform","exports","log","COMPILER_FILES_DIR_URL_SOLC","downloadFile","url","destinationFile","download","CompilerDownloader","constructor","_compilersDir","options","_download","_a","_forceSolcJs","forceSolcJs","_b","isCompilerDownloaded","version","compilerBuild","getCompilerBuild","downloadedFilePath","_getDownloadedFilePath","_fileExists","verifyCompiler","ethereumjsUtil","expectedKeccak256","keccak256","compiler","fs_extra_1","readFile","compilerKeccak256","bufferToHex","keccak","unlink","getCompilersListPath","platform","errors_1","errors_list_1","SOLC","INVALID_DOWNLOAD","remoteVersion","getDownloadedCompilerPath","default","AdmZip","downloadCompiler","LINUX","MACOS","chmodSync","WINDOWS","endsWith","zip","extractAllTo","path_1","join","compilerPath","e","Error","isHardhatError","console","warn","chalk_1","yellow","message","getCompilersList","pendingRetries","compilersListExists","downloadCompilersList","readJSON","error","SyntaxError","remove","_getCurrentPlatform","_versionExists","_getCompilerBuildByPlatform","WASM","getCompilerListURL","VERSION_LIST_DOWNLOAD_FAILED","compilerUrl","getCompilerURL","path","DOWNLOAD_FAILED","pathExists","_fetchVersionPath","compilersListExisted","list","compilerBuildPath","releases","undefined","versionPath","builds","find","b","INVALID_VERSION","filePath","os_1"],"sourceRoot":"","sources":["../../../src/internal/solidity/compiler/downloader.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}