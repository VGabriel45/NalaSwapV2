{"ast":null,"code":"'use strict';\n/**\n * Web Notifications module.\n * @module Growl\n */\n\n/**\n * Save timer references to avoid Sinon interfering (see GH-237).\n */\n\nvar Date = global.Date;\nvar setTimeout = global.setTimeout;\n\nvar EVENT_RUN_END = require('../runner').constants.EVENT_RUN_END;\n\nvar isBrowser = require('../utils').isBrowser;\n/**\n * Checks if browser notification support exists.\n *\n * @public\n * @see {@link https://caniuse.com/#feat=notifications|Browser support (notifications)}\n * @see {@link https://caniuse.com/#feat=promises|Browser support (promises)}\n * @see {@link Mocha#growl}\n * @see {@link Mocha#isGrowlCapable}\n * @return {boolean} whether browser notification support exists\n */\n\n\nexports.isCapable = function () {\n  var hasNotificationSupport = ('Notification' in window);\n  var hasPromiseSupport = typeof Promise === 'function';\n  return isBrowser() && hasNotificationSupport && hasPromiseSupport;\n};\n/**\n * Implements browser notifications as a pseudo-reporter.\n *\n * @public\n * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/notification|Notification API}\n * @see {@link https://developers.google.com/web/fundamentals/push-notifications/display-a-notification|Displaying a Notification}\n * @see {@link Growl#isPermitted}\n * @see {@link Mocha#_growl}\n * @param {Runner} runner - Runner instance.\n */\n\n\nexports.notify = function (runner) {\n  var promise = isPermitted();\n  /**\n   * Attempt notification.\n   */\n\n  var sendNotification = function () {\n    // If user hasn't responded yet... \"No notification for you!\" (Seinfeld)\n    Promise.race([promise, Promise.resolve(undefined)]).then(canNotify).then(function () {\n      display(runner);\n    }).catch(notPermitted);\n  };\n\n  runner.once(EVENT_RUN_END, sendNotification);\n};\n/**\n * Checks if browser notification is permitted by user.\n *\n * @private\n * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/Notification/permission|Notification.permission}\n * @see {@link Mocha#growl}\n * @see {@link Mocha#isGrowlPermitted}\n * @returns {Promise<boolean>} promise determining if browser notification\n *     permissible when fulfilled.\n */\n\n\nfunction isPermitted() {\n  var permitted = {\n    granted: function allow() {\n      return Promise.resolve(true);\n    },\n    denied: function deny() {\n      return Promise.resolve(false);\n    },\n    default: function ask() {\n      return Notification.requestPermission().then(function (permission) {\n        return permission === 'granted';\n      });\n    }\n  };\n  return permitted[Notification.permission]();\n}\n/**\n * @summary\n * Determines if notification should proceed.\n *\n * @description\n * Notification shall <strong>not</strong> proceed unless `value` is true.\n *\n * `value` will equal one of:\n * <ul>\n *   <li><code>true</code> (from `isPermitted`)</li>\n *   <li><code>false</code> (from `isPermitted`)</li>\n *   <li><code>undefined</code> (from `Promise.race`)</li>\n * </ul>\n *\n * @private\n * @param {boolean|undefined} value - Determines if notification permissible.\n * @returns {Promise<undefined>} Notification can proceed\n */\n\n\nfunction canNotify(value) {\n  if (!value) {\n    var why = value === false ? 'blocked' : 'unacknowledged';\n    var reason = 'not permitted by user (' + why + ')';\n    return Promise.reject(new Error(reason));\n  }\n\n  return Promise.resolve();\n}\n/**\n * Displays the notification.\n *\n * @private\n * @param {Runner} runner - Runner instance.\n */\n\n\nfunction display(runner) {\n  var stats = runner.stats;\n  var symbol = {\n    cross: '\\u274C',\n    tick: '\\u2705'\n  };\n\n  var logo = require('../../package.json').notifyLogo;\n\n  var _message;\n\n  var message;\n  var title;\n\n  if (stats.failures) {\n    _message = stats.failures + ' of ' + stats.tests + ' tests failed';\n    message = symbol.cross + ' ' + _message;\n    title = 'Failed';\n  } else {\n    _message = stats.passes + ' tests passed in ' + stats.duration + 'ms';\n    message = symbol.tick + ' ' + _message;\n    title = 'Passed';\n  } // Send notification\n\n\n  var options = {\n    badge: logo,\n    body: message,\n    dir: 'ltr',\n    icon: logo,\n    lang: 'en-US',\n    name: 'mocha',\n    requireInteraction: false,\n    timestamp: Date.now()\n  };\n  var notification = new Notification(title, options); // Autoclose after brief delay (makes various browsers act same)\n\n  var FORCE_DURATION = 4000;\n  setTimeout(notification.close.bind(notification), FORCE_DURATION);\n}\n/**\n * As notifications are tangential to our purpose, just log the error.\n *\n * @private\n * @param {Error} err - Why notification didn't happen.\n */\n\n\nfunction notPermitted(err) {\n  console.error('notification error:', err.message);\n}","map":{"version":3,"names":["Date","global","setTimeout","EVENT_RUN_END","require","constants","isBrowser","exports","isCapable","hasNotificationSupport","window","hasPromiseSupport","Promise","notify","runner","promise","isPermitted","sendNotification","race","resolve","undefined","then","canNotify","display","catch","notPermitted","once","permitted","granted","allow","denied","deny","default","ask","Notification","requestPermission","permission","value","why","reason","reject","Error","stats","symbol","cross","tick","logo","notifyLogo","_message","message","title","failures","tests","passes","duration","options","badge","body","dir","icon","lang","name","requireInteraction","timestamp","now","notification","FORCE_DURATION","close","bind","err","console","error"],"sources":["/Users/ja/Desktop/MyProjects/NalaSwap/webapp/nalaswap/node_modules/mocha/lib/browser/growl.js"],"sourcesContent":["'use strict';\n\n/**\n * Web Notifications module.\n * @module Growl\n */\n\n/**\n * Save timer references to avoid Sinon interfering (see GH-237).\n */\nvar Date = global.Date;\nvar setTimeout = global.setTimeout;\nvar EVENT_RUN_END = require('../runner').constants.EVENT_RUN_END;\nvar isBrowser = require('../utils').isBrowser;\n\n/**\n * Checks if browser notification support exists.\n *\n * @public\n * @see {@link https://caniuse.com/#feat=notifications|Browser support (notifications)}\n * @see {@link https://caniuse.com/#feat=promises|Browser support (promises)}\n * @see {@link Mocha#growl}\n * @see {@link Mocha#isGrowlCapable}\n * @return {boolean} whether browser notification support exists\n */\nexports.isCapable = function () {\n  var hasNotificationSupport = 'Notification' in window;\n  var hasPromiseSupport = typeof Promise === 'function';\n  return isBrowser() && hasNotificationSupport && hasPromiseSupport;\n};\n\n/**\n * Implements browser notifications as a pseudo-reporter.\n *\n * @public\n * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/notification|Notification API}\n * @see {@link https://developers.google.com/web/fundamentals/push-notifications/display-a-notification|Displaying a Notification}\n * @see {@link Growl#isPermitted}\n * @see {@link Mocha#_growl}\n * @param {Runner} runner - Runner instance.\n */\nexports.notify = function (runner) {\n  var promise = isPermitted();\n\n  /**\n   * Attempt notification.\n   */\n  var sendNotification = function () {\n    // If user hasn't responded yet... \"No notification for you!\" (Seinfeld)\n    Promise.race([promise, Promise.resolve(undefined)])\n      .then(canNotify)\n      .then(function () {\n        display(runner);\n      })\n      .catch(notPermitted);\n  };\n\n  runner.once(EVENT_RUN_END, sendNotification);\n};\n\n/**\n * Checks if browser notification is permitted by user.\n *\n * @private\n * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/Notification/permission|Notification.permission}\n * @see {@link Mocha#growl}\n * @see {@link Mocha#isGrowlPermitted}\n * @returns {Promise<boolean>} promise determining if browser notification\n *     permissible when fulfilled.\n */\nfunction isPermitted() {\n  var permitted = {\n    granted: function allow() {\n      return Promise.resolve(true);\n    },\n    denied: function deny() {\n      return Promise.resolve(false);\n    },\n    default: function ask() {\n      return Notification.requestPermission().then(function (permission) {\n        return permission === 'granted';\n      });\n    }\n  };\n\n  return permitted[Notification.permission]();\n}\n\n/**\n * @summary\n * Determines if notification should proceed.\n *\n * @description\n * Notification shall <strong>not</strong> proceed unless `value` is true.\n *\n * `value` will equal one of:\n * <ul>\n *   <li><code>true</code> (from `isPermitted`)</li>\n *   <li><code>false</code> (from `isPermitted`)</li>\n *   <li><code>undefined</code> (from `Promise.race`)</li>\n * </ul>\n *\n * @private\n * @param {boolean|undefined} value - Determines if notification permissible.\n * @returns {Promise<undefined>} Notification can proceed\n */\nfunction canNotify(value) {\n  if (!value) {\n    var why = value === false ? 'blocked' : 'unacknowledged';\n    var reason = 'not permitted by user (' + why + ')';\n    return Promise.reject(new Error(reason));\n  }\n  return Promise.resolve();\n}\n\n/**\n * Displays the notification.\n *\n * @private\n * @param {Runner} runner - Runner instance.\n */\nfunction display(runner) {\n  var stats = runner.stats;\n  var symbol = {\n    cross: '\\u274C',\n    tick: '\\u2705'\n  };\n  var logo = require('../../package.json').notifyLogo;\n  var _message;\n  var message;\n  var title;\n\n  if (stats.failures) {\n    _message = stats.failures + ' of ' + stats.tests + ' tests failed';\n    message = symbol.cross + ' ' + _message;\n    title = 'Failed';\n  } else {\n    _message = stats.passes + ' tests passed in ' + stats.duration + 'ms';\n    message = symbol.tick + ' ' + _message;\n    title = 'Passed';\n  }\n\n  // Send notification\n  var options = {\n    badge: logo,\n    body: message,\n    dir: 'ltr',\n    icon: logo,\n    lang: 'en-US',\n    name: 'mocha',\n    requireInteraction: false,\n    timestamp: Date.now()\n  };\n  var notification = new Notification(title, options);\n\n  // Autoclose after brief delay (makes various browsers act same)\n  var FORCE_DURATION = 4000;\n  setTimeout(notification.close.bind(notification), FORCE_DURATION);\n}\n\n/**\n * As notifications are tangential to our purpose, just log the error.\n *\n * @private\n * @param {Error} err - Why notification didn't happen.\n */\nfunction notPermitted(err) {\n  console.error('notification error:', err.message);\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}