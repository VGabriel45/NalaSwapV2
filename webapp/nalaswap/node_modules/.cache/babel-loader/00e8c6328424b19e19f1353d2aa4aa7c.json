{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Parser = void 0;\n\nconst debug_1 = __importDefault(require(\"debug\"));\n\nconst solidity_files_cache_1 = require(\"../../builtin-tasks/utils/solidity-files-cache\");\n\nconst log = (0, debug_1.default)(\"hardhat:core:solidity:imports\");\n\nclass Parser {\n  constructor(_solidityFilesCache) {\n    this._cache = new Map();\n    this._solidityFilesCache = _solidityFilesCache !== null && _solidityFilesCache !== void 0 ? _solidityFilesCache : solidity_files_cache_1.SolidityFilesCache.createEmpty();\n  }\n\n  parse(fileContent, absolutePath, contentHash) {\n    const cacheResult = this._getFromCache(absolutePath, contentHash);\n\n    if (cacheResult !== null) {\n      return cacheResult;\n    }\n\n    let result;\n\n    try {\n      const parser = require(\"@solidity-parser/parser\");\n\n      const ast = parser.parse(fileContent, {\n        tolerant: true\n      });\n      const imports = [];\n      const versionPragmas = [];\n      parser.visit(ast, {\n        ImportDirective: node => imports.push(node.path),\n        PragmaDirective: node => {\n          if (node.name === \"solidity\") {\n            versionPragmas.push(node.value);\n          }\n        }\n      });\n      result = {\n        imports,\n        versionPragmas\n      };\n    } catch (error) {\n      log(\"Failed to parse Solidity file to extract its imports, using regex fallback\\n\", error);\n      result = {\n        imports: findImportsWithRegexps(fileContent),\n        versionPragmas: findVersionPragmasWithRegexps(fileContent)\n      };\n    }\n\n    this._cache.set(contentHash, result);\n\n    return result;\n  }\n  /**\n   * Get parsed data from the internal cache, or from the solidity files cache.\n   *\n   * Returns null if cannot find it in either one.\n   */\n\n\n  _getFromCache(absolutePath, contentHash) {\n    const internalCacheEntry = this._cache.get(contentHash);\n\n    if (internalCacheEntry !== undefined) {\n      return internalCacheEntry;\n    }\n\n    const solidityFilesCacheEntry = this._solidityFilesCache.getEntry(absolutePath);\n\n    if (solidityFilesCacheEntry === undefined) {\n      return null;\n    }\n\n    const {\n      imports,\n      versionPragmas\n    } = solidityFilesCacheEntry;\n\n    if (solidityFilesCacheEntry.contentHash !== contentHash) {\n      return null;\n    }\n\n    return {\n      imports,\n      versionPragmas\n    };\n  }\n\n}\n\nexports.Parser = Parser;\n\nfunction findImportsWithRegexps(fileContent) {\n  const importsRegexp = /import\\s+(?:(?:\"([^;]*)\"|'([^;]*)')(?:;|\\s+as\\s+[^;]*;)|.+from\\s+(?:\"(.*)\"|'(.*)');)/g;\n  let imports = [];\n  let result;\n\n  while (true) {\n    result = importsRegexp.exec(fileContent);\n\n    if (result === null) {\n      return imports;\n    }\n\n    imports = [...imports, ...result.slice(1).filter(m => m !== undefined)];\n  }\n}\n\nfunction findVersionPragmasWithRegexps(fileContent) {\n  const versionPragmasRegexp = /pragma\\s+solidity\\s+(.+?);/g;\n  let versionPragmas = [];\n  let result;\n\n  while (true) {\n    result = versionPragmasRegexp.exec(fileContent);\n\n    if (result === null) {\n      return versionPragmas;\n    }\n\n    versionPragmas = [...versionPragmas, ...result.slice(1).filter(m => m !== undefined)];\n  }\n}","map":{"version":3,"mappings":"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","names":["log","Parser","constructor","_solidityFilesCache","Map","solidity_files_cache_1","createEmpty","parse","fileContent","absolutePath","contentHash","cacheResult","_getFromCache","result","parser","require","ast","tolerant","imports","versionPragmas","visit","ImportDirective","node","push","path","PragmaDirective","name","value","error","findImportsWithRegexps","findVersionPragmasWithRegexps","_cache","set","internalCacheEntry","get","undefined","solidityFilesCacheEntry","getEntry","exports","importsRegexp","exec","slice","filter","m","versionPragmasRegexp"],"sourceRoot":"","sources":["../../src/internal/solidity/parse.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}