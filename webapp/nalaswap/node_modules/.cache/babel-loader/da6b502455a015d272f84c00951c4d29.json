{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst chalk_1 = __importDefault(require(\"chalk\"));\n\nconst debug_1 = __importDefault(require(\"debug\"));\n\nconst fs_extra_1 = __importDefault(require(\"fs-extra\"));\n\nconst constants_1 = require(\"../internal/constants\");\n\nconst config_env_1 = require(\"../internal/core/config/config-env\");\n\nconst errors_1 = require(\"../internal/core/errors\");\n\nconst errors_list_1 = require(\"../internal/core/errors-list\");\n\nconst construction_1 = require(\"../internal/core/providers/construction\");\n\nconst util_1 = require(\"../internal/core/providers/util\");\n\nconst server_1 = require(\"../internal/hardhat-network/jsonrpc/server\");\n\nconst reporter_1 = require(\"../internal/sentry/reporter\");\n\nconst default_config_1 = require(\"../internal/core/config/default-config\");\n\nconst task_names_1 = require(\"./task-names\");\n\nconst watch_1 = require(\"./utils/watch\");\n\nconst log = (0, debug_1.default)(\"hardhat:core:tasks:node\");\n\nfunction printDefaultConfigWarning() {\n  console.log(chalk_1.default.bold(\"WARNING: These accounts, and their private keys, are publicly known.\"));\n  console.log(chalk_1.default.bold(\"Any funds sent to them on Mainnet or any other live network WILL BE LOST.\"));\n}\n\nfunction logHardhatNetworkAccounts(networkConfig) {\n  const isDefaultConfig = !Array.isArray(networkConfig.accounts) && networkConfig.accounts.mnemonic === default_config_1.HARDHAT_NETWORK_MNEMONIC;\n\n  const {\n    BN,\n    bufferToHex,\n    privateToAddress,\n    toBuffer,\n    toChecksumAddress\n  } = require(\"ethereumjs-util\");\n\n  console.log(\"Accounts\");\n  console.log(\"========\");\n\n  if (isDefaultConfig) {\n    console.log();\n    printDefaultConfigWarning();\n    console.log();\n  }\n\n  const accounts = (0, util_1.normalizeHardhatNetworkAccountsConfig)(networkConfig.accounts);\n\n  for (const [index, account] of accounts.entries()) {\n    const address = toChecksumAddress(bufferToHex(privateToAddress(toBuffer(account.privateKey))));\n    const balance = new BN(account.balance).div(new BN(10).pow(new BN(18))).toString(10);\n    let entry = `Account #${index}: ${address} (${balance} ETH)`;\n\n    if (isDefaultConfig) {\n      const privateKey = bufferToHex(toBuffer(account.privateKey));\n      entry += `\nPrivate Key: ${privateKey}`;\n    }\n\n    console.log(entry);\n    console.log();\n  }\n\n  if (isDefaultConfig) {\n    printDefaultConfigWarning();\n    console.log();\n  }\n}\n\n(0, config_env_1.subtask)(task_names_1.TASK_NODE_GET_PROVIDER).addOptionalParam(\"forkUrl\", undefined, undefined, config_env_1.types.string).addOptionalParam(\"forkBlockNumber\", undefined, undefined, config_env_1.types.int).setAction(async (_ref, _ref2) => {\n  let {\n    forkBlockNumber: forkBlockNumberParam,\n    forkUrl: forkUrlParam\n  } = _ref;\n  let {\n    artifacts,\n    config,\n    network,\n    userConfig\n  } = _ref2;\n\n  var _a, _b, _c, _d, _e;\n\n  let provider = network.provider;\n\n  if (network.name !== constants_1.HARDHAT_NETWORK_NAME) {\n    const networkConfig = config.networks[constants_1.HARDHAT_NETWORK_NAME];\n    log(`Creating hardhat provider for JSON-RPC server`);\n    provider = (0, construction_1.createProvider)(constants_1.HARDHAT_NETWORK_NAME, networkConfig, config.paths, artifacts);\n  }\n\n  const hardhatNetworkConfig = config.networks[constants_1.HARDHAT_NETWORK_NAME];\n  const forkUrlConfig = (_a = hardhatNetworkConfig.forking) === null || _a === void 0 ? void 0 : _a.url;\n  const forkBlockNumberConfig = (_b = hardhatNetworkConfig.forking) === null || _b === void 0 ? void 0 : _b.blockNumber;\n  const forkUrl = forkUrlParam !== null && forkUrlParam !== void 0 ? forkUrlParam : forkUrlConfig;\n  const forkBlockNumber = forkBlockNumberParam !== null && forkBlockNumberParam !== void 0 ? forkBlockNumberParam : forkBlockNumberConfig; // we throw an error if the user specified a forkBlockNumber but not a\n  // forkUrl\n\n  if (forkBlockNumber !== undefined && forkUrl === undefined) {\n    throw new errors_1.HardhatError(errors_list_1.ERRORS.BUILTIN_TASKS.NODE_FORK_BLOCK_NUMBER_WITHOUT_URL);\n  } // if the url or the block is different to the one in the configuration,\n  // we use hardhat_reset to set the fork\n\n\n  if (forkUrl !== forkUrlConfig || forkBlockNumber !== forkBlockNumberConfig) {\n    await provider.request({\n      method: \"hardhat_reset\",\n      params: [{\n        forking: {\n          jsonRpcUrl: forkUrl,\n          blockNumber: forkBlockNumber\n        }\n      }]\n    });\n  }\n\n  const hardhatNetworkUserConfig = (_d = (_c = userConfig.networks) === null || _c === void 0 ? void 0 : _c[constants_1.HARDHAT_NETWORK_NAME]) !== null && _d !== void 0 ? _d : {}; // enable logging\n\n  await provider.request({\n    method: \"hardhat_setLoggingEnabled\",\n    params: [(_e = hardhatNetworkUserConfig.loggingEnabled) !== null && _e !== void 0 ? _e : true]\n  });\n  return provider;\n});\n(0, config_env_1.subtask)(task_names_1.TASK_NODE_CREATE_SERVER).addParam(\"hostname\", undefined, undefined, config_env_1.types.string).addParam(\"port\", undefined, undefined, config_env_1.types.int).addParam(\"provider\", undefined, undefined, config_env_1.types.any).setAction(async _ref3 => {\n  let {\n    hostname,\n    port,\n    provider\n  } = _ref3;\n  const serverConfig = {\n    hostname,\n    port,\n    provider\n  };\n  const server = new server_1.JsonRpcServer(serverConfig);\n  return server;\n});\n/**\n * This task will be called when the server was successfully created, but it's\n * not ready for receiving requests yet.\n */\n\n(0, config_env_1.subtask)(task_names_1.TASK_NODE_SERVER_CREATED).addParam(\"hostname\", undefined, undefined, config_env_1.types.string).addParam(\"port\", undefined, undefined, config_env_1.types.int).addParam(\"provider\", undefined, undefined, config_env_1.types.any).addParam(\"server\", undefined, undefined, config_env_1.types.any).setAction(async _ref4 => {// this task is meant to be overriden by plugin writers\n\n  let {} = _ref4;\n});\n/**\n * This subtask will be run when the server is ready to accept requests\n */\n\n(0, config_env_1.subtask)(task_names_1.TASK_NODE_SERVER_READY).addParam(\"address\", undefined, undefined, config_env_1.types.string).addParam(\"port\", undefined, undefined, config_env_1.types.int).addParam(\"provider\", undefined, undefined, config_env_1.types.any).addParam(\"server\", undefined, undefined, config_env_1.types.any).setAction(async (_ref5, _ref6) => {\n  let {\n    address,\n    port\n  } = _ref5;\n  let {\n    config\n  } = _ref6;\n  console.log(chalk_1.default.green(`Started HTTP and WebSocket JSON-RPC server at http://${address}:${port}/`));\n  console.log();\n  const networkConfig = config.networks[constants_1.HARDHAT_NETWORK_NAME];\n  logHardhatNetworkAccounts(networkConfig);\n});\n(0, config_env_1.task)(task_names_1.TASK_NODE, \"Starts a JSON-RPC server on top of Hardhat Network\").addOptionalParam(\"hostname\", \"The host to which to bind to for new connections (Defaults to 127.0.0.1 running locally, and 0.0.0.0 in Docker)\", undefined, config_env_1.types.string).addOptionalParam(\"port\", \"The port on which to listen for new connections\", 8545, config_env_1.types.int).addOptionalParam(\"fork\", \"The URL of the JSON-RPC server to fork from\", undefined, config_env_1.types.string).addOptionalParam(\"forkBlockNumber\", \"The block number to fork from\", undefined, config_env_1.types.int).setAction(async (_ref7, _ref8) => {\n  let {\n    forkBlockNumber,\n    fork: forkUrl,\n    hostname: hostnameParam,\n    port\n  } = _ref7;\n  let {\n    config,\n    hardhatArguments,\n    network,\n    run\n  } = _ref8;\n\n  // we throw if the user specified a network argument and it's not hardhat\n  if (network.name !== constants_1.HARDHAT_NETWORK_NAME && hardhatArguments.network !== undefined) {\n    throw new errors_1.HardhatError(errors_list_1.ERRORS.BUILTIN_TASKS.JSONRPC_UNSUPPORTED_NETWORK);\n  }\n\n  try {\n    const provider = await run(task_names_1.TASK_NODE_GET_PROVIDER, {\n      forkBlockNumber,\n      forkUrl\n    }); // the default hostname is \"127.0.0.1\" unless we are inside a docker\n    // container, in that case we use \"0.0.0.0\"\n\n    let hostname;\n\n    if (hostnameParam !== undefined) {\n      hostname = hostnameParam;\n    } else {\n      const insideDocker = fs_extra_1.default.existsSync(\"/.dockerenv\");\n\n      if (insideDocker) {\n        hostname = \"0.0.0.0\";\n      } else {\n        hostname = \"127.0.0.1\";\n      }\n    }\n\n    const server = await run(task_names_1.TASK_NODE_CREATE_SERVER, {\n      hostname,\n      port,\n      provider\n    });\n    await run(task_names_1.TASK_NODE_SERVER_CREATED, {\n      hostname,\n      port,\n      provider,\n      server\n    });\n    const {\n      port: actualPort,\n      address\n    } = await server.listen();\n    let watcher;\n\n    try {\n      watcher = await (0, watch_1.watchCompilerOutput)(provider, config.paths);\n    } catch (error) {\n      console.warn(chalk_1.default.yellow(\"There was a problem watching the compiler output, changes in the contracts won't be reflected in the Hardhat Network. Run Hardhat with --verbose to learn more.\"));\n      log(\"Compilation output can't be watched. Please report this to help us improve Hardhat.\\n\", error);\n\n      if (error instanceof Error) {\n        reporter_1.Reporter.reportError(error);\n      }\n    }\n\n    await run(task_names_1.TASK_NODE_SERVER_READY, {\n      address,\n      port: actualPort,\n      provider,\n      server\n    });\n    await server.waitUntilClosed();\n    await (watcher === null || watcher === void 0 ? void 0 : watcher.close());\n  } catch (error) {\n    if (errors_1.HardhatError.isHardhatError(error)) {\n      throw error;\n    }\n\n    if (error instanceof Error) {\n      throw new errors_1.HardhatError(errors_list_1.ERRORS.BUILTIN_TASKS.JSONRPC_SERVER_ERROR, {\n        error: error.message\n      }, error);\n    } // eslint-disable-next-line @nomiclabs/hardhat-internal-rules/only-hardhat-error\n\n\n    throw error;\n  }\n});","map":{"version":3,"mappings":"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","names":["log","printDefaultConfigWarning","console","chalk_1","bold","logHardhatNetworkAccounts","networkConfig","isDefaultConfig","Array","isArray","accounts","mnemonic","default_config_1","BN","bufferToHex","privateToAddress","toBuffer","toChecksumAddress","require","index","account","entries","address","privateKey","balance","div","pow","toString","entry","task_names_1","addOptionalParam","undefined","config_env_1","string","int","setAction","forkBlockNumber","forkBlockNumberParam","forkUrl","forkUrlParam","artifacts","config","network","userConfig","provider","name","constants_1","networks","paths","hardhatNetworkConfig","forkUrlConfig","forking","_a","url","forkBlockNumberConfig","_b","blockNumber","errors_1","errors_list_1","BUILTIN_TASKS","NODE_FORK_BLOCK_NUMBER_WITHOUT_URL","request","method","params","jsonRpcUrl","hardhatNetworkUserConfig","_c","_d","loggingEnabled","_e","addParam","any","hostname","port","serverConfig","server","server_1","green","fork","hostnameParam","hardhatArguments","run","JSONRPC_UNSUPPORTED_NETWORK","insideDocker","fs_extra_1","existsSync","actualPort","listen","watcher","error","warn","yellow","Error","reporter_1","reportError","waitUntilClosed","close","isHardhatError","JSONRPC_SERVER_ERROR","message"],"sourceRoot":"","sources":["../src/builtin-tasks/node.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}