{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  Object.defineProperty(o, k2, {\n    enumerable: true,\n    get: function () {\n      return m[k];\n    }\n  });\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst chalk_1 = __importDefault(require(\"chalk\"));\n\nconst path_1 = __importDefault(require(\"path\"));\n\nconst constants_1 = require(\"../internal/constants\");\n\nconst config_env_1 = require(\"../internal/core/config/config-env\");\n\nconst typescript_support_1 = require(\"../internal/core/typescript-support\");\n\nconst disk_cache_1 = require(\"../internal/hardhat-network/provider/utils/disk-cache\");\n\nconst fork_recomendations_banner_1 = require(\"../internal/hardhat-network/provider/utils/fork-recomendations-banner\");\n\nconst glob_1 = require(\"../internal/util/glob\");\n\nconst strings_1 = require(\"../internal/util/strings\");\n\nconst task_names_1 = require(\"./task-names\");\n\n(0, config_env_1.subtask)(task_names_1.TASK_TEST_GET_TEST_FILES).addOptionalVariadicPositionalParam(\"testFiles\", \"An optional list of files to test\", []).setAction(async (_ref, _ref2) => {\n  let {\n    testFiles\n  } = _ref;\n  let {\n    config\n  } = _ref2;\n\n  if (testFiles.length !== 0) {\n    const testFilesAbsolutePaths = testFiles.map(x => path_1.default.resolve(process.cwd(), x));\n    return testFilesAbsolutePaths;\n  }\n\n  const jsFiles = await (0, glob_1.glob)(path_1.default.join(config.paths.tests, \"**/*.js\"));\n\n  if (!(0, typescript_support_1.isRunningWithTypescript)(config)) {\n    return jsFiles;\n  }\n\n  const tsFiles = await (0, glob_1.glob)(path_1.default.join(config.paths.tests, \"**/*.ts\"));\n  return [...jsFiles, ...tsFiles];\n});\n(0, config_env_1.subtask)(task_names_1.TASK_TEST_SETUP_TEST_ENVIRONMENT, async () => {});\n(0, config_env_1.subtask)(task_names_1.TASK_TEST_RUN_MOCHA_TESTS).addFlag(\"parallel\", \"Run tests in parallel\").addFlag(\"bail\", \"Stop running tests after the first test failure\").addOptionalParam(\"grep\", \"Only run tests matching the given string or regexp\").addOptionalVariadicPositionalParam(\"testFiles\", \"An optional list of files to test\", []).setAction(async (taskArgs, _ref3) => {\n  let {\n    config\n  } = _ref3;\n\n  var _a;\n\n  const {\n    default: Mocha\n  } = await Promise.resolve().then(() => __importStar(require(\"mocha\")));\n  const mochaConfig = Object.assign({}, config.mocha);\n\n  if (taskArgs.grep !== undefined) {\n    mochaConfig.grep = taskArgs.grep;\n  }\n\n  if (taskArgs.bail) {\n    mochaConfig.bail = true;\n  }\n\n  if (taskArgs.parallel) {\n    mochaConfig.parallel = true;\n  }\n\n  if (mochaConfig.parallel === true) {\n    const mochaRequire = (_a = mochaConfig.require) !== null && _a !== void 0 ? _a : [];\n\n    if (!mochaRequire.includes(\"hardhat/register\")) {\n      mochaRequire.push(\"hardhat/register\");\n    }\n\n    mochaConfig.require = mochaRequire;\n  }\n\n  const mocha = new Mocha(mochaConfig);\n  taskArgs.testFiles.forEach(file => mocha.addFile(file));\n  const testFailures = await new Promise(resolve => {\n    mocha.run(resolve);\n  });\n  mocha.dispose();\n  return testFailures;\n});\n(0, config_env_1.subtask)(task_names_1.TASK_TEST_RUN_SHOW_FORK_RECOMMENDATIONS).setAction(async (_, _ref4) => {\n  let {\n    config,\n    network\n  } = _ref4;\n\n  if (network.name !== constants_1.HARDHAT_NETWORK_NAME) {\n    return;\n  }\n\n  const forkCache = (0, disk_cache_1.getForkCacheDirPath)(config.paths);\n  await (0, fork_recomendations_banner_1.showForkRecommendationsBannerIfNecessary)(network.config, forkCache);\n});\n(0, config_env_1.task)(task_names_1.TASK_TEST, \"Runs mocha tests\").addOptionalVariadicPositionalParam(\"testFiles\", \"An optional list of files to test\", []).addFlag(\"noCompile\", \"Don't compile before running this task\").addFlag(\"parallel\", \"Run tests in parallel\").addFlag(\"bail\", \"Stop running tests after the first test failure\").addOptionalParam(\"grep\", \"Only run tests matching the given string or regexp\").setAction(async (_ref5, _ref6) => {\n  let {\n    testFiles,\n    noCompile,\n    parallel,\n    bail,\n    grep\n  } = _ref5;\n  let {\n    run,\n    network\n  } = _ref6;\n\n  if (!noCompile) {\n    await run(task_names_1.TASK_COMPILE, {\n      quiet: true\n    });\n  }\n\n  const files = await run(task_names_1.TASK_TEST_GET_TEST_FILES, {\n    testFiles\n  });\n  await run(task_names_1.TASK_TEST_SETUP_TEST_ENVIRONMENT);\n  await run(task_names_1.TASK_TEST_RUN_SHOW_FORK_RECOMMENDATIONS);\n  const testFailures = await run(task_names_1.TASK_TEST_RUN_MOCHA_TESTS, {\n    testFiles: files,\n    parallel,\n    bail,\n    grep\n  });\n\n  if (network.name === constants_1.HARDHAT_NETWORK_NAME) {\n    const stackTracesFailures = await network.provider.send(\"hardhat_getStackTraceFailuresCount\");\n\n    if (stackTracesFailures !== 0) {\n      console.warn(chalk_1.default.yellow(`Failed to generate ${stackTracesFailures} ${(0, strings_1.pluralize)(stackTracesFailures, \"stack trace\")}. Run Hardhat with --verbose to learn more.`));\n    }\n  }\n\n  process.exitCode = testFailures;\n  return testFailures;\n});","map":{"version":3,"mappings":"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","names":["task_names_1","addOptionalVariadicPositionalParam","setAction","testFiles","config","length","testFilesAbsolutePaths","map","x","path_1","resolve","process","cwd","jsFiles","join","paths","tests","tsFiles","addFlag","addOptionalParam","taskArgs","default","Mocha","mochaConfig","mocha","grep","undefined","bail","parallel","mochaRequire","require","_a","includes","push","forEach","file","addFile","testFailures","Promise","run","dispose","_","network","name","constants_1","forkCache","noCompile","quiet","files","stackTracesFailures","provider","send","console","warn","chalk_1","yellow","exitCode"],"sourceRoot":"","sources":["../src/builtin-tasks/test.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}