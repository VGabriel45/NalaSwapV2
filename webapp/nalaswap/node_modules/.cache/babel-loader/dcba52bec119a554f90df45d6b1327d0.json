{"ast":null,"code":"'use strict';\n/*!\n * mocha\n * Copyright(c) 2011 TJ Holowaychuk <tj@vision-media.ca>\n * MIT Licensed\n */\n\nvar escapeRe = require('escape-string-regexp');\n\nvar path = require('path');\n\nvar builtinReporters = require('./reporters');\n\nvar growl = require('./nodejs/growl');\n\nvar utils = require('./utils');\n\nvar mocharc = require('./mocharc.json');\n\nvar Suite = require('./suite');\n\nvar esmUtils = require('./nodejs/esm-utils');\n\nvar createStatsCollector = require('./stats-collector');\n\nconst {\n  createInvalidReporterError,\n  createInvalidInterfaceError,\n  createMochaInstanceAlreadyDisposedError,\n  createMochaInstanceAlreadyRunningError,\n  createUnsupportedError\n} = require('./errors');\n\nconst {\n  EVENT_FILE_PRE_REQUIRE,\n  EVENT_FILE_POST_REQUIRE,\n  EVENT_FILE_REQUIRE\n} = Suite.constants;\n\nvar debug = require('debug')('mocha:mocha');\n\nexports = module.exports = Mocha;\n/**\n * A Mocha instance is a finite state machine.\n * These are the states it can be in.\n * @private\n */\n\nvar mochaStates = utils.defineConstants({\n  /**\n   * Initial state of the mocha instance\n   * @private\n   */\n  INIT: 'init',\n\n  /**\n   * Mocha instance is running tests\n   * @private\n   */\n  RUNNING: 'running',\n\n  /**\n   * Mocha instance is done running tests and references to test functions and hooks are cleaned.\n   * You can reset this state by unloading the test files.\n   * @private\n   */\n  REFERENCES_CLEANED: 'referencesCleaned',\n\n  /**\n   * Mocha instance is disposed and can no longer be used.\n   * @private\n   */\n  DISPOSED: 'disposed'\n});\n/**\n * To require local UIs and reporters when running in node.\n */\n\nif (!utils.isBrowser() && typeof module.paths !== 'undefined') {\n  var cwd = utils.cwd();\n  module.paths.push(cwd, path.join(cwd, 'node_modules'));\n}\n/**\n * Expose internals.\n * @private\n */\n\n\nexports.utils = utils;\nexports.interfaces = require('./interfaces');\n/**\n * @public\n * @memberof Mocha\n */\n\nexports.reporters = builtinReporters;\nexports.Runnable = require('./runnable');\nexports.Context = require('./context');\n/**\n *\n * @memberof Mocha\n */\n\nexports.Runner = require('./runner');\nexports.Suite = Suite;\nexports.Hook = require('./hook');\nexports.Test = require('./test');\nlet currentContext;\n\nexports.afterEach = function () {\n  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  }\n\n  return (currentContext.afterEach || currentContext.teardown).apply(this, args);\n};\n\nexports.after = function () {\n  for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n    args[_key2] = arguments[_key2];\n  }\n\n  return (currentContext.after || currentContext.suiteTeardown).apply(this, args);\n};\n\nexports.beforeEach = function () {\n  for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n    args[_key3] = arguments[_key3];\n  }\n\n  return (currentContext.beforeEach || currentContext.setup).apply(this, args);\n};\n\nexports.before = function () {\n  for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n    args[_key4] = arguments[_key4];\n  }\n\n  return (currentContext.before || currentContext.suiteSetup).apply(this, args);\n};\n\nexports.describe = function () {\n  for (var _len5 = arguments.length, args = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {\n    args[_key5] = arguments[_key5];\n  }\n\n  return (currentContext.describe || currentContext.suite).apply(this, args);\n};\n\nexports.describe.only = function () {\n  for (var _len6 = arguments.length, args = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {\n    args[_key6] = arguments[_key6];\n  }\n\n  return (currentContext.describe || currentContext.suite).only.apply(this, args);\n};\n\nexports.describe.skip = function () {\n  for (var _len7 = arguments.length, args = new Array(_len7), _key7 = 0; _key7 < _len7; _key7++) {\n    args[_key7] = arguments[_key7];\n  }\n\n  return (currentContext.describe || currentContext.suite).skip.apply(this, args);\n};\n\nexports.it = function () {\n  for (var _len8 = arguments.length, args = new Array(_len8), _key8 = 0; _key8 < _len8; _key8++) {\n    args[_key8] = arguments[_key8];\n  }\n\n  return (currentContext.it || currentContext.test).apply(this, args);\n};\n\nexports.it.only = function () {\n  for (var _len9 = arguments.length, args = new Array(_len9), _key9 = 0; _key9 < _len9; _key9++) {\n    args[_key9] = arguments[_key9];\n  }\n\n  return (currentContext.it || currentContext.test).only.apply(this, args);\n};\n\nexports.it.skip = function () {\n  for (var _len10 = arguments.length, args = new Array(_len10), _key10 = 0; _key10 < _len10; _key10++) {\n    args[_key10] = arguments[_key10];\n  }\n\n  return (currentContext.it || currentContext.test).skip.apply(this, args);\n};\n\nexports.xdescribe = exports.describe.skip;\nexports.xit = exports.it.skip;\nexports.setup = exports.beforeEach;\nexports.suiteSetup = exports.before;\nexports.suiteTeardown = exports.after;\nexports.suite = exports.describe;\nexports.teardown = exports.afterEach;\nexports.test = exports.it;\n\nexports.run = function () {\n  for (var _len11 = arguments.length, args = new Array(_len11), _key11 = 0; _key11 < _len11; _key11++) {\n    args[_key11] = arguments[_key11];\n  }\n\n  return currentContext.run.apply(this, args);\n};\n/**\n * Constructs a new Mocha instance with `options`.\n *\n * @public\n * @class Mocha\n * @param {Object} [options] - Settings object.\n * @param {boolean} [options.allowUncaught] - Propagate uncaught errors?\n * @param {boolean} [options.asyncOnly] - Force `done` callback or promise?\n * @param {boolean} [options.bail] - Bail after first test failure?\n * @param {boolean} [options.checkLeaks] - Check for global variable leaks?\n * @param {boolean} [options.color] - Color TTY output from reporter?\n * @param {boolean} [options.delay] - Delay root suite execution?\n * @param {boolean} [options.diff] - Show diff on failure?\n * @param {boolean} [options.dryRun] - Report tests without running them?\n * @param {boolean} [options.failZero] - Fail test run if zero tests?\n * @param {string} [options.fgrep] - Test filter given string.\n * @param {boolean} [options.forbidOnly] - Tests marked `only` fail the suite?\n * @param {boolean} [options.forbidPending] - Pending tests fail the suite?\n * @param {boolean} [options.fullTrace] - Full stacktrace upon failure?\n * @param {string[]} [options.global] - Variables expected in global scope.\n * @param {RegExp|string} [options.grep] - Test filter given regular expression.\n * @param {boolean} [options.growl] - Enable desktop notifications?\n * @param {boolean} [options.inlineDiffs] - Display inline diffs?\n * @param {boolean} [options.invert] - Invert test filter matches?\n * @param {boolean} [options.noHighlighting] - Disable syntax highlighting?\n * @param {string|constructor} [options.reporter] - Reporter name or constructor.\n * @param {Object} [options.reporterOption] - Reporter settings object.\n * @param {number} [options.retries] - Number of times to retry failed tests.\n * @param {number} [options.slow] - Slow threshold value.\n * @param {number|string} [options.timeout] - Timeout threshold value.\n * @param {string} [options.ui] - Interface name.\n * @param {boolean} [options.parallel] - Run jobs in parallel.\n * @param {number} [options.jobs] - Max number of worker processes for parallel runs.\n * @param {MochaRootHookObject} [options.rootHooks] - Hooks to bootstrap the root suite with.\n * @param {string[]} [options.require] - Pathname of `rootHooks` plugin for parallel runs.\n * @param {boolean} [options.isWorker] - Should be `true` if `Mocha` process is running in a worker process.\n */\n\n\nfunction Mocha() {\n  let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  options = { ...mocharc,\n    ...options\n  };\n  this.files = [];\n  this.options = options; // root suite\n\n  this.suite = new exports.Suite('', new exports.Context(), true);\n  this._cleanReferencesAfterRun = true;\n  this._state = mochaStates.INIT;\n  this.grep(options.grep).fgrep(options.fgrep).ui(options.ui).reporter(options.reporter, options.reporterOption || options.reporterOptions // for backwards compability\n  ).slow(options.slow).global(options.global); // this guard exists because Suite#timeout does not consider `undefined` to be valid input\n\n  if (typeof options.timeout !== 'undefined') {\n    this.timeout(options.timeout === false ? 0 : options.timeout);\n  }\n\n  if ('retries' in options) {\n    this.retries(options.retries);\n  }\n\n  ['allowUncaught', 'asyncOnly', 'bail', 'checkLeaks', 'color', 'delay', 'diff', 'dryRun', 'failZero', 'forbidOnly', 'forbidPending', 'fullTrace', 'growl', 'inlineDiffs', 'invert'].forEach(function (opt) {\n    if (options[opt]) {\n      this[opt]();\n    }\n  }, this);\n\n  if (options.rootHooks) {\n    this.rootHooks(options.rootHooks);\n  }\n  /**\n   * The class which we'll instantiate in {@link Mocha#run}.  Defaults to\n   * {@link Runner} in serial mode; changes in parallel mode.\n   * @memberof Mocha\n   * @private\n   */\n\n\n  this._runnerClass = exports.Runner;\n  /**\n   * Whether or not to call {@link Mocha#loadFiles} implicitly when calling\n   * {@link Mocha#run}.  If this is `true`, then it's up to the consumer to call\n   * {@link Mocha#loadFiles} _or_ {@link Mocha#loadFilesAsync}.\n   * @private\n   * @memberof Mocha\n   */\n\n  this._lazyLoadFiles = false;\n  /**\n   * It's useful for a Mocha instance to know if it's running in a worker process.\n   * We could derive this via other means, but it's helpful to have a flag to refer to.\n   * @memberof Mocha\n   * @private\n   */\n\n  this.isWorker = Boolean(options.isWorker);\n  this.globalSetup(options.globalSetup).globalTeardown(options.globalTeardown).enableGlobalSetup(options.enableGlobalSetup).enableGlobalTeardown(options.enableGlobalTeardown);\n\n  if (options.parallel && (typeof options.jobs === 'undefined' || options.jobs > 1)) {\n    debug('attempting to enable parallel mode');\n    this.parallelMode(true);\n  }\n}\n/**\n * Enables or disables bailing on the first failure.\n *\n * @public\n * @see [CLI option](../#-bail-b)\n * @param {boolean} [bail=true] - Whether to bail on first error.\n * @returns {Mocha} this\n * @chainable\n */\n\n\nMocha.prototype.bail = function (bail) {\n  this.suite.bail(bail !== false);\n  return this;\n};\n/**\n * @summary\n * Adds `file` to be loaded for execution.\n *\n * @description\n * Useful for generic setup code that must be included within test suite.\n *\n * @public\n * @see [CLI option](../#-file-filedirectoryglob)\n * @param {string} file - Pathname of file to be loaded.\n * @returns {Mocha} this\n * @chainable\n */\n\n\nMocha.prototype.addFile = function (file) {\n  this.files.push(file);\n  return this;\n};\n/**\n * Sets reporter to `reporter`, defaults to \"spec\".\n *\n * @public\n * @see [CLI option](../#-reporter-name-r-name)\n * @see [Reporters](../#reporters)\n * @param {String|Function} reporterName - Reporter name or constructor.\n * @param {Object} [reporterOptions] - Options used to configure the reporter.\n * @returns {Mocha} this\n * @chainable\n * @throws {Error} if requested reporter cannot be loaded\n * @example\n *\n * // Use XUnit reporter and direct its output to file\n * mocha.reporter('xunit', { output: '/path/to/testspec.xunit.xml' });\n */\n\n\nMocha.prototype.reporter = function (reporterName, reporterOptions) {\n  if (typeof reporterName === 'function') {\n    this._reporter = reporterName;\n  } else {\n    reporterName = reporterName || 'spec';\n    var reporter; // Try to load a built-in reporter.\n\n    if (builtinReporters[reporterName]) {\n      reporter = builtinReporters[reporterName];\n    } // Try to load reporters from process.cwd() and node_modules\n\n\n    if (!reporter) {\n      let foundReporter;\n\n      try {\n        foundReporter = require.resolve(reporterName);\n        reporter = require(foundReporter);\n      } catch (err) {\n        if (foundReporter) {\n          throw createInvalidReporterError(err.message, foundReporter);\n        } // Try to load reporters from a cwd-relative path\n\n\n        try {\n          reporter = require(path.resolve(reporterName));\n        } catch (e) {\n          throw createInvalidReporterError(e.message, reporterName);\n        }\n      }\n    }\n\n    this._reporter = reporter;\n  }\n\n  this.options.reporterOption = reporterOptions; // alias option name is used in built-in reporters xunit/tap/progress\n\n  this.options.reporterOptions = reporterOptions;\n  return this;\n};\n/**\n * Sets test UI `name`, defaults to \"bdd\".\n *\n * @public\n * @see [CLI option](../#-ui-name-u-name)\n * @see [Interface DSLs](../#interfaces)\n * @param {string|Function} [ui=bdd] - Interface name or class.\n * @returns {Mocha} this\n * @chainable\n * @throws {Error} if requested interface cannot be loaded\n */\n\n\nMocha.prototype.ui = function (ui) {\n  var bindInterface;\n\n  if (typeof ui === 'function') {\n    bindInterface = ui;\n  } else {\n    ui = ui || 'bdd';\n    bindInterface = exports.interfaces[ui];\n\n    if (!bindInterface) {\n      try {\n        bindInterface = require(ui);\n      } catch (err) {\n        throw createInvalidInterfaceError(`invalid interface '${ui}'`, ui);\n      }\n    }\n  }\n\n  bindInterface(this.suite);\n  this.suite.on(EVENT_FILE_PRE_REQUIRE, function (context) {\n    currentContext = context;\n  });\n  return this;\n};\n/**\n * Loads `files` prior to execution. Does not support ES Modules.\n *\n * @description\n * The implementation relies on Node's `require` to execute\n * the test interface functions and will be subject to its cache.\n * Supports only CommonJS modules. To load ES modules, use Mocha#loadFilesAsync.\n *\n * @private\n * @see {@link Mocha#addFile}\n * @see {@link Mocha#run}\n * @see {@link Mocha#unloadFiles}\n * @see {@link Mocha#loadFilesAsync}\n * @param {Function} [fn] - Callback invoked upon completion.\n */\n\n\nMocha.prototype.loadFiles = function (fn) {\n  var self = this;\n  var suite = this.suite;\n  this.files.forEach(function (file) {\n    file = path.resolve(file);\n    suite.emit(EVENT_FILE_PRE_REQUIRE, global, file, self);\n    suite.emit(EVENT_FILE_REQUIRE, require(file), file, self);\n    suite.emit(EVENT_FILE_POST_REQUIRE, global, file, self);\n  });\n  fn && fn();\n};\n/**\n * Loads `files` prior to execution. Supports Node ES Modules.\n *\n * @description\n * The implementation relies on Node's `require` and `import` to execute\n * the test interface functions and will be subject to its cache.\n * Supports both CJS and ESM modules.\n *\n * @public\n * @see {@link Mocha#addFile}\n * @see {@link Mocha#run}\n * @see {@link Mocha#unloadFiles}\n * @returns {Promise}\n * @example\n *\n * // loads ESM (and CJS) test files asynchronously, then runs root suite\n * mocha.loadFilesAsync()\n *   .then(() => mocha.run(failures => process.exitCode = failures ? 1 : 0))\n *   .catch(() => process.exitCode = 1);\n */\n\n\nMocha.prototype.loadFilesAsync = function () {\n  var self = this;\n  var suite = this.suite;\n  this.lazyLoadFiles(true);\n  return esmUtils.loadFilesAsync(this.files, function (file) {\n    suite.emit(EVENT_FILE_PRE_REQUIRE, global, file, self);\n  }, function (file, resultModule) {\n    suite.emit(EVENT_FILE_REQUIRE, resultModule, file, self);\n    suite.emit(EVENT_FILE_POST_REQUIRE, global, file, self);\n  });\n};\n/**\n * Removes a previously loaded file from Node's `require` cache.\n *\n * @private\n * @static\n * @see {@link Mocha#unloadFiles}\n * @param {string} file - Pathname of file to be unloaded.\n */\n\n\nMocha.unloadFile = function (file) {\n  if (utils.isBrowser()) {\n    throw createUnsupportedError('unloadFile() is only suported in a Node.js environment');\n  }\n\n  return require('./nodejs/file-unloader').unloadFile(file);\n};\n/**\n * Unloads `files` from Node's `require` cache.\n *\n * @description\n * This allows required files to be \"freshly\" reloaded, providing the ability\n * to reuse a Mocha instance programmatically.\n * Note: does not clear ESM module files from the cache\n *\n * <strong>Intended for consumers &mdash; not used internally</strong>\n *\n * @public\n * @see {@link Mocha#run}\n * @returns {Mocha} this\n * @chainable\n */\n\n\nMocha.prototype.unloadFiles = function () {\n  if (this._state === mochaStates.DISPOSED) {\n    throw createMochaInstanceAlreadyDisposedError('Mocha instance is already disposed, it cannot be used again.', this._cleanReferencesAfterRun, this);\n  }\n\n  this.files.forEach(function (file) {\n    Mocha.unloadFile(file);\n  });\n  this._state = mochaStates.INIT;\n  return this;\n};\n/**\n * Sets `grep` filter after escaping RegExp special characters.\n *\n * @public\n * @see {@link Mocha#grep}\n * @param {string} str - Value to be converted to a regexp.\n * @returns {Mocha} this\n * @chainable\n * @example\n *\n * // Select tests whose full title begins with `\"foo\"` followed by a period\n * mocha.fgrep('foo.');\n */\n\n\nMocha.prototype.fgrep = function (str) {\n  if (!str) {\n    return this;\n  }\n\n  return this.grep(new RegExp(escapeRe(str)));\n};\n/**\n * @summary\n * Sets `grep` filter used to select specific tests for execution.\n *\n * @description\n * If `re` is a regexp-like string, it will be converted to regexp.\n * The regexp is tested against the full title of each test (i.e., the\n * name of the test preceded by titles of each its ancestral suites).\n * As such, using an <em>exact-match</em> fixed pattern against the\n * test name itself will not yield any matches.\n * <br>\n * <strong>Previous filter value will be overwritten on each call!</strong>\n *\n * @public\n * @see [CLI option](../#-grep-regexp-g-regexp)\n * @see {@link Mocha#fgrep}\n * @see {@link Mocha#invert}\n * @param {RegExp|String} re - Regular expression used to select tests.\n * @return {Mocha} this\n * @chainable\n * @example\n *\n * // Select tests whose full title contains `\"match\"`, ignoring case\n * mocha.grep(/match/i);\n * @example\n *\n * // Same as above but with regexp-like string argument\n * mocha.grep('/match/i');\n * @example\n *\n * // ## Anti-example\n * // Given embedded test `it('only-this-test')`...\n * mocha.grep('/^only-this-test$/');    // NO! Use `.only()` to do this!\n */\n\n\nMocha.prototype.grep = function (re) {\n  if (utils.isString(re)) {\n    // extract args if it's regex-like, i.e: [string, pattern, flag]\n    var arg = re.match(/^\\/(.*)\\/([gimy]{0,4})$|.*/);\n    this.options.grep = new RegExp(arg[1] || arg[0], arg[2]);\n  } else {\n    this.options.grep = re;\n  }\n\n  return this;\n};\n/**\n * Inverts `grep` matches.\n *\n * @public\n * @see {@link Mocha#grep}\n * @return {Mocha} this\n * @chainable\n * @example\n *\n * // Select tests whose full title does *not* contain `\"match\"`, ignoring case\n * mocha.grep(/match/i).invert();\n */\n\n\nMocha.prototype.invert = function () {\n  this.options.invert = true;\n  return this;\n};\n/**\n * Enables or disables checking for global variables leaked while running tests.\n *\n * @public\n * @see [CLI option](../#-check-leaks)\n * @param {boolean} [checkLeaks=true] - Whether to check for global variable leaks.\n * @return {Mocha} this\n * @chainable\n */\n\n\nMocha.prototype.checkLeaks = function (checkLeaks) {\n  this.options.checkLeaks = checkLeaks !== false;\n  return this;\n};\n/**\n * Enables or disables whether or not to dispose after each test run.\n * Disable this to ensure you can run the test suite multiple times.\n * If disabled, be sure to dispose mocha when you're done to prevent memory leaks.\n * @public\n * @see {@link Mocha#dispose}\n * @param {boolean} cleanReferencesAfterRun\n * @return {Mocha} this\n * @chainable\n */\n\n\nMocha.prototype.cleanReferencesAfterRun = function (cleanReferencesAfterRun) {\n  this._cleanReferencesAfterRun = cleanReferencesAfterRun !== false;\n  return this;\n};\n/**\n * Manually dispose this mocha instance. Mark this instance as `disposed` and unable to run more tests.\n * It also removes function references to tests functions and hooks, so variables trapped in closures can be cleaned by the garbage collector.\n * @public\n */\n\n\nMocha.prototype.dispose = function () {\n  if (this._state === mochaStates.RUNNING) {\n    throw createMochaInstanceAlreadyRunningError('Cannot dispose while the mocha instance is still running tests.');\n  }\n\n  this.unloadFiles();\n  this._previousRunner && this._previousRunner.dispose();\n  this.suite.dispose();\n  this._state = mochaStates.DISPOSED;\n};\n/**\n * Displays full stack trace upon test failure.\n *\n * @public\n * @see [CLI option](../#-full-trace)\n * @param {boolean} [fullTrace=true] - Whether to print full stacktrace upon failure.\n * @return {Mocha} this\n * @chainable\n */\n\n\nMocha.prototype.fullTrace = function (fullTrace) {\n  this.options.fullTrace = fullTrace !== false;\n  return this;\n};\n/**\n * Enables desktop notification support if prerequisite software installed.\n *\n * @public\n * @see [CLI option](../#-growl-g)\n * @return {Mocha} this\n * @chainable\n */\n\n\nMocha.prototype.growl = function () {\n  this.options.growl = this.isGrowlCapable();\n\n  if (!this.options.growl) {\n    var detail = utils.isBrowser() ? 'notification support not available in this browser...' : 'notification support prerequisites not installed...';\n    console.error(detail + ' cannot enable!');\n  }\n\n  return this;\n};\n/**\n * @summary\n * Determines if Growl support seems likely.\n *\n * @description\n * <strong>Not available when run in browser.</strong>\n *\n * @private\n * @see {@link Growl#isCapable}\n * @see {@link Mocha#growl}\n * @return {boolean} whether Growl support can be expected\n */\n\n\nMocha.prototype.isGrowlCapable = growl.isCapable;\n/**\n * Implements desktop notifications using a pseudo-reporter.\n *\n * @private\n * @see {@link Mocha#growl}\n * @see {@link Growl#notify}\n * @param {Runner} runner - Runner instance.\n */\n\nMocha.prototype._growl = growl.notify;\n/**\n * Specifies whitelist of variable names to be expected in global scope.\n *\n * @public\n * @see [CLI option](../#-global-variable-name)\n * @see {@link Mocha#checkLeaks}\n * @param {String[]|String} global - Accepted global variable name(s).\n * @return {Mocha} this\n * @chainable\n * @example\n *\n * // Specify variables to be expected in global scope\n * mocha.global(['jQuery', 'MyLib']);\n */\n\nMocha.prototype.global = function (global) {\n  this.options.global = (this.options.global || []).concat(global).filter(Boolean).filter(function (elt, idx, arr) {\n    return arr.indexOf(elt) === idx;\n  });\n  return this;\n}; // for backwards compability, 'globals' is an alias of 'global'\n\n\nMocha.prototype.globals = Mocha.prototype.global;\n/**\n * Enables or disables TTY color output by screen-oriented reporters.\n *\n * @public\n * @see [CLI option](../#-color-c-colors)\n * @param {boolean} [color=true] - Whether to enable color output.\n * @return {Mocha} this\n * @chainable\n */\n\nMocha.prototype.color = function (color) {\n  this.options.color = color !== false;\n  return this;\n};\n/**\n * Enables or disables reporter to use inline diffs (rather than +/-)\n * in test failure output.\n *\n * @public\n * @see [CLI option](../#-inline-diffs)\n * @param {boolean} [inlineDiffs=true] - Whether to use inline diffs.\n * @return {Mocha} this\n * @chainable\n */\n\n\nMocha.prototype.inlineDiffs = function (inlineDiffs) {\n  this.options.inlineDiffs = inlineDiffs !== false;\n  return this;\n};\n/**\n * Enables or disables reporter to include diff in test failure output.\n *\n * @public\n * @see [CLI option](../#-diff)\n * @param {boolean} [diff=true] - Whether to show diff on failure.\n * @return {Mocha} this\n * @chainable\n */\n\n\nMocha.prototype.diff = function (diff) {\n  this.options.diff = diff !== false;\n  return this;\n};\n/**\n * @summary\n * Sets timeout threshold value.\n *\n * @description\n * A string argument can use shorthand (such as \"2s\") and will be converted.\n * If the value is `0`, timeouts will be disabled.\n *\n * @public\n * @see [CLI option](../#-timeout-ms-t-ms)\n * @see [Timeouts](../#timeouts)\n * @param {number|string} msecs - Timeout threshold value.\n * @return {Mocha} this\n * @chainable\n * @example\n *\n * // Sets timeout to one second\n * mocha.timeout(1000);\n * @example\n *\n * // Same as above but using string argument\n * mocha.timeout('1s');\n */\n\n\nMocha.prototype.timeout = function (msecs) {\n  this.suite.timeout(msecs);\n  return this;\n};\n/**\n * Sets the number of times to retry failed tests.\n *\n * @public\n * @see [CLI option](../#-retries-n)\n * @see [Retry Tests](../#retry-tests)\n * @param {number} retry - Number of times to retry failed tests.\n * @return {Mocha} this\n * @chainable\n * @example\n *\n * // Allow any failed test to retry one more time\n * mocha.retries(1);\n */\n\n\nMocha.prototype.retries = function (retry) {\n  this.suite.retries(retry);\n  return this;\n};\n/**\n * Sets slowness threshold value.\n *\n * @public\n * @see [CLI option](../#-slow-ms-s-ms)\n * @param {number} msecs - Slowness threshold value.\n * @return {Mocha} this\n * @chainable\n * @example\n *\n * // Sets \"slow\" threshold to half a second\n * mocha.slow(500);\n * @example\n *\n * // Same as above but using string argument\n * mocha.slow('0.5s');\n */\n\n\nMocha.prototype.slow = function (msecs) {\n  this.suite.slow(msecs);\n  return this;\n};\n/**\n * Forces all tests to either accept a `done` callback or return a promise.\n *\n * @public\n * @see [CLI option](../#-async-only-a)\n * @param {boolean} [asyncOnly=true] - Whether to force `done` callback or promise.\n * @return {Mocha} this\n * @chainable\n */\n\n\nMocha.prototype.asyncOnly = function (asyncOnly) {\n  this.options.asyncOnly = asyncOnly !== false;\n  return this;\n};\n/**\n * Disables syntax highlighting (in browser).\n *\n * @public\n * @return {Mocha} this\n * @chainable\n */\n\n\nMocha.prototype.noHighlighting = function () {\n  this.options.noHighlighting = true;\n  return this;\n};\n/**\n * Enables or disables uncaught errors to propagate.\n *\n * @public\n * @see [CLI option](../#-allow-uncaught)\n * @param {boolean} [allowUncaught=true] - Whether to propagate uncaught errors.\n * @return {Mocha} this\n * @chainable\n */\n\n\nMocha.prototype.allowUncaught = function (allowUncaught) {\n  this.options.allowUncaught = allowUncaught !== false;\n  return this;\n};\n/**\n * @summary\n * Delays root suite execution.\n *\n * @description\n * Used to perform async operations before any suites are run.\n *\n * @public\n * @see [delayed root suite](../#delayed-root-suite)\n * @returns {Mocha} this\n * @chainable\n */\n\n\nMocha.prototype.delay = function delay() {\n  this.options.delay = true;\n  return this;\n};\n/**\n * Enables or disables running tests in dry-run mode.\n *\n * @public\n * @see [CLI option](../#-dry-run)\n * @param {boolean} [dryRun=true] - Whether to activate dry-run mode.\n * @return {Mocha} this\n * @chainable\n */\n\n\nMocha.prototype.dryRun = function (dryRun) {\n  this.options.dryRun = dryRun !== false;\n  return this;\n};\n/**\n * Fails test run if no tests encountered with exit-code 1.\n *\n * @public\n * @see [CLI option](../#-fail-zero)\n * @param {boolean} [failZero=true] - Whether to fail test run.\n * @return {Mocha} this\n * @chainable\n */\n\n\nMocha.prototype.failZero = function (failZero) {\n  this.options.failZero = failZero !== false;\n  return this;\n};\n/**\n * Causes tests marked `only` to fail the suite.\n *\n * @public\n * @see [CLI option](../#-forbid-only)\n * @param {boolean} [forbidOnly=true] - Whether tests marked `only` fail the suite.\n * @returns {Mocha} this\n * @chainable\n */\n\n\nMocha.prototype.forbidOnly = function (forbidOnly) {\n  this.options.forbidOnly = forbidOnly !== false;\n  return this;\n};\n/**\n * Causes pending tests and tests marked `skip` to fail the suite.\n *\n * @public\n * @see [CLI option](../#-forbid-pending)\n * @param {boolean} [forbidPending=true] - Whether pending tests fail the suite.\n * @returns {Mocha} this\n * @chainable\n */\n\n\nMocha.prototype.forbidPending = function (forbidPending) {\n  this.options.forbidPending = forbidPending !== false;\n  return this;\n};\n/**\n * Throws an error if mocha is in the wrong state to be able to transition to a \"running\" state.\n * @private\n */\n\n\nMocha.prototype._guardRunningStateTransition = function () {\n  if (this._state === mochaStates.RUNNING) {\n    throw createMochaInstanceAlreadyRunningError('Mocha instance is currently running tests, cannot start a next test run until this one is done', this);\n  }\n\n  if (this._state === mochaStates.DISPOSED || this._state === mochaStates.REFERENCES_CLEANED) {\n    throw createMochaInstanceAlreadyDisposedError('Mocha instance is already disposed, cannot start a new test run. Please create a new mocha instance. Be sure to set disable `cleanReferencesAfterRun` when you want to reuse the same mocha instance for multiple test runs.', this._cleanReferencesAfterRun, this);\n  }\n};\n/**\n * Mocha version as specified by \"package.json\".\n *\n * @name Mocha#version\n * @type string\n * @readonly\n */\n\n\nObject.defineProperty(Mocha.prototype, 'version', {\n  value: require('../package.json').version,\n  configurable: false,\n  enumerable: true,\n  writable: false\n});\n/**\n * Callback to be invoked when test execution is complete.\n *\n * @private\n * @callback DoneCB\n * @param {number} failures - Number of failures that occurred.\n */\n\n/**\n * Runs root suite and invokes `fn()` when complete.\n *\n * @description\n * To run tests multiple times (or to run tests in files that are\n * already in the `require` cache), make sure to clear them from\n * the cache first!\n *\n * @public\n * @see {@link Mocha#unloadFiles}\n * @see {@link Runner#run}\n * @param {DoneCB} [fn] - Callback invoked when test execution completed.\n * @returns {Runner} runner instance\n * @example\n *\n * // exit with non-zero status if there were test failures\n * mocha.run(failures => process.exitCode = failures ? 1 : 0);\n */\n\nMocha.prototype.run = function (fn) {\n  this._guardRunningStateTransition();\n\n  this._state = mochaStates.RUNNING;\n\n  if (this._previousRunner) {\n    this._previousRunner.dispose();\n\n    this.suite.reset();\n  }\n\n  if (this.files.length && !this._lazyLoadFiles) {\n    this.loadFiles();\n  }\n\n  var suite = this.suite;\n  var options = this.options;\n  options.files = this.files;\n  const runner = new this._runnerClass(suite, {\n    cleanReferencesAfterRun: this._cleanReferencesAfterRun,\n    delay: options.delay,\n    dryRun: options.dryRun,\n    failZero: options.failZero\n  });\n  createStatsCollector(runner);\n  var reporter = new this._reporter(runner, options);\n  runner.checkLeaks = options.checkLeaks === true;\n  runner.fullStackTrace = options.fullTrace;\n  runner.asyncOnly = options.asyncOnly;\n  runner.allowUncaught = options.allowUncaught;\n  runner.forbidOnly = options.forbidOnly;\n  runner.forbidPending = options.forbidPending;\n\n  if (options.grep) {\n    runner.grep(options.grep, options.invert);\n  }\n\n  if (options.global) {\n    runner.globals(options.global);\n  }\n\n  if (options.growl) {\n    this._growl(runner);\n  }\n\n  if (options.color !== undefined) {\n    exports.reporters.Base.useColors = options.color;\n  }\n\n  exports.reporters.Base.inlineDiffs = options.inlineDiffs;\n  exports.reporters.Base.hideDiff = !options.diff;\n\n  const done = failures => {\n    this._previousRunner = runner;\n    this._state = this._cleanReferencesAfterRun ? mochaStates.REFERENCES_CLEANED : mochaStates.INIT;\n    fn = fn || utils.noop;\n\n    if (typeof reporter.done === 'function') {\n      reporter.done(failures, fn);\n    } else {\n      fn(failures);\n    }\n  };\n\n  const runAsync = async runner => {\n    const context = this.options.enableGlobalSetup && this.hasGlobalSetupFixtures() ? await this.runGlobalSetup(runner) : {};\n    const failureCount = await runner.runAsync({\n      files: this.files,\n      options\n    });\n\n    if (this.options.enableGlobalTeardown && this.hasGlobalTeardownFixtures()) {\n      await this.runGlobalTeardown(runner, {\n        context\n      });\n    }\n\n    return failureCount;\n  }; // no \"catch\" here is intentional. errors coming out of\n  // Runner#run are considered uncaught/unhandled and caught\n  // by the `process` event listeners.\n  // also: returning anything other than `runner` would be a breaking\n  // change\n\n\n  runAsync(runner).then(done);\n  return runner;\n};\n/**\n * Assigns hooks to the root suite\n * @param {MochaRootHookObject} [hooks] - Hooks to assign to root suite\n * @chainable\n */\n\n\nMocha.prototype.rootHooks = function rootHooks() {\n  let {\n    beforeAll = [],\n    beforeEach = [],\n    afterAll = [],\n    afterEach = []\n  } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  beforeAll = utils.castArray(beforeAll);\n  beforeEach = utils.castArray(beforeEach);\n  afterAll = utils.castArray(afterAll);\n  afterEach = utils.castArray(afterEach);\n  beforeAll.forEach(hook => {\n    this.suite.beforeAll(hook);\n  });\n  beforeEach.forEach(hook => {\n    this.suite.beforeEach(hook);\n  });\n  afterAll.forEach(hook => {\n    this.suite.afterAll(hook);\n  });\n  afterEach.forEach(hook => {\n    this.suite.afterEach(hook);\n  });\n  return this;\n};\n/**\n * Toggles parallel mode.\n *\n * Must be run before calling {@link Mocha#run}. Changes the `Runner` class to\n * use; also enables lazy file loading if not already done so.\n *\n * Warning: when passed `false` and lazy loading has been enabled _via any means_ (including calling `parallelMode(true)`), this method will _not_ disable lazy loading. Lazy loading is a prerequisite for parallel\n * mode, but parallel mode is _not_ a prerequisite for lazy loading!\n * @param {boolean} [enable] - If `true`, enable; otherwise disable.\n * @throws If run in browser\n * @throws If Mocha not in `INIT` state\n * @returns {Mocha}\n * @chainable\n * @public\n */\n\n\nMocha.prototype.parallelMode = function parallelMode() {\n  let enable = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n\n  if (utils.isBrowser()) {\n    throw createUnsupportedError('parallel mode is only supported in Node.js');\n  }\n\n  const parallel = Boolean(enable);\n\n  if (parallel === this.options.parallel && this._lazyLoadFiles && this._runnerClass !== exports.Runner) {\n    return this;\n  }\n\n  if (this._state !== mochaStates.INIT) {\n    throw createUnsupportedError('cannot change parallel mode after having called run()');\n  }\n\n  this.options.parallel = parallel; // swap Runner class\n\n  this._runnerClass = parallel ? require('./nodejs/parallel-buffered-runner') : exports.Runner; // lazyLoadFiles may have been set `true` otherwise (for ESM loading),\n  // so keep `true` if so.\n\n  return this.lazyLoadFiles(this._lazyLoadFiles || parallel);\n};\n/**\n * Disables implicit call to {@link Mocha#loadFiles} in {@link Mocha#run}. This\n * setting is used by watch mode, parallel mode, and for loading ESM files.\n * @todo This should throw if we've already loaded files; such behavior\n * necessitates adding a new state.\n * @param {boolean} [enable] - If `true`, disable eager loading of files in\n * {@link Mocha#run}\n * @chainable\n * @public\n */\n\n\nMocha.prototype.lazyLoadFiles = function lazyLoadFiles(enable) {\n  this._lazyLoadFiles = enable === true;\n  debug('set lazy load to %s', enable);\n  return this;\n};\n/**\n * Configures one or more global setup fixtures.\n *\n * If given no parameters, _unsets_ any previously-set fixtures.\n * @chainable\n * @public\n * @param {MochaGlobalFixture|MochaGlobalFixture[]} [setupFns] - Global setup fixture(s)\n * @returns {Mocha}\n */\n\n\nMocha.prototype.globalSetup = function globalSetup() {\n  let setupFns = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  setupFns = utils.castArray(setupFns);\n  this.options.globalSetup = setupFns;\n  debug('configured %d global setup functions', setupFns.length);\n  return this;\n};\n/**\n * Configures one or more global teardown fixtures.\n *\n * If given no parameters, _unsets_ any previously-set fixtures.\n * @chainable\n * @public\n * @param {MochaGlobalFixture|MochaGlobalFixture[]} [teardownFns] - Global teardown fixture(s)\n * @returns {Mocha}\n */\n\n\nMocha.prototype.globalTeardown = function globalTeardown() {\n  let teardownFns = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  teardownFns = utils.castArray(teardownFns);\n  this.options.globalTeardown = teardownFns;\n  debug('configured %d global teardown functions', teardownFns.length);\n  return this;\n};\n/**\n * Run any global setup fixtures sequentially, if any.\n *\n * This is _automatically called_ by {@link Mocha#run} _unless_ the `runGlobalSetup` option is `false`; see {@link Mocha#enableGlobalSetup}.\n *\n * The context object this function resolves with should be consumed by {@link Mocha#runGlobalTeardown}.\n * @param {object} [context] - Context object if already have one\n * @public\n * @returns {Promise<object>} Context object\n */\n\n\nMocha.prototype.runGlobalSetup = async function runGlobalSetup() {\n  let context = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const {\n    globalSetup\n  } = this.options;\n\n  if (globalSetup && globalSetup.length) {\n    debug('run(): global setup starting');\n    await this._runGlobalFixtures(globalSetup, context);\n    debug('run(): global setup complete');\n  }\n\n  return context;\n};\n/**\n * Run any global teardown fixtures sequentially, if any.\n *\n * This is _automatically called_ by {@link Mocha#run} _unless_ the `runGlobalTeardown` option is `false`; see {@link Mocha#enableGlobalTeardown}.\n *\n * Should be called with context object returned by {@link Mocha#runGlobalSetup}, if applicable.\n * @param {object} [context] - Context object if already have one\n * @public\n * @returns {Promise<object>} Context object\n */\n\n\nMocha.prototype.runGlobalTeardown = async function runGlobalTeardown() {\n  let context = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const {\n    globalTeardown\n  } = this.options;\n\n  if (globalTeardown && globalTeardown.length) {\n    debug('run(): global teardown starting');\n    await this._runGlobalFixtures(globalTeardown, context);\n  }\n\n  debug('run(): global teardown complete');\n  return context;\n};\n/**\n * Run global fixtures sequentially with context `context`\n * @private\n * @param {MochaGlobalFixture[]} [fixtureFns] - Fixtures to run\n * @param {object} [context] - context object\n * @returns {Promise<object>} context object\n */\n\n\nMocha.prototype._runGlobalFixtures = async function _runGlobalFixtures() {\n  let fixtureFns = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  let context = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  for await (const fixtureFn of fixtureFns) {\n    await fixtureFn.call(context);\n  }\n\n  return context;\n};\n/**\n * Toggle execution of any global setup fixture(s)\n *\n * @chainable\n * @public\n * @param {boolean } [enabled=true] - If `false`, do not run global setup fixture\n * @returns {Mocha}\n */\n\n\nMocha.prototype.enableGlobalSetup = function enableGlobalSetup() {\n  let enabled = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n  this.options.enableGlobalSetup = Boolean(enabled);\n  return this;\n};\n/**\n * Toggle execution of any global teardown fixture(s)\n *\n * @chainable\n * @public\n * @param {boolean } [enabled=true] - If `false`, do not run global teardown fixture\n * @returns {Mocha}\n */\n\n\nMocha.prototype.enableGlobalTeardown = function enableGlobalTeardown() {\n  let enabled = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n  this.options.enableGlobalTeardown = Boolean(enabled);\n  return this;\n};\n/**\n * Returns `true` if one or more global setup fixtures have been supplied.\n * @public\n * @returns {boolean}\n */\n\n\nMocha.prototype.hasGlobalSetupFixtures = function hasGlobalSetupFixtures() {\n  return Boolean(this.options.globalSetup.length);\n};\n/**\n * Returns `true` if one or more global teardown fixtures have been supplied.\n * @public\n * @returns {boolean}\n */\n\n\nMocha.prototype.hasGlobalTeardownFixtures = function hasGlobalTeardownFixtures() {\n  return Boolean(this.options.globalTeardown.length);\n};\n/**\n * An alternative way to define root hooks that works with parallel runs.\n * @typedef {Object} MochaRootHookObject\n * @property {Function|Function[]} [beforeAll] - \"Before all\" hook(s)\n * @property {Function|Function[]} [beforeEach] - \"Before each\" hook(s)\n * @property {Function|Function[]} [afterAll] - \"After all\" hook(s)\n * @property {Function|Function[]} [afterEach] - \"After each\" hook(s)\n */\n\n/**\n * An function that returns a {@link MochaRootHookObject}, either sync or async.\n   @callback MochaRootHookFunction\n * @returns {MochaRootHookObject|Promise<MochaRootHookObject>}\n */\n\n/**\n * A function that's invoked _once_ which is either sync or async.\n * Can be a \"teardown\" or \"setup\".  These will all share the same context.\n * @callback MochaGlobalFixture\n * @returns {void|Promise<void>}\n */\n\n/**\n * An object making up all necessary parts of a plugin loader and aggregator\n * @typedef {Object} PluginDefinition\n * @property {string} exportName - Named export to use\n * @property {string} [optionName] - Option name for Mocha constructor (use `exportName` if omitted)\n * @property {PluginValidator} [validate] - Validator function\n * @property {PluginFinalizer} [finalize] - Finalizer/aggregator function\n */\n\n/**\n * A (sync) function to assert a user-supplied plugin implementation is valid.\n *\n * Defined in a {@link PluginDefinition}.\n\n * @callback PluginValidator\n * @param {*} value - Value to check\n * @this {PluginDefinition}\n * @returns {void}\n */\n\n/**\n * A function to finalize plugins impls of a particular ilk\n * @callback PluginFinalizer\n * @param {Array<*>} impls - User-supplied implementations\n * @returns {Promise<*>|*}\n */","map":{"version":3,"names":["escapeRe","require","path","builtinReporters","growl","utils","mocharc","Suite","esmUtils","createStatsCollector","createInvalidReporterError","createInvalidInterfaceError","createMochaInstanceAlreadyDisposedError","createMochaInstanceAlreadyRunningError","createUnsupportedError","EVENT_FILE_PRE_REQUIRE","EVENT_FILE_POST_REQUIRE","EVENT_FILE_REQUIRE","constants","debug","exports","module","Mocha","mochaStates","defineConstants","INIT","RUNNING","REFERENCES_CLEANED","DISPOSED","isBrowser","paths","cwd","push","join","interfaces","reporters","Runnable","Context","Runner","Hook","Test","currentContext","afterEach","args","teardown","apply","after","suiteTeardown","beforeEach","setup","before","suiteSetup","describe","suite","only","skip","it","test","xdescribe","xit","run","options","files","_cleanReferencesAfterRun","_state","grep","fgrep","ui","reporter","reporterOption","reporterOptions","slow","global","timeout","retries","forEach","opt","rootHooks","_runnerClass","_lazyLoadFiles","isWorker","Boolean","globalSetup","globalTeardown","enableGlobalSetup","enableGlobalTeardown","parallel","jobs","parallelMode","prototype","bail","addFile","file","reporterName","_reporter","foundReporter","resolve","err","message","e","bindInterface","on","context","loadFiles","fn","self","emit","loadFilesAsync","lazyLoadFiles","resultModule","unloadFile","unloadFiles","str","RegExp","re","isString","arg","match","invert","checkLeaks","cleanReferencesAfterRun","dispose","_previousRunner","fullTrace","isGrowlCapable","detail","console","error","isCapable","_growl","notify","concat","filter","elt","idx","arr","indexOf","globals","color","inlineDiffs","diff","msecs","retry","asyncOnly","noHighlighting","allowUncaught","delay","dryRun","failZero","forbidOnly","forbidPending","_guardRunningStateTransition","Object","defineProperty","value","version","configurable","enumerable","writable","reset","length","runner","fullStackTrace","undefined","Base","useColors","hideDiff","done","failures","noop","runAsync","hasGlobalSetupFixtures","runGlobalSetup","failureCount","hasGlobalTeardownFixtures","runGlobalTeardown","then","beforeAll","afterAll","castArray","hook","enable","setupFns","teardownFns","_runGlobalFixtures","fixtureFns","fixtureFn","call","enabled"],"sources":["/Users/ja/Desktop/MyProjects/NalaSwap/webapp/nalaswap/node_modules/mocha/lib/mocha.js"],"sourcesContent":["'use strict';\n\n/*!\n * mocha\n * Copyright(c) 2011 TJ Holowaychuk <tj@vision-media.ca>\n * MIT Licensed\n */\n\nvar escapeRe = require('escape-string-regexp');\nvar path = require('path');\nvar builtinReporters = require('./reporters');\nvar growl = require('./nodejs/growl');\nvar utils = require('./utils');\nvar mocharc = require('./mocharc.json');\nvar Suite = require('./suite');\nvar esmUtils = require('./nodejs/esm-utils');\nvar createStatsCollector = require('./stats-collector');\nconst {\n  createInvalidReporterError,\n  createInvalidInterfaceError,\n  createMochaInstanceAlreadyDisposedError,\n  createMochaInstanceAlreadyRunningError,\n  createUnsupportedError\n} = require('./errors');\nconst {EVENT_FILE_PRE_REQUIRE, EVENT_FILE_POST_REQUIRE, EVENT_FILE_REQUIRE} =\n  Suite.constants;\nvar debug = require('debug')('mocha:mocha');\n\nexports = module.exports = Mocha;\n\n/**\n * A Mocha instance is a finite state machine.\n * These are the states it can be in.\n * @private\n */\nvar mochaStates = utils.defineConstants({\n  /**\n   * Initial state of the mocha instance\n   * @private\n   */\n  INIT: 'init',\n  /**\n   * Mocha instance is running tests\n   * @private\n   */\n  RUNNING: 'running',\n  /**\n   * Mocha instance is done running tests and references to test functions and hooks are cleaned.\n   * You can reset this state by unloading the test files.\n   * @private\n   */\n  REFERENCES_CLEANED: 'referencesCleaned',\n  /**\n   * Mocha instance is disposed and can no longer be used.\n   * @private\n   */\n  DISPOSED: 'disposed'\n});\n\n/**\n * To require local UIs and reporters when running in node.\n */\n\nif (!utils.isBrowser() && typeof module.paths !== 'undefined') {\n  var cwd = utils.cwd();\n  module.paths.push(cwd, path.join(cwd, 'node_modules'));\n}\n\n/**\n * Expose internals.\n * @private\n */\n\nexports.utils = utils;\nexports.interfaces = require('./interfaces');\n/**\n * @public\n * @memberof Mocha\n */\nexports.reporters = builtinReporters;\nexports.Runnable = require('./runnable');\nexports.Context = require('./context');\n/**\n *\n * @memberof Mocha\n */\nexports.Runner = require('./runner');\nexports.Suite = Suite;\nexports.Hook = require('./hook');\nexports.Test = require('./test');\n\nlet currentContext;\nexports.afterEach = function (...args) {\n  return (currentContext.afterEach || currentContext.teardown).apply(\n    this,\n    args\n  );\n};\nexports.after = function (...args) {\n  return (currentContext.after || currentContext.suiteTeardown).apply(\n    this,\n    args\n  );\n};\nexports.beforeEach = function (...args) {\n  return (currentContext.beforeEach || currentContext.setup).apply(this, args);\n};\nexports.before = function (...args) {\n  return (currentContext.before || currentContext.suiteSetup).apply(this, args);\n};\nexports.describe = function (...args) {\n  return (currentContext.describe || currentContext.suite).apply(this, args);\n};\nexports.describe.only = function (...args) {\n  return (currentContext.describe || currentContext.suite).only.apply(\n    this,\n    args\n  );\n};\nexports.describe.skip = function (...args) {\n  return (currentContext.describe || currentContext.suite).skip.apply(\n    this,\n    args\n  );\n};\nexports.it = function (...args) {\n  return (currentContext.it || currentContext.test).apply(this, args);\n};\nexports.it.only = function (...args) {\n  return (currentContext.it || currentContext.test).only.apply(this, args);\n};\nexports.it.skip = function (...args) {\n  return (currentContext.it || currentContext.test).skip.apply(this, args);\n};\nexports.xdescribe = exports.describe.skip;\nexports.xit = exports.it.skip;\nexports.setup = exports.beforeEach;\nexports.suiteSetup = exports.before;\nexports.suiteTeardown = exports.after;\nexports.suite = exports.describe;\nexports.teardown = exports.afterEach;\nexports.test = exports.it;\nexports.run = function (...args) {\n  return currentContext.run.apply(this, args);\n};\n\n/**\n * Constructs a new Mocha instance with `options`.\n *\n * @public\n * @class Mocha\n * @param {Object} [options] - Settings object.\n * @param {boolean} [options.allowUncaught] - Propagate uncaught errors?\n * @param {boolean} [options.asyncOnly] - Force `done` callback or promise?\n * @param {boolean} [options.bail] - Bail after first test failure?\n * @param {boolean} [options.checkLeaks] - Check for global variable leaks?\n * @param {boolean} [options.color] - Color TTY output from reporter?\n * @param {boolean} [options.delay] - Delay root suite execution?\n * @param {boolean} [options.diff] - Show diff on failure?\n * @param {boolean} [options.dryRun] - Report tests without running them?\n * @param {boolean} [options.failZero] - Fail test run if zero tests?\n * @param {string} [options.fgrep] - Test filter given string.\n * @param {boolean} [options.forbidOnly] - Tests marked `only` fail the suite?\n * @param {boolean} [options.forbidPending] - Pending tests fail the suite?\n * @param {boolean} [options.fullTrace] - Full stacktrace upon failure?\n * @param {string[]} [options.global] - Variables expected in global scope.\n * @param {RegExp|string} [options.grep] - Test filter given regular expression.\n * @param {boolean} [options.growl] - Enable desktop notifications?\n * @param {boolean} [options.inlineDiffs] - Display inline diffs?\n * @param {boolean} [options.invert] - Invert test filter matches?\n * @param {boolean} [options.noHighlighting] - Disable syntax highlighting?\n * @param {string|constructor} [options.reporter] - Reporter name or constructor.\n * @param {Object} [options.reporterOption] - Reporter settings object.\n * @param {number} [options.retries] - Number of times to retry failed tests.\n * @param {number} [options.slow] - Slow threshold value.\n * @param {number|string} [options.timeout] - Timeout threshold value.\n * @param {string} [options.ui] - Interface name.\n * @param {boolean} [options.parallel] - Run jobs in parallel.\n * @param {number} [options.jobs] - Max number of worker processes for parallel runs.\n * @param {MochaRootHookObject} [options.rootHooks] - Hooks to bootstrap the root suite with.\n * @param {string[]} [options.require] - Pathname of `rootHooks` plugin for parallel runs.\n * @param {boolean} [options.isWorker] - Should be `true` if `Mocha` process is running in a worker process.\n */\nfunction Mocha(options = {}) {\n  options = {...mocharc, ...options};\n  this.files = [];\n  this.options = options;\n  // root suite\n  this.suite = new exports.Suite('', new exports.Context(), true);\n  this._cleanReferencesAfterRun = true;\n  this._state = mochaStates.INIT;\n\n  this.grep(options.grep)\n    .fgrep(options.fgrep)\n    .ui(options.ui)\n    .reporter(\n      options.reporter,\n      options.reporterOption || options.reporterOptions // for backwards compability\n    )\n    .slow(options.slow)\n    .global(options.global);\n\n  // this guard exists because Suite#timeout does not consider `undefined` to be valid input\n  if (typeof options.timeout !== 'undefined') {\n    this.timeout(options.timeout === false ? 0 : options.timeout);\n  }\n\n  if ('retries' in options) {\n    this.retries(options.retries);\n  }\n\n  [\n    'allowUncaught',\n    'asyncOnly',\n    'bail',\n    'checkLeaks',\n    'color',\n    'delay',\n    'diff',\n    'dryRun',\n    'failZero',\n    'forbidOnly',\n    'forbidPending',\n    'fullTrace',\n    'growl',\n    'inlineDiffs',\n    'invert'\n  ].forEach(function (opt) {\n    if (options[opt]) {\n      this[opt]();\n    }\n  }, this);\n\n  if (options.rootHooks) {\n    this.rootHooks(options.rootHooks);\n  }\n\n  /**\n   * The class which we'll instantiate in {@link Mocha#run}.  Defaults to\n   * {@link Runner} in serial mode; changes in parallel mode.\n   * @memberof Mocha\n   * @private\n   */\n  this._runnerClass = exports.Runner;\n\n  /**\n   * Whether or not to call {@link Mocha#loadFiles} implicitly when calling\n   * {@link Mocha#run}.  If this is `true`, then it's up to the consumer to call\n   * {@link Mocha#loadFiles} _or_ {@link Mocha#loadFilesAsync}.\n   * @private\n   * @memberof Mocha\n   */\n  this._lazyLoadFiles = false;\n\n  /**\n   * It's useful for a Mocha instance to know if it's running in a worker process.\n   * We could derive this via other means, but it's helpful to have a flag to refer to.\n   * @memberof Mocha\n   * @private\n   */\n  this.isWorker = Boolean(options.isWorker);\n\n  this.globalSetup(options.globalSetup)\n    .globalTeardown(options.globalTeardown)\n    .enableGlobalSetup(options.enableGlobalSetup)\n    .enableGlobalTeardown(options.enableGlobalTeardown);\n\n  if (\n    options.parallel &&\n    (typeof options.jobs === 'undefined' || options.jobs > 1)\n  ) {\n    debug('attempting to enable parallel mode');\n    this.parallelMode(true);\n  }\n}\n\n/**\n * Enables or disables bailing on the first failure.\n *\n * @public\n * @see [CLI option](../#-bail-b)\n * @param {boolean} [bail=true] - Whether to bail on first error.\n * @returns {Mocha} this\n * @chainable\n */\nMocha.prototype.bail = function (bail) {\n  this.suite.bail(bail !== false);\n  return this;\n};\n\n/**\n * @summary\n * Adds `file` to be loaded for execution.\n *\n * @description\n * Useful for generic setup code that must be included within test suite.\n *\n * @public\n * @see [CLI option](../#-file-filedirectoryglob)\n * @param {string} file - Pathname of file to be loaded.\n * @returns {Mocha} this\n * @chainable\n */\nMocha.prototype.addFile = function (file) {\n  this.files.push(file);\n  return this;\n};\n\n/**\n * Sets reporter to `reporter`, defaults to \"spec\".\n *\n * @public\n * @see [CLI option](../#-reporter-name-r-name)\n * @see [Reporters](../#reporters)\n * @param {String|Function} reporterName - Reporter name or constructor.\n * @param {Object} [reporterOptions] - Options used to configure the reporter.\n * @returns {Mocha} this\n * @chainable\n * @throws {Error} if requested reporter cannot be loaded\n * @example\n *\n * // Use XUnit reporter and direct its output to file\n * mocha.reporter('xunit', { output: '/path/to/testspec.xunit.xml' });\n */\nMocha.prototype.reporter = function (reporterName, reporterOptions) {\n  if (typeof reporterName === 'function') {\n    this._reporter = reporterName;\n  } else {\n    reporterName = reporterName || 'spec';\n    var reporter;\n    // Try to load a built-in reporter.\n    if (builtinReporters[reporterName]) {\n      reporter = builtinReporters[reporterName];\n    }\n    // Try to load reporters from process.cwd() and node_modules\n    if (!reporter) {\n      let foundReporter;\n      try {\n        foundReporter = require.resolve(reporterName);\n        reporter = require(foundReporter);\n      } catch (err) {\n        if (foundReporter) {\n          throw createInvalidReporterError(err.message, foundReporter);\n        }\n        // Try to load reporters from a cwd-relative path\n        try {\n          reporter = require(path.resolve(reporterName));\n        } catch (e) {\n          throw createInvalidReporterError(e.message, reporterName);\n        }\n      }\n    }\n    this._reporter = reporter;\n  }\n  this.options.reporterOption = reporterOptions;\n  // alias option name is used in built-in reporters xunit/tap/progress\n  this.options.reporterOptions = reporterOptions;\n  return this;\n};\n\n/**\n * Sets test UI `name`, defaults to \"bdd\".\n *\n * @public\n * @see [CLI option](../#-ui-name-u-name)\n * @see [Interface DSLs](../#interfaces)\n * @param {string|Function} [ui=bdd] - Interface name or class.\n * @returns {Mocha} this\n * @chainable\n * @throws {Error} if requested interface cannot be loaded\n */\nMocha.prototype.ui = function (ui) {\n  var bindInterface;\n  if (typeof ui === 'function') {\n    bindInterface = ui;\n  } else {\n    ui = ui || 'bdd';\n    bindInterface = exports.interfaces[ui];\n    if (!bindInterface) {\n      try {\n        bindInterface = require(ui);\n      } catch (err) {\n        throw createInvalidInterfaceError(`invalid interface '${ui}'`, ui);\n      }\n    }\n  }\n  bindInterface(this.suite);\n\n  this.suite.on(EVENT_FILE_PRE_REQUIRE, function (context) {\n    currentContext = context;\n  });\n\n  return this;\n};\n\n/**\n * Loads `files` prior to execution. Does not support ES Modules.\n *\n * @description\n * The implementation relies on Node's `require` to execute\n * the test interface functions and will be subject to its cache.\n * Supports only CommonJS modules. To load ES modules, use Mocha#loadFilesAsync.\n *\n * @private\n * @see {@link Mocha#addFile}\n * @see {@link Mocha#run}\n * @see {@link Mocha#unloadFiles}\n * @see {@link Mocha#loadFilesAsync}\n * @param {Function} [fn] - Callback invoked upon completion.\n */\nMocha.prototype.loadFiles = function (fn) {\n  var self = this;\n  var suite = this.suite;\n  this.files.forEach(function (file) {\n    file = path.resolve(file);\n    suite.emit(EVENT_FILE_PRE_REQUIRE, global, file, self);\n    suite.emit(EVENT_FILE_REQUIRE, require(file), file, self);\n    suite.emit(EVENT_FILE_POST_REQUIRE, global, file, self);\n  });\n  fn && fn();\n};\n\n/**\n * Loads `files` prior to execution. Supports Node ES Modules.\n *\n * @description\n * The implementation relies on Node's `require` and `import` to execute\n * the test interface functions and will be subject to its cache.\n * Supports both CJS and ESM modules.\n *\n * @public\n * @see {@link Mocha#addFile}\n * @see {@link Mocha#run}\n * @see {@link Mocha#unloadFiles}\n * @returns {Promise}\n * @example\n *\n * // loads ESM (and CJS) test files asynchronously, then runs root suite\n * mocha.loadFilesAsync()\n *   .then(() => mocha.run(failures => process.exitCode = failures ? 1 : 0))\n *   .catch(() => process.exitCode = 1);\n */\nMocha.prototype.loadFilesAsync = function () {\n  var self = this;\n  var suite = this.suite;\n  this.lazyLoadFiles(true);\n\n  return esmUtils.loadFilesAsync(\n    this.files,\n    function (file) {\n      suite.emit(EVENT_FILE_PRE_REQUIRE, global, file, self);\n    },\n    function (file, resultModule) {\n      suite.emit(EVENT_FILE_REQUIRE, resultModule, file, self);\n      suite.emit(EVENT_FILE_POST_REQUIRE, global, file, self);\n    }\n  );\n};\n\n/**\n * Removes a previously loaded file from Node's `require` cache.\n *\n * @private\n * @static\n * @see {@link Mocha#unloadFiles}\n * @param {string} file - Pathname of file to be unloaded.\n */\nMocha.unloadFile = function (file) {\n  if (utils.isBrowser()) {\n    throw createUnsupportedError(\n      'unloadFile() is only suported in a Node.js environment'\n    );\n  }\n  return require('./nodejs/file-unloader').unloadFile(file);\n};\n\n/**\n * Unloads `files` from Node's `require` cache.\n *\n * @description\n * This allows required files to be \"freshly\" reloaded, providing the ability\n * to reuse a Mocha instance programmatically.\n * Note: does not clear ESM module files from the cache\n *\n * <strong>Intended for consumers &mdash; not used internally</strong>\n *\n * @public\n * @see {@link Mocha#run}\n * @returns {Mocha} this\n * @chainable\n */\nMocha.prototype.unloadFiles = function () {\n  if (this._state === mochaStates.DISPOSED) {\n    throw createMochaInstanceAlreadyDisposedError(\n      'Mocha instance is already disposed, it cannot be used again.',\n      this._cleanReferencesAfterRun,\n      this\n    );\n  }\n\n  this.files.forEach(function (file) {\n    Mocha.unloadFile(file);\n  });\n  this._state = mochaStates.INIT;\n  return this;\n};\n\n/**\n * Sets `grep` filter after escaping RegExp special characters.\n *\n * @public\n * @see {@link Mocha#grep}\n * @param {string} str - Value to be converted to a regexp.\n * @returns {Mocha} this\n * @chainable\n * @example\n *\n * // Select tests whose full title begins with `\"foo\"` followed by a period\n * mocha.fgrep('foo.');\n */\nMocha.prototype.fgrep = function (str) {\n  if (!str) {\n    return this;\n  }\n  return this.grep(new RegExp(escapeRe(str)));\n};\n\n/**\n * @summary\n * Sets `grep` filter used to select specific tests for execution.\n *\n * @description\n * If `re` is a regexp-like string, it will be converted to regexp.\n * The regexp is tested against the full title of each test (i.e., the\n * name of the test preceded by titles of each its ancestral suites).\n * As such, using an <em>exact-match</em> fixed pattern against the\n * test name itself will not yield any matches.\n * <br>\n * <strong>Previous filter value will be overwritten on each call!</strong>\n *\n * @public\n * @see [CLI option](../#-grep-regexp-g-regexp)\n * @see {@link Mocha#fgrep}\n * @see {@link Mocha#invert}\n * @param {RegExp|String} re - Regular expression used to select tests.\n * @return {Mocha} this\n * @chainable\n * @example\n *\n * // Select tests whose full title contains `\"match\"`, ignoring case\n * mocha.grep(/match/i);\n * @example\n *\n * // Same as above but with regexp-like string argument\n * mocha.grep('/match/i');\n * @example\n *\n * // ## Anti-example\n * // Given embedded test `it('only-this-test')`...\n * mocha.grep('/^only-this-test$/');    // NO! Use `.only()` to do this!\n */\nMocha.prototype.grep = function (re) {\n  if (utils.isString(re)) {\n    // extract args if it's regex-like, i.e: [string, pattern, flag]\n    var arg = re.match(/^\\/(.*)\\/([gimy]{0,4})$|.*/);\n    this.options.grep = new RegExp(arg[1] || arg[0], arg[2]);\n  } else {\n    this.options.grep = re;\n  }\n  return this;\n};\n\n/**\n * Inverts `grep` matches.\n *\n * @public\n * @see {@link Mocha#grep}\n * @return {Mocha} this\n * @chainable\n * @example\n *\n * // Select tests whose full title does *not* contain `\"match\"`, ignoring case\n * mocha.grep(/match/i).invert();\n */\nMocha.prototype.invert = function () {\n  this.options.invert = true;\n  return this;\n};\n\n/**\n * Enables or disables checking for global variables leaked while running tests.\n *\n * @public\n * @see [CLI option](../#-check-leaks)\n * @param {boolean} [checkLeaks=true] - Whether to check for global variable leaks.\n * @return {Mocha} this\n * @chainable\n */\nMocha.prototype.checkLeaks = function (checkLeaks) {\n  this.options.checkLeaks = checkLeaks !== false;\n  return this;\n};\n\n/**\n * Enables or disables whether or not to dispose after each test run.\n * Disable this to ensure you can run the test suite multiple times.\n * If disabled, be sure to dispose mocha when you're done to prevent memory leaks.\n * @public\n * @see {@link Mocha#dispose}\n * @param {boolean} cleanReferencesAfterRun\n * @return {Mocha} this\n * @chainable\n */\nMocha.prototype.cleanReferencesAfterRun = function (cleanReferencesAfterRun) {\n  this._cleanReferencesAfterRun = cleanReferencesAfterRun !== false;\n  return this;\n};\n\n/**\n * Manually dispose this mocha instance. Mark this instance as `disposed` and unable to run more tests.\n * It also removes function references to tests functions and hooks, so variables trapped in closures can be cleaned by the garbage collector.\n * @public\n */\nMocha.prototype.dispose = function () {\n  if (this._state === mochaStates.RUNNING) {\n    throw createMochaInstanceAlreadyRunningError(\n      'Cannot dispose while the mocha instance is still running tests.'\n    );\n  }\n  this.unloadFiles();\n  this._previousRunner && this._previousRunner.dispose();\n  this.suite.dispose();\n  this._state = mochaStates.DISPOSED;\n};\n\n/**\n * Displays full stack trace upon test failure.\n *\n * @public\n * @see [CLI option](../#-full-trace)\n * @param {boolean} [fullTrace=true] - Whether to print full stacktrace upon failure.\n * @return {Mocha} this\n * @chainable\n */\nMocha.prototype.fullTrace = function (fullTrace) {\n  this.options.fullTrace = fullTrace !== false;\n  return this;\n};\n\n/**\n * Enables desktop notification support if prerequisite software installed.\n *\n * @public\n * @see [CLI option](../#-growl-g)\n * @return {Mocha} this\n * @chainable\n */\nMocha.prototype.growl = function () {\n  this.options.growl = this.isGrowlCapable();\n  if (!this.options.growl) {\n    var detail = utils.isBrowser()\n      ? 'notification support not available in this browser...'\n      : 'notification support prerequisites not installed...';\n    console.error(detail + ' cannot enable!');\n  }\n  return this;\n};\n\n/**\n * @summary\n * Determines if Growl support seems likely.\n *\n * @description\n * <strong>Not available when run in browser.</strong>\n *\n * @private\n * @see {@link Growl#isCapable}\n * @see {@link Mocha#growl}\n * @return {boolean} whether Growl support can be expected\n */\nMocha.prototype.isGrowlCapable = growl.isCapable;\n\n/**\n * Implements desktop notifications using a pseudo-reporter.\n *\n * @private\n * @see {@link Mocha#growl}\n * @see {@link Growl#notify}\n * @param {Runner} runner - Runner instance.\n */\nMocha.prototype._growl = growl.notify;\n\n/**\n * Specifies whitelist of variable names to be expected in global scope.\n *\n * @public\n * @see [CLI option](../#-global-variable-name)\n * @see {@link Mocha#checkLeaks}\n * @param {String[]|String} global - Accepted global variable name(s).\n * @return {Mocha} this\n * @chainable\n * @example\n *\n * // Specify variables to be expected in global scope\n * mocha.global(['jQuery', 'MyLib']);\n */\nMocha.prototype.global = function (global) {\n  this.options.global = (this.options.global || [])\n    .concat(global)\n    .filter(Boolean)\n    .filter(function (elt, idx, arr) {\n      return arr.indexOf(elt) === idx;\n    });\n  return this;\n};\n// for backwards compability, 'globals' is an alias of 'global'\nMocha.prototype.globals = Mocha.prototype.global;\n\n/**\n * Enables or disables TTY color output by screen-oriented reporters.\n *\n * @public\n * @see [CLI option](../#-color-c-colors)\n * @param {boolean} [color=true] - Whether to enable color output.\n * @return {Mocha} this\n * @chainable\n */\nMocha.prototype.color = function (color) {\n  this.options.color = color !== false;\n  return this;\n};\n\n/**\n * Enables or disables reporter to use inline diffs (rather than +/-)\n * in test failure output.\n *\n * @public\n * @see [CLI option](../#-inline-diffs)\n * @param {boolean} [inlineDiffs=true] - Whether to use inline diffs.\n * @return {Mocha} this\n * @chainable\n */\nMocha.prototype.inlineDiffs = function (inlineDiffs) {\n  this.options.inlineDiffs = inlineDiffs !== false;\n  return this;\n};\n\n/**\n * Enables or disables reporter to include diff in test failure output.\n *\n * @public\n * @see [CLI option](../#-diff)\n * @param {boolean} [diff=true] - Whether to show diff on failure.\n * @return {Mocha} this\n * @chainable\n */\nMocha.prototype.diff = function (diff) {\n  this.options.diff = diff !== false;\n  return this;\n};\n\n/**\n * @summary\n * Sets timeout threshold value.\n *\n * @description\n * A string argument can use shorthand (such as \"2s\") and will be converted.\n * If the value is `0`, timeouts will be disabled.\n *\n * @public\n * @see [CLI option](../#-timeout-ms-t-ms)\n * @see [Timeouts](../#timeouts)\n * @param {number|string} msecs - Timeout threshold value.\n * @return {Mocha} this\n * @chainable\n * @example\n *\n * // Sets timeout to one second\n * mocha.timeout(1000);\n * @example\n *\n * // Same as above but using string argument\n * mocha.timeout('1s');\n */\nMocha.prototype.timeout = function (msecs) {\n  this.suite.timeout(msecs);\n  return this;\n};\n\n/**\n * Sets the number of times to retry failed tests.\n *\n * @public\n * @see [CLI option](../#-retries-n)\n * @see [Retry Tests](../#retry-tests)\n * @param {number} retry - Number of times to retry failed tests.\n * @return {Mocha} this\n * @chainable\n * @example\n *\n * // Allow any failed test to retry one more time\n * mocha.retries(1);\n */\nMocha.prototype.retries = function (retry) {\n  this.suite.retries(retry);\n  return this;\n};\n\n/**\n * Sets slowness threshold value.\n *\n * @public\n * @see [CLI option](../#-slow-ms-s-ms)\n * @param {number} msecs - Slowness threshold value.\n * @return {Mocha} this\n * @chainable\n * @example\n *\n * // Sets \"slow\" threshold to half a second\n * mocha.slow(500);\n * @example\n *\n * // Same as above but using string argument\n * mocha.slow('0.5s');\n */\nMocha.prototype.slow = function (msecs) {\n  this.suite.slow(msecs);\n  return this;\n};\n\n/**\n * Forces all tests to either accept a `done` callback or return a promise.\n *\n * @public\n * @see [CLI option](../#-async-only-a)\n * @param {boolean} [asyncOnly=true] - Whether to force `done` callback or promise.\n * @return {Mocha} this\n * @chainable\n */\nMocha.prototype.asyncOnly = function (asyncOnly) {\n  this.options.asyncOnly = asyncOnly !== false;\n  return this;\n};\n\n/**\n * Disables syntax highlighting (in browser).\n *\n * @public\n * @return {Mocha} this\n * @chainable\n */\nMocha.prototype.noHighlighting = function () {\n  this.options.noHighlighting = true;\n  return this;\n};\n\n/**\n * Enables or disables uncaught errors to propagate.\n *\n * @public\n * @see [CLI option](../#-allow-uncaught)\n * @param {boolean} [allowUncaught=true] - Whether to propagate uncaught errors.\n * @return {Mocha} this\n * @chainable\n */\nMocha.prototype.allowUncaught = function (allowUncaught) {\n  this.options.allowUncaught = allowUncaught !== false;\n  return this;\n};\n\n/**\n * @summary\n * Delays root suite execution.\n *\n * @description\n * Used to perform async operations before any suites are run.\n *\n * @public\n * @see [delayed root suite](../#delayed-root-suite)\n * @returns {Mocha} this\n * @chainable\n */\nMocha.prototype.delay = function delay() {\n  this.options.delay = true;\n  return this;\n};\n\n/**\n * Enables or disables running tests in dry-run mode.\n *\n * @public\n * @see [CLI option](../#-dry-run)\n * @param {boolean} [dryRun=true] - Whether to activate dry-run mode.\n * @return {Mocha} this\n * @chainable\n */\nMocha.prototype.dryRun = function (dryRun) {\n  this.options.dryRun = dryRun !== false;\n  return this;\n};\n\n/**\n * Fails test run if no tests encountered with exit-code 1.\n *\n * @public\n * @see [CLI option](../#-fail-zero)\n * @param {boolean} [failZero=true] - Whether to fail test run.\n * @return {Mocha} this\n * @chainable\n */\nMocha.prototype.failZero = function (failZero) {\n  this.options.failZero = failZero !== false;\n  return this;\n};\n\n/**\n * Causes tests marked `only` to fail the suite.\n *\n * @public\n * @see [CLI option](../#-forbid-only)\n * @param {boolean} [forbidOnly=true] - Whether tests marked `only` fail the suite.\n * @returns {Mocha} this\n * @chainable\n */\nMocha.prototype.forbidOnly = function (forbidOnly) {\n  this.options.forbidOnly = forbidOnly !== false;\n  return this;\n};\n\n/**\n * Causes pending tests and tests marked `skip` to fail the suite.\n *\n * @public\n * @see [CLI option](../#-forbid-pending)\n * @param {boolean} [forbidPending=true] - Whether pending tests fail the suite.\n * @returns {Mocha} this\n * @chainable\n */\nMocha.prototype.forbidPending = function (forbidPending) {\n  this.options.forbidPending = forbidPending !== false;\n  return this;\n};\n\n/**\n * Throws an error if mocha is in the wrong state to be able to transition to a \"running\" state.\n * @private\n */\nMocha.prototype._guardRunningStateTransition = function () {\n  if (this._state === mochaStates.RUNNING) {\n    throw createMochaInstanceAlreadyRunningError(\n      'Mocha instance is currently running tests, cannot start a next test run until this one is done',\n      this\n    );\n  }\n  if (\n    this._state === mochaStates.DISPOSED ||\n    this._state === mochaStates.REFERENCES_CLEANED\n  ) {\n    throw createMochaInstanceAlreadyDisposedError(\n      'Mocha instance is already disposed, cannot start a new test run. Please create a new mocha instance. Be sure to set disable `cleanReferencesAfterRun` when you want to reuse the same mocha instance for multiple test runs.',\n      this._cleanReferencesAfterRun,\n      this\n    );\n  }\n};\n\n/**\n * Mocha version as specified by \"package.json\".\n *\n * @name Mocha#version\n * @type string\n * @readonly\n */\nObject.defineProperty(Mocha.prototype, 'version', {\n  value: require('../package.json').version,\n  configurable: false,\n  enumerable: true,\n  writable: false\n});\n\n/**\n * Callback to be invoked when test execution is complete.\n *\n * @private\n * @callback DoneCB\n * @param {number} failures - Number of failures that occurred.\n */\n\n/**\n * Runs root suite and invokes `fn()` when complete.\n *\n * @description\n * To run tests multiple times (or to run tests in files that are\n * already in the `require` cache), make sure to clear them from\n * the cache first!\n *\n * @public\n * @see {@link Mocha#unloadFiles}\n * @see {@link Runner#run}\n * @param {DoneCB} [fn] - Callback invoked when test execution completed.\n * @returns {Runner} runner instance\n * @example\n *\n * // exit with non-zero status if there were test failures\n * mocha.run(failures => process.exitCode = failures ? 1 : 0);\n */\nMocha.prototype.run = function (fn) {\n  this._guardRunningStateTransition();\n  this._state = mochaStates.RUNNING;\n  if (this._previousRunner) {\n    this._previousRunner.dispose();\n    this.suite.reset();\n  }\n  if (this.files.length && !this._lazyLoadFiles) {\n    this.loadFiles();\n  }\n  var suite = this.suite;\n  var options = this.options;\n  options.files = this.files;\n  const runner = new this._runnerClass(suite, {\n    cleanReferencesAfterRun: this._cleanReferencesAfterRun,\n    delay: options.delay,\n    dryRun: options.dryRun,\n    failZero: options.failZero\n  });\n  createStatsCollector(runner);\n  var reporter = new this._reporter(runner, options);\n  runner.checkLeaks = options.checkLeaks === true;\n  runner.fullStackTrace = options.fullTrace;\n  runner.asyncOnly = options.asyncOnly;\n  runner.allowUncaught = options.allowUncaught;\n  runner.forbidOnly = options.forbidOnly;\n  runner.forbidPending = options.forbidPending;\n  if (options.grep) {\n    runner.grep(options.grep, options.invert);\n  }\n  if (options.global) {\n    runner.globals(options.global);\n  }\n  if (options.growl) {\n    this._growl(runner);\n  }\n  if (options.color !== undefined) {\n    exports.reporters.Base.useColors = options.color;\n  }\n  exports.reporters.Base.inlineDiffs = options.inlineDiffs;\n  exports.reporters.Base.hideDiff = !options.diff;\n\n  const done = failures => {\n    this._previousRunner = runner;\n    this._state = this._cleanReferencesAfterRun\n      ? mochaStates.REFERENCES_CLEANED\n      : mochaStates.INIT;\n    fn = fn || utils.noop;\n    if (typeof reporter.done === 'function') {\n      reporter.done(failures, fn);\n    } else {\n      fn(failures);\n    }\n  };\n\n  const runAsync = async runner => {\n    const context =\n      this.options.enableGlobalSetup && this.hasGlobalSetupFixtures()\n        ? await this.runGlobalSetup(runner)\n        : {};\n    const failureCount = await runner.runAsync({\n      files: this.files,\n      options\n    });\n    if (this.options.enableGlobalTeardown && this.hasGlobalTeardownFixtures()) {\n      await this.runGlobalTeardown(runner, {context});\n    }\n    return failureCount;\n  };\n\n  // no \"catch\" here is intentional. errors coming out of\n  // Runner#run are considered uncaught/unhandled and caught\n  // by the `process` event listeners.\n  // also: returning anything other than `runner` would be a breaking\n  // change\n  runAsync(runner).then(done);\n\n  return runner;\n};\n\n/**\n * Assigns hooks to the root suite\n * @param {MochaRootHookObject} [hooks] - Hooks to assign to root suite\n * @chainable\n */\nMocha.prototype.rootHooks = function rootHooks({\n  beforeAll = [],\n  beforeEach = [],\n  afterAll = [],\n  afterEach = []\n} = {}) {\n  beforeAll = utils.castArray(beforeAll);\n  beforeEach = utils.castArray(beforeEach);\n  afterAll = utils.castArray(afterAll);\n  afterEach = utils.castArray(afterEach);\n  beforeAll.forEach(hook => {\n    this.suite.beforeAll(hook);\n  });\n  beforeEach.forEach(hook => {\n    this.suite.beforeEach(hook);\n  });\n  afterAll.forEach(hook => {\n    this.suite.afterAll(hook);\n  });\n  afterEach.forEach(hook => {\n    this.suite.afterEach(hook);\n  });\n  return this;\n};\n\n/**\n * Toggles parallel mode.\n *\n * Must be run before calling {@link Mocha#run}. Changes the `Runner` class to\n * use; also enables lazy file loading if not already done so.\n *\n * Warning: when passed `false` and lazy loading has been enabled _via any means_ (including calling `parallelMode(true)`), this method will _not_ disable lazy loading. Lazy loading is a prerequisite for parallel\n * mode, but parallel mode is _not_ a prerequisite for lazy loading!\n * @param {boolean} [enable] - If `true`, enable; otherwise disable.\n * @throws If run in browser\n * @throws If Mocha not in `INIT` state\n * @returns {Mocha}\n * @chainable\n * @public\n */\nMocha.prototype.parallelMode = function parallelMode(enable = true) {\n  if (utils.isBrowser()) {\n    throw createUnsupportedError('parallel mode is only supported in Node.js');\n  }\n  const parallel = Boolean(enable);\n  if (\n    parallel === this.options.parallel &&\n    this._lazyLoadFiles &&\n    this._runnerClass !== exports.Runner\n  ) {\n    return this;\n  }\n  if (this._state !== mochaStates.INIT) {\n    throw createUnsupportedError(\n      'cannot change parallel mode after having called run()'\n    );\n  }\n  this.options.parallel = parallel;\n\n  // swap Runner class\n  this._runnerClass = parallel\n    ? require('./nodejs/parallel-buffered-runner')\n    : exports.Runner;\n\n  // lazyLoadFiles may have been set `true` otherwise (for ESM loading),\n  // so keep `true` if so.\n  return this.lazyLoadFiles(this._lazyLoadFiles || parallel);\n};\n\n/**\n * Disables implicit call to {@link Mocha#loadFiles} in {@link Mocha#run}. This\n * setting is used by watch mode, parallel mode, and for loading ESM files.\n * @todo This should throw if we've already loaded files; such behavior\n * necessitates adding a new state.\n * @param {boolean} [enable] - If `true`, disable eager loading of files in\n * {@link Mocha#run}\n * @chainable\n * @public\n */\nMocha.prototype.lazyLoadFiles = function lazyLoadFiles(enable) {\n  this._lazyLoadFiles = enable === true;\n  debug('set lazy load to %s', enable);\n  return this;\n};\n\n/**\n * Configures one or more global setup fixtures.\n *\n * If given no parameters, _unsets_ any previously-set fixtures.\n * @chainable\n * @public\n * @param {MochaGlobalFixture|MochaGlobalFixture[]} [setupFns] - Global setup fixture(s)\n * @returns {Mocha}\n */\nMocha.prototype.globalSetup = function globalSetup(setupFns = []) {\n  setupFns = utils.castArray(setupFns);\n  this.options.globalSetup = setupFns;\n  debug('configured %d global setup functions', setupFns.length);\n  return this;\n};\n\n/**\n * Configures one or more global teardown fixtures.\n *\n * If given no parameters, _unsets_ any previously-set fixtures.\n * @chainable\n * @public\n * @param {MochaGlobalFixture|MochaGlobalFixture[]} [teardownFns] - Global teardown fixture(s)\n * @returns {Mocha}\n */\nMocha.prototype.globalTeardown = function globalTeardown(teardownFns = []) {\n  teardownFns = utils.castArray(teardownFns);\n  this.options.globalTeardown = teardownFns;\n  debug('configured %d global teardown functions', teardownFns.length);\n  return this;\n};\n\n/**\n * Run any global setup fixtures sequentially, if any.\n *\n * This is _automatically called_ by {@link Mocha#run} _unless_ the `runGlobalSetup` option is `false`; see {@link Mocha#enableGlobalSetup}.\n *\n * The context object this function resolves with should be consumed by {@link Mocha#runGlobalTeardown}.\n * @param {object} [context] - Context object if already have one\n * @public\n * @returns {Promise<object>} Context object\n */\nMocha.prototype.runGlobalSetup = async function runGlobalSetup(context = {}) {\n  const {globalSetup} = this.options;\n  if (globalSetup && globalSetup.length) {\n    debug('run(): global setup starting');\n    await this._runGlobalFixtures(globalSetup, context);\n    debug('run(): global setup complete');\n  }\n  return context;\n};\n\n/**\n * Run any global teardown fixtures sequentially, if any.\n *\n * This is _automatically called_ by {@link Mocha#run} _unless_ the `runGlobalTeardown` option is `false`; see {@link Mocha#enableGlobalTeardown}.\n *\n * Should be called with context object returned by {@link Mocha#runGlobalSetup}, if applicable.\n * @param {object} [context] - Context object if already have one\n * @public\n * @returns {Promise<object>} Context object\n */\nMocha.prototype.runGlobalTeardown = async function runGlobalTeardown(\n  context = {}\n) {\n  const {globalTeardown} = this.options;\n  if (globalTeardown && globalTeardown.length) {\n    debug('run(): global teardown starting');\n    await this._runGlobalFixtures(globalTeardown, context);\n  }\n  debug('run(): global teardown complete');\n  return context;\n};\n\n/**\n * Run global fixtures sequentially with context `context`\n * @private\n * @param {MochaGlobalFixture[]} [fixtureFns] - Fixtures to run\n * @param {object} [context] - context object\n * @returns {Promise<object>} context object\n */\nMocha.prototype._runGlobalFixtures = async function _runGlobalFixtures(\n  fixtureFns = [],\n  context = {}\n) {\n  for await (const fixtureFn of fixtureFns) {\n    await fixtureFn.call(context);\n  }\n  return context;\n};\n\n/**\n * Toggle execution of any global setup fixture(s)\n *\n * @chainable\n * @public\n * @param {boolean } [enabled=true] - If `false`, do not run global setup fixture\n * @returns {Mocha}\n */\nMocha.prototype.enableGlobalSetup = function enableGlobalSetup(enabled = true) {\n  this.options.enableGlobalSetup = Boolean(enabled);\n  return this;\n};\n\n/**\n * Toggle execution of any global teardown fixture(s)\n *\n * @chainable\n * @public\n * @param {boolean } [enabled=true] - If `false`, do not run global teardown fixture\n * @returns {Mocha}\n */\nMocha.prototype.enableGlobalTeardown = function enableGlobalTeardown(\n  enabled = true\n) {\n  this.options.enableGlobalTeardown = Boolean(enabled);\n  return this;\n};\n\n/**\n * Returns `true` if one or more global setup fixtures have been supplied.\n * @public\n * @returns {boolean}\n */\nMocha.prototype.hasGlobalSetupFixtures = function hasGlobalSetupFixtures() {\n  return Boolean(this.options.globalSetup.length);\n};\n\n/**\n * Returns `true` if one or more global teardown fixtures have been supplied.\n * @public\n * @returns {boolean}\n */\nMocha.prototype.hasGlobalTeardownFixtures =\n  function hasGlobalTeardownFixtures() {\n    return Boolean(this.options.globalTeardown.length);\n  };\n\n/**\n * An alternative way to define root hooks that works with parallel runs.\n * @typedef {Object} MochaRootHookObject\n * @property {Function|Function[]} [beforeAll] - \"Before all\" hook(s)\n * @property {Function|Function[]} [beforeEach] - \"Before each\" hook(s)\n * @property {Function|Function[]} [afterAll] - \"After all\" hook(s)\n * @property {Function|Function[]} [afterEach] - \"After each\" hook(s)\n */\n\n/**\n * An function that returns a {@link MochaRootHookObject}, either sync or async.\n   @callback MochaRootHookFunction\n * @returns {MochaRootHookObject|Promise<MochaRootHookObject>}\n */\n\n/**\n * A function that's invoked _once_ which is either sync or async.\n * Can be a \"teardown\" or \"setup\".  These will all share the same context.\n * @callback MochaGlobalFixture\n * @returns {void|Promise<void>}\n */\n\n/**\n * An object making up all necessary parts of a plugin loader and aggregator\n * @typedef {Object} PluginDefinition\n * @property {string} exportName - Named export to use\n * @property {string} [optionName] - Option name for Mocha constructor (use `exportName` if omitted)\n * @property {PluginValidator} [validate] - Validator function\n * @property {PluginFinalizer} [finalize] - Finalizer/aggregator function\n */\n\n/**\n * A (sync) function to assert a user-supplied plugin implementation is valid.\n *\n * Defined in a {@link PluginDefinition}.\n\n * @callback PluginValidator\n * @param {*} value - Value to check\n * @this {PluginDefinition}\n * @returns {void}\n */\n\n/**\n * A function to finalize plugins impls of a particular ilk\n * @callback PluginFinalizer\n * @param {Array<*>} impls - User-supplied implementations\n * @returns {Promise<*>|*}\n */\n"],"mappings":"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,IADAuG,OACA,uEADU,IACV;EACA,KAAK/H,OAAL,CAAawB,oBAAb,GAAoCJ,OAAO,CAAC2G,OAAD,CAA3C;EACA,OAAO,IAAP;AACD,CALD;AAOA;AACA;AACA;AACA;AACA;;;AACAtK,KAAK,CAACmE,SAAN,CAAgBkF,sBAAhB,GAAyC,SAASA,sBAAT,GAAkC;EACzE,OAAO1F,OAAO,CAAC,KAAKpB,OAAL,CAAaqB,WAAb,CAAyB8E,MAA1B,CAAd;AACD,CAFD;AAIA;AACA;AACA;AACA;AACA;;;AACA1I,KAAK,CAACmE,SAAN,CAAgBqF,yBAAhB,GACE,SAASA,yBAAT,GAAqC;EACnC,OAAO7F,OAAO,CAAC,KAAKpB,OAAL,CAAasB,cAAb,CAA4B6E,MAA7B,CAAd;AACD,CAHH;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA"},"metadata":{},"sourceType":"script"}