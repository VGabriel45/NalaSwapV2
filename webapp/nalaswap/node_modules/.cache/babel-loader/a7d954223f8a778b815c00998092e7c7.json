{"ast":null,"code":"var _jsxFileName = \"/Users/ja/Desktop/MyProjects/NalaSwap/webapp/nalaswap/src/pages/StakePage.js\",\n    _s = $RefreshSig$();\n\nimport * as React from 'react';\nimport stakingContractABI from \"../ABIS/StakingABI.json\";\nimport nalaRouterABI from \"../ABIS/NalaRouter.json\";\nimport nlaTokenABI from \"../ABIS/NalaTokenABI.json\";\nimport { BigNumber, Contract, ethers, utils } from 'ethers';\nimport { formatUnits, parseEther } from '@ethersproject/units';\nimport { useEffect, useState, Fragment } from \"react\";\nimport Box from '@mui/material/Box';\nimport ButtonGroup from '@mui/material/ButtonGroup';\nimport Button from '@mui/material/Button';\nimport TextField from '@mui/material/TextField';\nimport contractAddresses from \"../utils/contractsAddresses.json\";\nimport { BigNumber as JsBigNumber } from 'bignumber.js';\nimport { Widget } from \"web3uikit\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function StakePage() {\n  _s();\n\n  const [balance, setBalance] = useState(0);\n  const [apr, setApr] = useState(0);\n  const [TVL, setTVL] = useState(0);\n  const [tokenPrice, setTokenPrice] = useState(0);\n  const [balanceWithRewards, setBalanceWithRewards] = useState(0);\n  const [amount, setAmount] = useState(0);\n  const [rewardsPerDay, setRewardsPerDay] = useState(0);\n  const [errorMessage, setErrorMessage] = useState(\"\");\n  const contractAddress = contractAddresses.stakingContract;\n  const nlaTokenAddress = contractAddresses.nalaTokenAddress;\n  const nalaRouterAddress = contractAddresses.nalaRouterContract;\n  const wBNBTokenAddress = \"0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c\";\n  const TOKENS_PER_BLOCK = 1;\n  useEffect(() => {\n    getUserStakedAmount();\n    getRewardsPerDay();\n    getTVL();\n    getTokenPrice();\n    getUserBalanceWithRewards();\n    getAPR(TOKENS_PER_BLOCK); // get staked amout without using async await inside useEffect\n  }, []);\n\n  const getAPR = async tokenPerBlock => {\n    if (typeof window.ethereum !== 'undefined') {\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      const signer = provider.getSigner();\n\n      if (signer) {\n        const userStakedBalance = await getUserStakedAmount();\n\n        if (userStakedBalance > 0) {\n          try {\n            const pancakeRouterV2 = new ethers.Contract(\"0x10ED43C718714eb63d5aA57B78B54704E256024E\", [\"function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts)\"], signer);\n            const nalaToken = new ethers.Contract(nlaTokenAddress, nlaTokenABI, signer);\n            const totalStaked = await nalaToken.balanceOf(contractAddress);\n            console.log(`Total staked in staking contract = ${totalStaked / Math.pow(10, 18)}`); // how much NLA tokens we get for 1 BNB \n\n            const amountsOut = await pancakeRouterV2.getAmountsOut(ethers.utils.parseEther(\"1\"), [wBNBTokenAddress, nlaTokenAddress]);\n            const amoutOfNLAFor1BNB = formatUnits(amountsOut[1].toString(), 18);\n            const nlaPriceInBNB = 1 / amoutOfNLAFor1BNB; // NLA Token price in BNB\n\n            const totalRewardPricePerYear = new JsBigNumber(nlaPriceInBNB).times(tokenPerBlock).times(28640);\n            const totalStakingTokenInPool = new JsBigNumber(nlaPriceInBNB).times(totalStaked / Math.pow(10, 18));\n            const apr = totalRewardPricePerYear.div(totalStakingTokenInPool).times(10);\n            setApr(apr.toNumber());\n          } catch (error) {\n            setApr(0);\n          }\n        }\n      }\n    }\n  };\n\n  const stakeTokens = async amount => {\n    if (typeof window.ethereum !== 'undefined') {\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      const signer = provider.getSigner();\n\n      if (signer && parseInt(amount) > 0) {\n        const stakingContract = new ethers.Contract(contractAddress, stakingContractABI, signer);\n        const nlaToken = new ethers.Contract(nlaTokenAddress, [\"function approve(address _spender, uint256 _value) public returns (bool success)\"], signer);\n        await nlaToken.connect(signer).approve(stakingContract.address, \"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\");\n\n        try {\n          const tx = await stakingContract.connect(signer).stakeTokens(ethers.utils.parseEther(amount.toString()));\n          tx.wait();\n          console.log(tx);\n        } catch (error) {\n          console.log(\"Transaction error\");\n        }\n      } else {\n        setErrorMessage(\"Cannot stake 0 tokens\");\n      }\n    }\n  };\n\n  const withdrawTokens = async amount => {\n    if (typeof window.ethereum !== 'undefined') {\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      const signer = provider.getSigner();\n\n      if (signer && parseInt(amount) > 0) {\n        const stakingContract = new ethers.Contract(contractAddress, stakingContractABI, signer);\n        const nlaToken = new ethers.Contract(nlaTokenAddress, [\"function approve(address _spender, uint256 _value) public returns (bool success)\"], signer);\n        nlaToken.connect(signer).approve(stakingContract.address, \"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\");\n\n        try {\n          const tx = await stakingContract.connect(signer).withdrawTokens(ethers.utils.parseEther(amount.toString()));\n          tx.wait();\n        } catch (error) {\n          console.log(\"Transaction error\");\n        }\n      } else {\n        setErrorMessage(\"Cannot stake 0 tokens\");\n      }\n    }\n  };\n\n  const getUserStakedAmount = async () => {\n    let balance;\n\n    if (typeof window.ethereum !== 'undefined') {\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      const signer = provider.getSigner();\n\n      if (signer) {\n        const stakingContract = new ethers.Contract(contractAddress, stakingContractABI, signer);\n\n        try {\n          balance = await stakingContract.stakerBalance(signer.getAddress());\n        } catch (error) {\n          console.log(\"Transaction error\");\n        }\n      }\n    } // console.log(formatUnits(BigNumber.from(balance.toString(), 18)));\n\n\n    setBalance(balance / Math.pow(10, 18));\n    return formatUnits(balance / Math.pow(10, 18));\n  };\n\n  const getUserBalanceWithRewards = async () => {\n    let balance;\n\n    if (typeof window.ethereum !== 'undefined') {\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      const signer = provider.getSigner();\n\n      if (signer) {\n        const stakingContract = new ethers.Contract(contractAddress, stakingContractABI, signer);\n\n        try {\n          balance = await stakingContract.getBalanceWithRewards(signer.getAddress());\n        } catch (error) {\n          console.log(\"Transaction error\");\n        }\n      }\n    } // console.log(formatUnits(BigNumber.from(balance.toString(), 18)));\n\n\n    setBalanceWithRewards(balance / Math.pow(10, 18));\n  };\n\n  const getRewardsPerDay = async () => {\n    let rewards = 0;\n\n    if (typeof window.ethereum !== 'undefined') {\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      const signer = provider.getSigner();\n\n      if (signer) {\n        const userStakedBalance = await getUserStakedAmount();\n\n        if (userStakedBalance > 0) {\n          const stakingContract = new ethers.Contract(contractAddress, stakingContractABI, signer);\n\n          try {\n            rewards = await stakingContract.getRewardsPerDay(signer.getAddress());\n            setRewardsPerDay(rewards / Math.pow(10, 18));\n          } catch (error) {\n            console.log(\"Transaction error\");\n          }\n        }\n      }\n    }\n  };\n\n  const getTVL = async () => {\n    if (typeof window.ethereum !== 'undefined') {\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      const signer = provider.getSigner();\n\n      if (signer) {\n        const nalaToken = new ethers.Contract(nlaTokenAddress, nlaTokenABI, signer);\n        const totalStaked = await nalaToken.balanceOf(contractAddress);\n        setTVL(totalStaked / Math.pow(10, 18));\n      }\n    }\n  };\n\n  const getTokenPrice = async () => {\n    if (typeof window.ethereum !== 'undefined') {\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      const signer = provider.getSigner();\n\n      if (signer) {\n        const nalaRouter = new ethers.Contract(nalaRouterAddress, nalaRouterABI, signer);\n        const amountsOut = await nalaRouter.getAmountsOutTokens(ethers.utils.parseEther(\"1\"), [wBNBTokenAddress, nlaTokenAddress]);\n        const amoutOfNLAFor1BNB = formatUnits(amountsOut[1].toString(), 18);\n        const nlaPriceInBNB = 1 / amoutOfNLAFor1BNB;\n        setTokenPrice(nlaPriceInBNB);\n      }\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: 'grid',\n        gap: '20px',\n        padding: '40px 20px',\n        width: \"500px\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"section\", {\n        style: {\n          display: 'flex',\n          gap: '20px'\n        },\n        children: [/*#__PURE__*/_jsxDEV(Widget, {\n          info: `${rewardsPerDay.toFixed(2)} NLA`,\n          title: \"Rewards per day\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 227,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Widget, {\n          info: `${TVL.toFixed(2)} NLA`,\n          title: \"Total NLA staked\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 228,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 226,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n        style: {\n          display: 'flex',\n          gap: '20px'\n        },\n        children: [/*#__PURE__*/_jsxDEV(Widget, {\n          info: `${apr}%`,\n          title: \"APR\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 231,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Widget, {\n          info: \"232\",\n          title: \"Stakers\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 232,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Widget, {\n          info: (tokenPrice / Math.pow(10, 18)).toFixed(10),\n          title: \"Token price\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 233,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 230,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: 'flex',\n          flexDirection: 'row',\n          justifyContent: 'space-around'\n        },\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          style: {\n            marginRight: \"25%\"\n          },\n          color: \"secondary\",\n          variant: \"contained\",\n          onClick: () => stakeTokens(amount),\n          children: \"Deposit\"\n        }, \"Deposit\", false, {\n          fileName: _jsxFileName,\n          lineNumber: 236,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          color: \"secondary\",\n          variant: \"contained\",\n          onClick: () => withdrawTokens(amount),\n          children: \"Withdraw\"\n        }, \"Withdraw\", false, {\n          fileName: _jsxFileName,\n          lineNumber: 237,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 235,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(TextField, {\n        id: \"outlined-basic\",\n        label: \"Amount...\",\n        variant: \"outlined\",\n        size: \"small\",\n        type: \"number\",\n        onChange: e => setAmount(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 239,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"small\", {\n        style: {\n          color: \"red\"\n        },\n        children: errorMessage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 240,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 225,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n}\n\n_s(StakePage, \"IIkHS7ShHJdoPaoLRnSalG/KLiA=\");\n\n_c = StakePage;\n\nvar _c;\n\n$RefreshReg$(_c, \"StakePage\");","map":{"version":3,"names":["React","stakingContractABI","nalaRouterABI","nlaTokenABI","BigNumber","Contract","ethers","utils","formatUnits","parseEther","useEffect","useState","Fragment","Box","ButtonGroup","Button","TextField","contractAddresses","JsBigNumber","Widget","StakePage","balance","setBalance","apr","setApr","TVL","setTVL","tokenPrice","setTokenPrice","balanceWithRewards","setBalanceWithRewards","amount","setAmount","rewardsPerDay","setRewardsPerDay","errorMessage","setErrorMessage","contractAddress","stakingContract","nlaTokenAddress","nalaTokenAddress","nalaRouterAddress","nalaRouterContract","wBNBTokenAddress","TOKENS_PER_BLOCK","getUserStakedAmount","getRewardsPerDay","getTVL","getTokenPrice","getUserBalanceWithRewards","getAPR","tokenPerBlock","window","ethereum","provider","providers","Web3Provider","signer","getSigner","userStakedBalance","pancakeRouterV2","nalaToken","totalStaked","balanceOf","console","log","Math","pow","amountsOut","getAmountsOut","amoutOfNLAFor1BNB","toString","nlaPriceInBNB","totalRewardPricePerYear","times","totalStakingTokenInPool","div","toNumber","error","stakeTokens","parseInt","nlaToken","connect","approve","address","tx","wait","withdrawTokens","stakerBalance","getAddress","getBalanceWithRewards","rewards","nalaRouter","getAmountsOutTokens","display","gap","padding","width","toFixed","flexDirection","justifyContent","marginRight","e","target","value","color"],"sources":["/Users/ja/Desktop/MyProjects/NalaSwap/webapp/nalaswap/src/pages/StakePage.js"],"sourcesContent":["import * as React from 'react';\nimport stakingContractABI from \"../ABIS/StakingABI.json\";\nimport nalaRouterABI from \"../ABIS/NalaRouter.json\";\nimport nlaTokenABI from \"../ABIS/NalaTokenABI.json\";\nimport { BigNumber, Contract, ethers, utils } from 'ethers';\nimport { formatUnits, parseEther } from '@ethersproject/units';\nimport {useEffect, useState, Fragment} from \"react\";\nimport Box from '@mui/material/Box';\nimport ButtonGroup from '@mui/material/ButtonGroup';\nimport Button from '@mui/material/Button';\nimport TextField from '@mui/material/TextField';\nimport contractAddresses from \"../utils/contractsAddresses.json\";\nimport {BigNumber as JsBigNumber} from 'bignumber.js'\nimport {Widget} from \"web3uikit\";\n\nexport default function StakePage () {\n\n    const [balance, setBalance] = useState(0);\n    const [apr, setApr] = useState(0);\n    const [TVL, setTVL] = useState(0);\n    const [tokenPrice, setTokenPrice] = useState(0);\n    const [balanceWithRewards, setBalanceWithRewards] = useState(0);\n    const [amount, setAmount] = useState(0);\n    const [rewardsPerDay, setRewardsPerDay] = useState(0);\n    const [errorMessage, setErrorMessage] = useState(\"\");\n\n    const contractAddress = contractAddresses.stakingContract;\n    const nlaTokenAddress = contractAddresses.nalaTokenAddress;\n    const nalaRouterAddress = contractAddresses.nalaRouterContract;\n    const wBNBTokenAddress = \"0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c\";\n\n    const TOKENS_PER_BLOCK = 1;\n\n    useEffect(() => {\n        getUserStakedAmount();\n        getRewardsPerDay();\n        getTVL();\n        getTokenPrice();\n        getUserBalanceWithRewards();\n        getAPR(TOKENS_PER_BLOCK); // get staked amout without using async await inside useEffect\n    }, [])\n\n    const getAPR = async (\n        tokenPerBlock,\n      ) => {\n        if (typeof window.ethereum !== 'undefined') {\n            const provider = new ethers.providers.Web3Provider(window.ethereum)\n            const signer = provider.getSigner()\n            if(signer) {\n                const userStakedBalance = await getUserStakedAmount();\n                if(userStakedBalance > 0) {\n                    try {\n                        const pancakeRouterV2 = new ethers.Contract(\"0x10ED43C718714eb63d5aA57B78B54704E256024E\", [\"function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts)\"], signer);\n                        const nalaToken = new ethers.Contract(nlaTokenAddress, nlaTokenABI, signer);\n                        const totalStaked = await nalaToken.balanceOf(contractAddress);\n                        console.log(`Total staked in staking contract = ${totalStaked / Math.pow(10, 18)}`);\n\n                        // how much NLA tokens we get for 1 BNB \n                        const amountsOut = await pancakeRouterV2\n                        .getAmountsOut(\n                            ethers.utils.parseEther(\"1\"), \n                            [wBNBTokenAddress, nlaTokenAddress]\n                        )\n                    \n                        const amoutOfNLAFor1BNB = formatUnits(amountsOut[1].toString(), 18);\n                        const nlaPriceInBNB = 1 / amoutOfNLAFor1BNB; // NLA Token price in BNB\n                    \n                        const totalRewardPricePerYear = new JsBigNumber(nlaPriceInBNB).times(tokenPerBlock).times(28640)\n                        const totalStakingTokenInPool = new JsBigNumber(nlaPriceInBNB).times(totalStaked / Math.pow(10, 18))\n                        const apr = totalRewardPricePerYear.div(totalStakingTokenInPool).times(10)\n                        \n                        setApr(apr.toNumber());\n                    } catch (error) {\n                        setApr(0);\n                    }\n                }\n            }\n        }\n    }\n\n    const stakeTokens = async (amount) => {\n        if (typeof window.ethereum !== 'undefined') {\n            const provider = new ethers.providers.Web3Provider(window.ethereum)\n            const signer = provider.getSigner()\n            if (signer && parseInt(amount) > 0) {\n              const stakingContract = new ethers.Contract(contractAddress, stakingContractABI, signer);\n              const nlaToken = new ethers.Contract(nlaTokenAddress, [\"function approve(address _spender, uint256 _value) public returns (bool success)\"], signer);\n              await nlaToken.connect(signer).approve(stakingContract.address, \"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\");\n              try {\n                const tx = await stakingContract.connect(signer).stakeTokens(\n                    ethers.utils.parseEther(amount.toString())\n                )\n                tx.wait();\n                console.log(tx);\n                } catch (error) {\n                    console.log(\"Transaction error\");\n                }\n            } else {\n                setErrorMessage(\"Cannot stake 0 tokens\");\n            }\n        }\n        \n    }\n\n    const withdrawTokens = async (amount) => {\n        if (typeof window.ethereum !== 'undefined') {\n            const provider = new ethers.providers.Web3Provider(window.ethereum)\n            const signer = provider.getSigner()\n            if (signer && parseInt(amount) > 0) {\n              const stakingContract = new ethers.Contract(contractAddress, stakingContractABI, signer);\n              const nlaToken = new ethers.Contract(nlaTokenAddress, [\"function approve(address _spender, uint256 _value) public returns (bool success)\"], signer);\n              nlaToken.connect(signer).approve(stakingContract.address, \"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\");\n              try {\n                const tx = await stakingContract.connect(signer).withdrawTokens(\n                    ethers.utils.parseEther(amount.toString())\n                )\n                tx.wait();\n                } catch (error) {\n                    console.log(\"Transaction error\");\n                }\n            } else {\n                setErrorMessage(\"Cannot stake 0 tokens\");\n            }\n        }\n        \n    }\n\n    const getUserStakedAmount = async () => {\n\n        let balance;\n\n        if (typeof window.ethereum !== 'undefined') {\n            const provider = new ethers.providers.Web3Provider(window.ethereum)\n            const signer = provider.getSigner()\n            if (signer) {\n              const stakingContract = new ethers.Contract(contractAddress, stakingContractABI, signer);\n              try {\n                balance = await stakingContract.stakerBalance(signer.getAddress());\n                } catch (error) {\n                    console.log(\"Transaction error\");\n                }\n            }\n        }\n\n        // console.log(formatUnits(BigNumber.from(balance.toString(), 18)));\n        setBalance(balance / Math.pow(10, 18));\n        return formatUnits(balance / Math.pow(10, 18));\n    }\n\n    const getUserBalanceWithRewards = async () => {\n\n        let balance;\n\n        if (typeof window.ethereum !== 'undefined') {\n            const provider = new ethers.providers.Web3Provider(window.ethereum)\n            const signer = provider.getSigner()\n            if (signer) {\n              const stakingContract = new ethers.Contract(contractAddress, stakingContractABI, signer);\n              try {\n                balance = await stakingContract.getBalanceWithRewards(signer.getAddress());\n                } catch (error) {\n                    console.log(\"Transaction error\");\n                }\n            }\n        }\n\n        // console.log(formatUnits(BigNumber.from(balance.toString(), 18)));\n        setBalanceWithRewards(balance / Math.pow(10, 18));\n    }\n\n    const getRewardsPerDay = async () => {\n        let rewards = 0;\n        if (typeof window.ethereum !== 'undefined') {\n            const provider = new ethers.providers.Web3Provider(window.ethereum)\n            const signer = provider.getSigner()\n            if (signer) {\n                const userStakedBalance = await getUserStakedAmount();\n                if(userStakedBalance > 0) {\n                    const stakingContract = new ethers.Contract(contractAddress, stakingContractABI, signer);\n                    try {\n                        rewards = await stakingContract.getRewardsPerDay(signer.getAddress());\n                        setRewardsPerDay(rewards / Math.pow(10, 18));\n                    } catch (error) {\n                        console.log(\"Transaction error\");\n                    }\n                }\n            }\n        }\n    }\n\n    const getTVL = async () => {\n        if (typeof window.ethereum !== 'undefined') {\n            const provider = new ethers.providers.Web3Provider(window.ethereum)\n            const signer = provider.getSigner()\n            if (signer) {\n                const nalaToken = new ethers.Contract(nlaTokenAddress, nlaTokenABI, signer);\n                const totalStaked = await nalaToken.balanceOf(contractAddress);\n                setTVL(totalStaked / Math.pow(10, 18));\n            }\n        }\n    }\n\n    const getTokenPrice = async () => {\n        if (typeof window.ethereum !== 'undefined') {\n            const provider = new ethers.providers.Web3Provider(window.ethereum)\n            const signer = provider.getSigner()\n            if (signer) {\n                const nalaRouter = new ethers.Contract(nalaRouterAddress, nalaRouterABI, signer);\n                const amountsOut = await nalaRouter\n                .getAmountsOutTokens(\n                    ethers.utils.parseEther(\"1\"), \n                    [wBNBTokenAddress, nlaTokenAddress]\n                )\n\n                const amoutOfNLAFor1BNB = formatUnits(amountsOut[1].toString(), 18);\n                const nlaPriceInBNB = 1 / amoutOfNLAFor1BNB;\n\n                setTokenPrice(nlaPriceInBNB);\n            }\n        }\n    }\n\n    return (\n        <>\n            <div style={{ display: 'grid', gap: '20px', padding: '40px 20px', width: \"500px\" }}>\n                <section style={{ display: 'flex', gap: '20px' }}>\n                    <Widget info={`${rewardsPerDay.toFixed(2)} NLA`} title=\"Rewards per day\"/>\n                    <Widget info={`${TVL.toFixed(2)} NLA`} title=\"Total NLA staked\" />\n                </section>\n                <section style={{ display: 'flex', gap: '20px' }}>\n                    <Widget info={`${apr}%`} title=\"APR\" />\n                    <Widget info=\"232\" title=\"Stakers\" />\n                    <Widget info={(tokenPrice / Math.pow(10, 18)).toFixed(10)} title=\"Token price\" />\n                </section>\n                <div style={{display: 'flex', flexDirection: 'row', justifyContent: 'space-around'}}>\n                    <Button style={{marginRight: \"25%\"}} color=\"secondary\" variant=\"contained\" key=\"Deposit\" onClick={() => stakeTokens(amount)}>Deposit</Button>\n                    <Button color=\"secondary\" variant=\"contained\" key=\"Withdraw\" onClick={() => withdrawTokens(amount)}>Withdraw</Button>\n                </div>\n                <TextField id=\"outlined-basic\" label=\"Amount...\" variant=\"outlined\" size=\"small\" type=\"number\" onChange={(e) => setAmount(e.target.value)}/>\n                <small style={{color: \"red\"}}>{errorMessage}</small>\n            </div>\n        </>\n    )\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}