{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  Object.defineProperty(o, k2, {\n    enumerable: true,\n    get: function () {\n      return m[k];\n    }\n  });\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getValidationErrors = exports.validateConfig = exports.decimalString = exports.address = exports.hexString = exports.DotPathReporter = exports.success = exports.failure = void 0;\n\nconst t = __importStar(require(\"io-ts\"));\n\nconst lib_1 = require(\"io-ts/lib\");\n\nconst constants_1 = require(\"../../constants\");\n\nconst io_ts_1 = require(\"../../util/io-ts\");\n\nconst lang_1 = require(\"../../util/lang\");\n\nconst errors_1 = require(\"../errors\");\n\nconst errors_list_1 = require(\"../errors-list\");\n\nconst hardforks_1 = require(\"../../util/hardforks\");\n\nconst default_config_1 = require(\"./default-config\");\n\nfunction stringify(v) {\n  if (typeof v === \"function\") {\n    return (0, lib_1.getFunctionName)(v);\n  }\n\n  if (typeof v === \"number\" && !isFinite(v)) {\n    if (isNaN(v)) {\n      return \"NaN\";\n    }\n\n    return v > 0 ? \"Infinity\" : \"-Infinity\";\n  }\n\n  return JSON.stringify(v);\n}\n\nfunction getContextPath(context) {\n  const keysPath = context.slice(1).map(c => c.key).join(\".\");\n  return `${context[0].type.name}.${keysPath}`;\n}\n\nfunction getMessage(e) {\n  const lastContext = e.context[e.context.length - 1];\n  return e.message !== undefined ? e.message : getErrorMessage(getContextPath(e.context), e.value, lastContext.type.name);\n}\n\nfunction getErrorMessage(path, value, expectedType) {\n  return `Invalid value ${stringify(value)} for ${path} - Expected a value of type ${expectedType}.`;\n}\n\nfunction getPrivateKeyError(index, network, message) {\n  return `Invalid account: #${index} for network: ${network} - ${message}`;\n}\n\nfunction validatePrivateKey(privateKey, index, network, errors) {\n  if (typeof privateKey !== \"string\") {\n    errors.push(getPrivateKeyError(index, network, `Expected string, received ${typeof privateKey}`));\n  } else {\n    // private key validation\n    const pkWithPrefix = /^0x/.test(privateKey) ? privateKey : `0x${privateKey}`; // 32 bytes = 64 characters + 2 char prefix = 66\n\n    if (pkWithPrefix.length < 66) {\n      errors.push(getPrivateKeyError(index, network, \"private key too short, expected 32 bytes\"));\n    } else if (pkWithPrefix.length > 66) {\n      errors.push(getPrivateKeyError(index, network, \"private key too long, expected 32 bytes\"));\n    } else if (exports.hexString.decode(pkWithPrefix).isLeft()) {\n      errors.push(getPrivateKeyError(index, network, \"invalid hex character(s) found in string\"));\n    }\n  }\n}\n\nfunction failure(es) {\n  return es.map(getMessage);\n}\n\nexports.failure = failure;\n\nfunction success() {\n  return [];\n}\n\nexports.success = success;\nexports.DotPathReporter = {\n  report: validation => validation.fold(failure, success)\n};\nconst HEX_STRING_REGEX = /^(0x)?([0-9a-f]{2})+$/gi;\nconst DEC_STRING_REGEX = /^(0|[1-9][0-9]*)$/g;\n\nfunction isHexString(v) {\n  if (typeof v !== \"string\") {\n    return false;\n  }\n\n  return v.trim().match(HEX_STRING_REGEX) !== null;\n}\n\nfunction isDecimalString(v) {\n  if (typeof v !== \"string\") {\n    return false;\n  }\n\n  return v.match(DEC_STRING_REGEX) !== null;\n}\n\nexports.hexString = new t.Type(\"hex string\", isHexString, (u, c) => isHexString(u) ? t.success(u) : t.failure(u, c), t.identity);\n\nfunction isAddress(v) {\n  if (typeof v !== \"string\") {\n    return false;\n  }\n\n  const trimmed = v.trim();\n  return trimmed.match(HEX_STRING_REGEX) !== null && trimmed.startsWith(\"0x\") && trimmed.length === 42;\n}\n\nexports.address = new t.Type(\"address\", isAddress, (u, c) => isAddress(u) ? t.success(u) : t.failure(u, c), t.identity);\nexports.decimalString = new t.Type(\"decimal string\", isDecimalString, (u, c) => isDecimalString(u) ? t.success(u) : t.failure(u, c), t.identity); // TODO: These types have outdated name. They should match the UserConfig types.\n// IMPORTANT: This t.types MUST be kept in sync with the actual types.\n\nconst HardhatNetworkAccount = t.type({\n  privateKey: exports.hexString,\n  balance: exports.decimalString\n});\nconst commonHDAccountsFields = {\n  initialIndex: (0, io_ts_1.optional)(t.number),\n  count: (0, io_ts_1.optional)(t.number),\n  path: (0, io_ts_1.optional)(t.string)\n};\nconst HardhatNetworkHDAccountsConfig = t.type(Object.assign({\n  mnemonic: (0, io_ts_1.optional)(t.string),\n  accountsBalance: (0, io_ts_1.optional)(exports.decimalString),\n  passphrase: (0, io_ts_1.optional)(t.string)\n}, commonHDAccountsFields));\nconst Integer = new t.Type(\"Integer\", num => typeof num === \"number\", (u, c) => {\n  try {\n    return typeof u === \"string\" ? t.success(parseInt(u, 10)) : t.failure(u, c);\n  } catch (_a) {\n    return t.failure(u, c);\n  }\n}, t.identity);\nconst HardhatNetworkForkingConfig = t.type({\n  enabled: (0, io_ts_1.optional)(t.boolean),\n  url: t.string,\n  blockNumber: (0, io_ts_1.optional)(t.number)\n});\nconst HardhatNetworkMempoolConfig = t.type({\n  order: (0, io_ts_1.optional)(t.keyof((0, lang_1.fromEntries)(constants_1.HARDHAT_MEMPOOL_SUPPORTED_ORDERS.map(order => [order, null]))))\n});\nconst HardhatNetworkMiningConfig = t.type({\n  auto: (0, io_ts_1.optional)(t.boolean),\n  interval: (0, io_ts_1.optional)(t.union([t.number, t.tuple([t.number, t.number])])),\n  mempool: (0, io_ts_1.optional)(HardhatNetworkMempoolConfig)\n});\n\nfunction isValidHardforkName(name) {\n  return Object.values(hardforks_1.HardforkName).includes(name);\n}\n\nconst HardforkNameType = new t.Type(Object.values(hardforks_1.HardforkName).map(v => `\"${v}\"`).join(\" | \"), name => typeof name === \"string\" && isValidHardforkName(name), (u, c) => {\n  return typeof u === \"string\" && isValidHardforkName(u) ? t.success(u) : t.failure(u, c);\n}, t.identity);\nconst HardhatNetworkHardforkHistory = t.record(HardforkNameType, t.number, \"HardhatNetworkHardforkHistory\");\nconst HardhatNetworkChainConfig = t.type({\n  hardforkHistory: HardhatNetworkHardforkHistory\n});\nconst HardhatNetworkChainsConfig = t.record(Integer, HardhatNetworkChainConfig);\nconst commonNetworkConfigFields = {\n  chainId: (0, io_ts_1.optional)(t.number),\n  from: (0, io_ts_1.optional)(t.string),\n  gas: (0, io_ts_1.optional)(t.union([t.literal(\"auto\"), t.number])),\n  gasPrice: (0, io_ts_1.optional)(t.union([t.literal(\"auto\"), t.number])),\n  gasMultiplier: (0, io_ts_1.optional)(t.number)\n};\nconst HardhatNetworkConfig = t.type(Object.assign(Object.assign({}, commonNetworkConfigFields), {\n  hardfork: (0, io_ts_1.optional)(t.keyof((0, lang_1.fromEntries)(constants_1.HARDHAT_NETWORK_SUPPORTED_HARDFORKS.map(hf => [hf, null])))),\n  accounts: (0, io_ts_1.optional)(t.union([t.array(HardhatNetworkAccount), HardhatNetworkHDAccountsConfig])),\n  blockGasLimit: (0, io_ts_1.optional)(t.number),\n  minGasPrice: (0, io_ts_1.optional)(t.union([t.number, t.string])),\n  throwOnTransactionFailures: (0, io_ts_1.optional)(t.boolean),\n  throwOnCallFailures: (0, io_ts_1.optional)(t.boolean),\n  allowUnlimitedContractSize: (0, io_ts_1.optional)(t.boolean),\n  initialDate: (0, io_ts_1.optional)(t.string),\n  loggingEnabled: (0, io_ts_1.optional)(t.boolean),\n  forking: (0, io_ts_1.optional)(HardhatNetworkForkingConfig),\n  mining: (0, io_ts_1.optional)(HardhatNetworkMiningConfig),\n  coinbase: (0, io_ts_1.optional)(exports.address),\n  chains: (0, io_ts_1.optional)(HardhatNetworkChainsConfig)\n}));\nconst HDAccountsConfig = t.type(Object.assign({\n  mnemonic: t.string,\n  passphrase: (0, io_ts_1.optional)(t.string)\n}, commonHDAccountsFields));\nconst NetworkConfigAccounts = t.union([t.literal(\"remote\"), t.array(exports.hexString), HDAccountsConfig]);\nconst HttpHeaders = t.record(t.string, t.string, \"httpHeaders\");\nconst HttpNetworkConfig = t.type(Object.assign(Object.assign({}, commonNetworkConfigFields), {\n  url: (0, io_ts_1.optional)(t.string),\n  accounts: (0, io_ts_1.optional)(NetworkConfigAccounts),\n  httpHeaders: (0, io_ts_1.optional)(HttpHeaders),\n  timeout: (0, io_ts_1.optional)(t.number)\n}));\nconst NetworkConfig = t.union([HardhatNetworkConfig, HttpNetworkConfig]);\nconst Networks = t.record(t.string, NetworkConfig);\nconst ProjectPaths = t.type({\n  root: (0, io_ts_1.optional)(t.string),\n  cache: (0, io_ts_1.optional)(t.string),\n  artifacts: (0, io_ts_1.optional)(t.string),\n  sources: (0, io_ts_1.optional)(t.string),\n  tests: (0, io_ts_1.optional)(t.string)\n});\nconst SingleSolcConfig = t.type({\n  version: t.string,\n  settings: (0, io_ts_1.optional)(t.any)\n});\nconst MultiSolcConfig = t.type({\n  compilers: t.array(SingleSolcConfig),\n  overrides: (0, io_ts_1.optional)(t.record(t.string, SingleSolcConfig))\n});\nconst SolidityConfig = t.union([t.string, SingleSolcConfig, MultiSolcConfig]);\nconst HardhatConfig = t.type({\n  defaultNetwork: (0, io_ts_1.optional)(t.string),\n  networks: (0, io_ts_1.optional)(Networks),\n  paths: (0, io_ts_1.optional)(ProjectPaths),\n  solidity: (0, io_ts_1.optional)(SolidityConfig)\n}, \"HardhatConfig\");\n/**\n * Validates the config, throwing a HardhatError if invalid.\n * @param config\n */\n\nfunction validateConfig(config) {\n  const errors = getValidationErrors(config);\n\n  if (errors.length === 0) {\n    return;\n  }\n\n  let errorList = errors.join(\"\\n  * \");\n  errorList = `  * ${errorList}`;\n  throw new errors_1.HardhatError(errors_list_1.ERRORS.GENERAL.INVALID_CONFIG, {\n    errors: errorList\n  });\n}\n\nexports.validateConfig = validateConfig;\n\nfunction getValidationErrors(config) {\n  var _a;\n\n  const errors = []; // These can't be validated with io-ts\n\n  if (config !== undefined && typeof config.networks === \"object\") {\n    const hardhatNetwork = config.networks[constants_1.HARDHAT_NETWORK_NAME];\n\n    if (hardhatNetwork !== undefined && typeof hardhatNetwork === \"object\") {\n      if (\"url\" in hardhatNetwork) {\n        errors.push(`HardhatConfig.networks.${constants_1.HARDHAT_NETWORK_NAME} can't have an url`);\n      } // Validating the accounts with io-ts leads to very confusing errors messages\n\n\n      const {\n        accounts\n      } = hardhatNetwork,\n            configExceptAccounts = __rest(hardhatNetwork, [\"accounts\"]);\n\n      const netConfigResult = HardhatNetworkConfig.decode(configExceptAccounts);\n\n      if (netConfigResult.isLeft()) {\n        errors.push(getErrorMessage(`HardhatConfig.networks.${constants_1.HARDHAT_NETWORK_NAME}`, hardhatNetwork, \"HardhatNetworkConfig\"));\n      } // manual validation of accounts\n\n\n      if (Array.isArray(accounts)) {\n        for (const [index, account] of accounts.entries()) {\n          if (typeof account !== \"object\") {\n            errors.push(getPrivateKeyError(index, constants_1.HARDHAT_NETWORK_NAME, `Expected object, received ${typeof account}`));\n            continue;\n          }\n\n          const {\n            privateKey,\n            balance\n          } = account;\n          validatePrivateKey(privateKey, index, constants_1.HARDHAT_NETWORK_NAME, errors);\n\n          if (typeof balance !== \"string\") {\n            errors.push(getErrorMessage(`HardhatConfig.networks.${constants_1.HARDHAT_NETWORK_NAME}.accounts[].balance`, balance, \"string\"));\n          } else if (exports.decimalString.decode(balance).isLeft()) {\n            errors.push(getErrorMessage(`HardhatConfig.networks.${constants_1.HARDHAT_NETWORK_NAME}.accounts[].balance`, balance, \"decimal(wei)\"));\n          }\n        }\n      } else if (typeof hardhatNetwork.accounts === \"object\") {\n        const hdConfigResult = HardhatNetworkHDAccountsConfig.decode(hardhatNetwork.accounts);\n\n        if (hdConfigResult.isLeft()) {\n          errors.push(getErrorMessage(`HardhatConfig.networks.${constants_1.HARDHAT_NETWORK_NAME}.accounts`, hardhatNetwork.accounts, \"[{privateKey: string, balance: string}] | HardhatNetworkHDAccountsConfig | undefined\"));\n        }\n      } else if (hardhatNetwork.accounts !== undefined) {\n        errors.push(getErrorMessage(`HardhatConfig.networks.${constants_1.HARDHAT_NETWORK_NAME}.accounts`, hardhatNetwork.accounts, \"[{privateKey: string, balance: string}] | HardhatNetworkHDAccountsConfig | undefined\"));\n      }\n\n      const hardfork = (_a = hardhatNetwork.hardfork) !== null && _a !== void 0 ? _a : default_config_1.defaultHardhatNetworkParams.hardfork;\n\n      if ((0, hardforks_1.hardforkGte)(hardfork, hardforks_1.HardforkName.LONDON)) {\n        if (hardhatNetwork.minGasPrice !== undefined) {\n          errors.push(`Unexpected config HardhatConfig.networks.${constants_1.HARDHAT_NETWORK_NAME}.minGasPrice found - This field is not valid for networks with EIP-1559. Try an older hardfork or remove it.`);\n        }\n      } else {\n        if (hardhatNetwork.initialBaseFeePerGas !== undefined) {\n          errors.push(`Unexpected config HardhatConfig.networks.${constants_1.HARDHAT_NETWORK_NAME}.initialBaseFeePerGas found - This field is only valid for networks with EIP-1559. Try a newer hardfork or remove it.`);\n        }\n      }\n\n      if (hardhatNetwork.chains !== undefined) {\n        Object.entries(hardhatNetwork.chains).forEach(chainEntry => {\n          const [chainId, chainConfig] = chainEntry;\n          const {\n            hardforkHistory\n          } = chainConfig;\n\n          if (hardforkHistory !== undefined) {\n            Object.keys(hardforkHistory).forEach(hardforkName => {\n              if (!constants_1.HARDHAT_NETWORK_SUPPORTED_HARDFORKS.includes(hardforkName)) {\n                errors.push(getErrorMessage(`HardhatConfig.networks.${constants_1.HARDHAT_NETWORK_NAME}.chains[${chainId}].hardforkHistory`, hardforkName, `\"${constants_1.HARDHAT_NETWORK_SUPPORTED_HARDFORKS.join('\" | \"')}\"`));\n              }\n            });\n          }\n        });\n      }\n    }\n\n    for (const [networkName, netConfig] of Object.entries(config.networks)) {\n      if (networkName === constants_1.HARDHAT_NETWORK_NAME) {\n        continue;\n      }\n\n      if (networkName !== \"localhost\" || netConfig.url !== undefined) {\n        if (typeof netConfig.url !== \"string\") {\n          errors.push(getErrorMessage(`HardhatConfig.networks.${networkName}.url`, netConfig.url, \"string\"));\n        }\n      }\n\n      const {\n        accounts\n      } = netConfig,\n            configExceptAccounts = __rest(netConfig, [\"accounts\"]);\n\n      const netConfigResult = HttpNetworkConfig.decode(configExceptAccounts);\n\n      if (netConfigResult.isLeft()) {\n        errors.push(getErrorMessage(`HardhatConfig.networks.${networkName}`, netConfig, \"HttpNetworkConfig\"));\n      } // manual validation of accounts\n\n\n      if (Array.isArray(accounts)) {\n        accounts.forEach((privateKey, index) => validatePrivateKey(privateKey, index, networkName, errors));\n      } else if (typeof accounts === \"object\") {\n        const hdConfigResult = HDAccountsConfig.decode(accounts);\n\n        if (hdConfigResult.isLeft()) {\n          errors.push(getErrorMessage(`HardhatConfig.networks.${networkName}`, accounts, \"HttpNetworkHDAccountsConfig\"));\n        }\n      } else if (typeof accounts === \"string\") {\n        if (accounts !== \"remote\") {\n          errors.push(`Invalid 'accounts' entry for network '${networkName}': expected an array of accounts or the string 'remote', but got the string '${accounts}'`);\n        }\n      } else if (accounts !== undefined) {\n        errors.push(getErrorMessage(`HardhatConfig.networks.${networkName}.accounts`, accounts, '\"remote\" | string[] | HttpNetworkHDAccountsConfig | undefined'));\n      }\n    }\n  } // io-ts can get confused if there are errors that it can't understand.\n  // Especially around Hardhat Network's config. It will treat it as an HTTPConfig,\n  // and may give a loot of errors.\n\n\n  if (errors.length > 0) {\n    return errors;\n  }\n\n  const result = HardhatConfig.decode(config);\n\n  if (result.isRight()) {\n    return errors;\n  }\n\n  const ioTsErrors = exports.DotPathReporter.report(result);\n  return [...errors, ...ioTsErrors];\n}\n\nexports.getValidationErrors = getValidationErrors;","map":{"version":3,"mappings":"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","names":["stringify","v","isFinite","isNaN","JSON","getContextPath","context","keysPath","slice","map","c","key","join","type","name","getMessage","e","lastContext","length","message","undefined","getErrorMessage","value","path","expectedType","getPrivateKeyError","index","network","validatePrivateKey","privateKey","errors","push","pkWithPrefix","test","exports","decode","isLeft","failure","es","success","report","validation","fold","HEX_STRING_REGEX","DEC_STRING_REGEX","isHexString","trim","match","isDecimalString","t","Type","u","identity","isAddress","trimmed","startsWith","HardhatNetworkAccount","balance","commonHDAccountsFields","initialIndex","number","count","string","HardhatNetworkHDAccountsConfig","Object","mnemonic","accountsBalance","passphrase","Integer","num","parseInt","HardhatNetworkForkingConfig","enabled","boolean","url","blockNumber","HardhatNetworkMempoolConfig","order","keyof","constants_1","HardhatNetworkMiningConfig","auto","interval","union","tuple","mempool","isValidHardforkName","values","hardforks_1","includes","HardforkNameType","HardhatNetworkHardforkHistory","record","HardhatNetworkChainConfig","hardforkHistory","HardhatNetworkChainsConfig","commonNetworkConfigFields","chainId","from","gas","literal","gasPrice","gasMultiplier","HardhatNetworkConfig","hardfork","hf","accounts","array","blockGasLimit","minGasPrice","throwOnTransactionFailures","throwOnCallFailures","allowUnlimitedContractSize","initialDate","loggingEnabled","forking","mining","coinbase","chains","HDAccountsConfig","NetworkConfigAccounts","HttpHeaders","HttpNetworkConfig","httpHeaders","timeout","NetworkConfig","Networks","ProjectPaths","root","cache","artifacts","sources","tests","SingleSolcConfig","version","settings","any","MultiSolcConfig","compilers","overrides","SolidityConfig","HardhatConfig","defaultNetwork","networks","paths","solidity","validateConfig","config","getValidationErrors","errorList","errors_1","errors_list_1","GENERAL","INVALID_CONFIG","hardhatNetwork","configExceptAccounts","netConfigResult","Array","isArray","account","entries","hdConfigResult","_a","default_config_1","LONDON","initialBaseFeePerGas","forEach","chainEntry","chainConfig","keys","hardforkName","networkName","netConfig","result","isRight","ioTsErrors"],"sourceRoot":"","sources":["../../../src/internal/core/config/config-validation.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}