{"ast":null,"code":"var _jsxFileName = \"/Users/ja/Desktop/MyProjects/NalaSwap/webapp/nalaswap/src/pages/NFTStakingPage.js\",\n    _s = $RefreshSig$();\n\nimport * as React from 'react';\nimport { useEffect, useState } from \"react\";\nimport nftStakingABI from \"../ABIS/NFTStaking.json\";\nimport nalaTokenABI from \"../ABIS/NalaTokenABI.json\";\nimport EyesNftABI from \"../ABIS/NFTCollection.json\";\nimport { BigNumber, Contract, ethers, utils } from 'ethers';\nimport { formatUnits, parseEther } from '@ethersproject/units';\nimport contractAddresses from \"../utils/contractsAddresses.json\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function StakePage() {\n  _s();\n\n  const [errorMessage, setErrorMessage] = useState(\"\");\n  const [myStakedNfts, setMyStakedNfts] = useState([]);\n  const [rewardsBalance, setRewardsBalance] = useState(0);\n  const [unstakedNFTS, setUnstakedNFTS] = useState([]);\n  const nftAddress = contractAddresses.nftCollectionAddress;\n  const nftStakingAddress = contractAddresses.nftStakingContract;\n  const nalaTokenAddress = contractAddresses.nalaTokenAddress;\n  useEffect(() => {\n    getRewardsBalance();\n\n    const setAndDisplay = async () => {\n      setMyStakedNfts(await getNFTSStaked());\n    };\n\n    const setAndDisplayUnstakedNFTS = async () => {\n      setUnstakedNFTS(await getNFTBalance());\n    };\n\n    setAndDisplay();\n    setAndDisplayUnstakedNFTS();\n  }, []);\n\n  const stake = async nftId => {\n    if (typeof window.ethereum !== 'undefined') {\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      const signer = provider.getSigner();\n\n      if (signer) {\n        const nftStakingContract = new ethers.Contract(nftStakingAddress, nftStakingABI, signer);\n        const eyesNft = new ethers.Contract(nftAddress, EyesNftABI, signer);\n        await eyesNft.setApprovalForAll(nftStakingAddress, true);\n        await nftStakingContract.stake(0, [nftId]);\n      }\n    }\n  };\n\n  const unStake = async nftId => {\n    if (typeof window.ethereum !== 'undefined') {\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      const signer = provider.getSigner();\n\n      if (signer) {\n        const nftStakingContract = new ethers.Contract(nftStakingAddress, nftStakingABI, signer);\n        await nftStakingContract.unstake(0, [nftId]);\n      }\n    }\n  };\n\n  const claimRewards = async nftId => {\n    if (typeof window.ethereum !== 'undefined') {\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      const signer = provider.getSigner();\n\n      if (signer) {\n        const nftStakingContract = new ethers.Contract(nftStakingAddress, nftStakingABI, signer);\n        await nftStakingContract.claim(0, [nftId]);\n      }\n    }\n  };\n\n  const getRewardsBalance = async () => {\n    if (typeof window.ethereum !== 'undefined') {\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      const signer = provider.getSigner();\n\n      if (signer) {\n        const nftStakingContract = new ethers.Contract(nftStakingAddress, nftStakingABI, signer);\n        const balance = await nftStakingContract.earningInfo(signer.getAddress(), [1, 2]); // FIX\n\n        const tokensOfOwner = await nftStakingContract.tokensOfOwner(0, signer.getAddress());\n        setRewardsBalance(formatUnits(BigNumber.from(balance.toString(), 18)));\n      }\n    }\n  };\n\n  const getNFTSStaked = async () => {\n    let nftsIdsArr = [];\n    let nftMetadataArr = [];\n\n    if (typeof window.ethereum !== 'undefined') {\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      const signer = provider.getSigner();\n\n      if (signer) {\n        const nftStakingContract = new ethers.Contract(nftStakingAddress, nftStakingABI, signer);\n        const eyesNft = new ethers.Contract(nftAddress, EyesNftABI, signer);\n        nftsIdsArr = await nftStakingContract.tokensOfOwner(0, signer.getAddress());\n\n        for (let index = 0; index < nftsIdsArr.length; index++) {\n          const response = await fetch(`https://gateway.pinata.cloud/ipfs/QmSxkTx7LDNvYYJFFtSVDafd4DD4sAUYD34YydcTML6N7X/${nftsIdsArr[index]}.json`);\n          const responseJson = await response.json();\n          nftMetadataArr.push(responseJson);\n        }\n      }\n    }\n\n    return nftMetadataArr;\n  };\n\n  const getNFTBalance = async () => {\n    let nftMetadataArr = [];\n\n    if (typeof window.ethereum !== 'undefined') {\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      const signer = provider.getSigner();\n\n      if (signer) {\n        const eyesNft = new ethers.Contract(nftAddress, EyesNftABI, signer);\n        const amountOfNfts = await eyesNft.balanceOf(signer.getAddress());\n\n        for (let index = 0; index < amountOfNfts; index++) {\n          const nftID = await eyesNft.tokenOfOwnerByIndex(signer.getAddress(), index);\n          const response = await fetch(`https://gateway.pinata.cloud/ipfs/QmSxkTx7LDNvYYJFFtSVDafd4DD4sAUYD34YydcTML6N7X/${nftID}.json`);\n          const responseJson = await response.json();\n          nftMetadataArr.push(responseJson);\n        }\n      }\n    }\n\n    return nftMetadataArr;\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: \"flex\",\n        flexDirection: \"row\",\n        justifyContent: \"space-around\"\n      },\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => claimRewards(1),\n        children: \"Claim rewards\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Rewards balance: \", rewardsBalance]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 12\n    }, this), \"NFT'S Staked currently:\", /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: \"flex\",\n        flexDirection: \"row\",\n        justifyContent: \"space-around\"\n      },\n      children: [myStakedNfts.map(nft => /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: \"flex\",\n          flexDirection: \"column\",\n          justifyContent: \"space-around\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: nft.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n          style: {\n            width: \"100px\",\n            borderRadius: \"10px\"\n          },\n          src: `https://gateway.pinata.cloud/ipfs/QmcEfnhCfPn5SFA9PQ6YRELsTrDRSkapYiHwEAifuWtNQp/${nft.edition}.png`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => unStake(nft.edition),\n          children: \"Unstake\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 21\n      }, this)), unstakedNFTS.map(nft => /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: \"flex\",\n          flexDirection: \"column\",\n          justifyContent: \"space-around\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: nft.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n          style: {\n            width: \"100px\",\n            borderRadius: \"10px\"\n          },\n          src: `https://gateway.pinata.cloud/ipfs/QmcEfnhCfPn5SFA9PQ6YRELsTrDRSkapYiHwEAifuWtNQp/${nft.edition}.png`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 136,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => stake(nft.edition),\n          children: \"Stake\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 21\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 12\n    }, this)]\n  }, void 0, true);\n}\n\n_s(StakePage, \"jQ7n1chV2IWF7OCs3GPxod+A97Q=\");\n\n_c = StakePage;\n\nvar _c;\n\n$RefreshReg$(_c, \"StakePage\");","map":{"version":3,"names":["React","useEffect","useState","nftStakingABI","nalaTokenABI","EyesNftABI","BigNumber","Contract","ethers","utils","formatUnits","parseEther","contractAddresses","StakePage","errorMessage","setErrorMessage","myStakedNfts","setMyStakedNfts","rewardsBalance","setRewardsBalance","unstakedNFTS","setUnstakedNFTS","nftAddress","nftCollectionAddress","nftStakingAddress","nftStakingContract","nalaTokenAddress","getRewardsBalance","setAndDisplay","getNFTSStaked","setAndDisplayUnstakedNFTS","getNFTBalance","stake","nftId","window","ethereum","provider","providers","Web3Provider","signer","getSigner","eyesNft","setApprovalForAll","unStake","unstake","claimRewards","claim","balance","earningInfo","getAddress","tokensOfOwner","from","toString","nftsIdsArr","nftMetadataArr","index","length","response","fetch","responseJson","json","push","amountOfNfts","balanceOf","nftID","tokenOfOwnerByIndex","display","flexDirection","justifyContent","map","nft","name","width","borderRadius","edition"],"sources":["/Users/ja/Desktop/MyProjects/NalaSwap/webapp/nalaswap/src/pages/NFTStakingPage.js"],"sourcesContent":["import * as React from 'react';\nimport {useEffect, useState} from \"react\";\nimport nftStakingABI from \"../ABIS/NFTStaking.json\";\nimport nalaTokenABI from \"../ABIS/NalaTokenABI.json\";\nimport EyesNftABI from \"../ABIS/NFTCollection.json\";\nimport { BigNumber, Contract, ethers, utils } from 'ethers';\nimport { formatUnits, parseEther } from '@ethersproject/units';\nimport contractAddresses from \"../utils/contractsAddresses.json\";\n\nexport default function StakePage () {\n\n    const [errorMessage, setErrorMessage] = useState(\"\");\n    const [myStakedNfts, setMyStakedNfts] = useState([]);\n    const [rewardsBalance, setRewardsBalance] = useState(0);\n    const [unstakedNFTS, setUnstakedNFTS] = useState([]);\n\n    const nftAddress = contractAddresses.nftCollectionAddress;\n    const nftStakingAddress = contractAddresses.nftStakingContract;\n    const nalaTokenAddress = contractAddresses.nalaTokenAddress;\n\n    useEffect(() => {\n        getRewardsBalance();\n        const setAndDisplay = async () => {setMyStakedNfts(await getNFTSStaked())};\n        const setAndDisplayUnstakedNFTS = async () => {setUnstakedNFTS(await getNFTBalance())};\n        setAndDisplay();\n        setAndDisplayUnstakedNFTS();\n    }, []);\n\n    const stake = async (nftId) => {\n        if (typeof window.ethereum !== 'undefined') {\n            const provider = new ethers.providers.Web3Provider(window.ethereum);\n            const signer = provider.getSigner();\n            if (signer) {\n                const nftStakingContract = new ethers.Contract(nftStakingAddress, nftStakingABI, signer);\n                const eyesNft = new ethers.Contract(nftAddress, EyesNftABI, signer);\n                await eyesNft.setApprovalForAll(nftStakingAddress, true)\n                await nftStakingContract.stake(0, [nftId]);\n            }\n        }\n    }\n\n    const unStake = async (nftId) => {\n        if (typeof window.ethereum !== 'undefined') {\n            const provider = new ethers.providers.Web3Provider(window.ethereum);\n            const signer = provider.getSigner();\n            if (signer) {\n                const nftStakingContract = new ethers.Contract(nftStakingAddress, nftStakingABI, signer);\n                await nftStakingContract.unstake(0, [nftId]);\n            }\n        }\n    }\n\n    const claimRewards = async (nftId) => {\n        if (typeof window.ethereum !== 'undefined') {\n            const provider = new ethers.providers.Web3Provider(window.ethereum);\n            const signer = provider.getSigner();\n            if (signer) {\n                const nftStakingContract = new ethers.Contract(nftStakingAddress, nftStakingABI, signer);\n                await nftStakingContract.claim(0, [nftId]);\n            }\n        }\n    }\n\n    const getRewardsBalance = async () => {\n        if (typeof window.ethereum !== 'undefined') {\n            const provider = new ethers.providers.Web3Provider(window.ethereum);\n            const signer = provider.getSigner();\n            if (signer) {\n                const nftStakingContract = new ethers.Contract(nftStakingAddress, nftStakingABI, signer);\n                const balance = await nftStakingContract.earningInfo(signer.getAddress(), [1, 2]); // FIX\n                const tokensOfOwner = await nftStakingContract.tokensOfOwner(0, signer.getAddress());\n                setRewardsBalance(formatUnits(BigNumber.from(balance.toString(), 18)));\n            }\n        }\n    }\n\n    const getNFTSStaked = async () => {\n        let nftsIdsArr = [];\n        let nftMetadataArr = [];\n        if (typeof window.ethereum !== 'undefined') {\n            const provider = new ethers.providers.Web3Provider(window.ethereum);\n            const signer = provider.getSigner();\n            if (signer) {\n                const nftStakingContract = new ethers.Contract(nftStakingAddress, nftStakingABI, signer);\n                const eyesNft = new ethers.Contract(nftAddress, EyesNftABI, signer);\n                nftsIdsArr = await nftStakingContract.tokensOfOwner(0, signer.getAddress());\n                for (let index = 0; index < nftsIdsArr.length; index++) {\n                    const response = await fetch(`https://gateway.pinata.cloud/ipfs/QmSxkTx7LDNvYYJFFtSVDafd4DD4sAUYD34YydcTML6N7X/${nftsIdsArr[index]}.json`)\n                    const responseJson = await response.json();\n                    nftMetadataArr.push(responseJson);\n                }\n\n            }\n        }\n        return nftMetadataArr;\n    }\n\n    const getNFTBalance = async () => {\n        let nftMetadataArr = [];\n        if (typeof window.ethereum !== 'undefined') {\n            const provider = new ethers.providers.Web3Provider(window.ethereum);\n            const signer = provider.getSigner();\n            if (signer) {\n                const eyesNft = new ethers.Contract(nftAddress, EyesNftABI, signer);\n                const amountOfNfts = await eyesNft.balanceOf(signer.getAddress());\n                for (let index = 0; index < amountOfNfts; index++) {\n                    const nftID = await eyesNft.tokenOfOwnerByIndex(signer.getAddress(), index);\n                    const response = await fetch(`https://gateway.pinata.cloud/ipfs/QmSxkTx7LDNvYYJFFtSVDafd4DD4sAUYD34YydcTML6N7X/${nftID}.json`)\n                    const responseJson = await response.json();\n                    nftMetadataArr.push(responseJson);\n                }\n\n            }\n        }\n        return nftMetadataArr;\n    }\n\n    return (\n        <>\n            <div style={{display: \"flex\", flexDirection:\"row\", justifyContent: \"space-around\"}}>\n                <button onClick={() => claimRewards(1)}>Claim rewards</button>\n            </div>\n           <p>Rewards balance: {rewardsBalance}</p>\n           NFT'S Staked currently:\n           <div style={{display: \"flex\", flexDirection:\"row\", justifyContent: \"space-around\"}}>\n                {myStakedNfts.map(nft => \n                    <div style={{display: \"flex\", flexDirection:\"column\", justifyContent: \"space-around\"}}>\n                        <p>{nft.name}</p>\n                        <img style={{width: \"100px\", borderRadius: \"10px\"}} src={`https://gateway.pinata.cloud/ipfs/QmcEfnhCfPn5SFA9PQ6YRELsTrDRSkapYiHwEAifuWtNQp/${nft.edition}.png`}/>\n                        <button onClick={() => unStake(nft.edition)}>Unstake</button>\n                    </div>\n                )}\n                {unstakedNFTS.map(nft => \n                    <div style={{display: \"flex\", flexDirection:\"column\", justifyContent: \"space-around\"}}>\n                        <p>{nft.name}</p>\n                        <img style={{width: \"100px\", borderRadius: \"10px\"}} src={`https://gateway.pinata.cloud/ipfs/QmcEfnhCfPn5SFA9PQ6YRELsTrDRSkapYiHwEAifuWtNQp/${nft.edition}.png`}/>\n                        <button onClick={() => stake(nft.edition)}>Stake</button>\n                    </div>\n                )}\n            </div>\n        </>\n    )\n}"],"mappings":";;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAAQC,SAAR,EAAmBC,QAAnB,QAAkC,OAAlC;AACA,OAAOC,aAAP,MAA0B,yBAA1B;AACA,OAAOC,YAAP,MAAyB,2BAAzB;AACA,OAAOC,UAAP,MAAuB,4BAAvB;AACA,SAASC,SAAT,EAAoBC,QAApB,EAA8BC,MAA9B,EAAsCC,KAAtC,QAAmD,QAAnD;AACA,SAASC,WAAT,EAAsBC,UAAtB,QAAwC,sBAAxC;AACA,OAAOC,iBAAP,MAA8B,kCAA9B;;;AAEA,eAAe,SAASC,SAAT,GAAsB;EAAA;;EAEjC,MAAM,CAACC,YAAD,EAAeC,eAAf,IAAkCb,QAAQ,CAAC,EAAD,CAAhD;EACA,MAAM,CAACc,YAAD,EAAeC,eAAf,IAAkCf,QAAQ,CAAC,EAAD,CAAhD;EACA,MAAM,CAACgB,cAAD,EAAiBC,iBAAjB,IAAsCjB,QAAQ,CAAC,CAAD,CAApD;EACA,MAAM,CAACkB,YAAD,EAAeC,eAAf,IAAkCnB,QAAQ,CAAC,EAAD,CAAhD;EAEA,MAAMoB,UAAU,GAAGV,iBAAiB,CAACW,oBAArC;EACA,MAAMC,iBAAiB,GAAGZ,iBAAiB,CAACa,kBAA5C;EACA,MAAMC,gBAAgB,GAAGd,iBAAiB,CAACc,gBAA3C;EAEAzB,SAAS,CAAC,MAAM;IACZ0B,iBAAiB;;IACjB,MAAMC,aAAa,GAAG,YAAY;MAACX,eAAe,CAAC,MAAMY,aAAa,EAApB,CAAf;IAAuC,CAA1E;;IACA,MAAMC,yBAAyB,GAAG,YAAY;MAACT,eAAe,CAAC,MAAMU,aAAa,EAApB,CAAf;IAAuC,CAAtF;;IACAH,aAAa;IACbE,yBAAyB;EAC5B,CANQ,EAMN,EANM,CAAT;;EAQA,MAAME,KAAK,GAAG,MAAOC,KAAP,IAAiB;IAC3B,IAAI,OAAOC,MAAM,CAACC,QAAd,KAA2B,WAA/B,EAA4C;MACxC,MAAMC,QAAQ,GAAG,IAAI5B,MAAM,CAAC6B,SAAP,CAAiBC,YAArB,CAAkCJ,MAAM,CAACC,QAAzC,CAAjB;MACA,MAAMI,MAAM,GAAGH,QAAQ,CAACI,SAAT,EAAf;;MACA,IAAID,MAAJ,EAAY;QACR,MAAMd,kBAAkB,GAAG,IAAIjB,MAAM,CAACD,QAAX,CAAoBiB,iBAApB,EAAuCrB,aAAvC,EAAsDoC,MAAtD,CAA3B;QACA,MAAME,OAAO,GAAG,IAAIjC,MAAM,CAACD,QAAX,CAAoBe,UAApB,EAAgCjB,UAAhC,EAA4CkC,MAA5C,CAAhB;QACA,MAAME,OAAO,CAACC,iBAAR,CAA0BlB,iBAA1B,EAA6C,IAA7C,CAAN;QACA,MAAMC,kBAAkB,CAACO,KAAnB,CAAyB,CAAzB,EAA4B,CAACC,KAAD,CAA5B,CAAN;MACH;IACJ;EACJ,CAXD;;EAaA,MAAMU,OAAO,GAAG,MAAOV,KAAP,IAAiB;IAC7B,IAAI,OAAOC,MAAM,CAACC,QAAd,KAA2B,WAA/B,EAA4C;MACxC,MAAMC,QAAQ,GAAG,IAAI5B,MAAM,CAAC6B,SAAP,CAAiBC,YAArB,CAAkCJ,MAAM,CAACC,QAAzC,CAAjB;MACA,MAAMI,MAAM,GAAGH,QAAQ,CAACI,SAAT,EAAf;;MACA,IAAID,MAAJ,EAAY;QACR,MAAMd,kBAAkB,GAAG,IAAIjB,MAAM,CAACD,QAAX,CAAoBiB,iBAApB,EAAuCrB,aAAvC,EAAsDoC,MAAtD,CAA3B;QACA,MAAMd,kBAAkB,CAACmB,OAAnB,CAA2B,CAA3B,EAA8B,CAACX,KAAD,CAA9B,CAAN;MACH;IACJ;EACJ,CATD;;EAWA,MAAMY,YAAY,GAAG,MAAOZ,KAAP,IAAiB;IAClC,IAAI,OAAOC,MAAM,CAACC,QAAd,KAA2B,WAA/B,EAA4C;MACxC,MAAMC,QAAQ,GAAG,IAAI5B,MAAM,CAAC6B,SAAP,CAAiBC,YAArB,CAAkCJ,MAAM,CAACC,QAAzC,CAAjB;MACA,MAAMI,MAAM,GAAGH,QAAQ,CAACI,SAAT,EAAf;;MACA,IAAID,MAAJ,EAAY;QACR,MAAMd,kBAAkB,GAAG,IAAIjB,MAAM,CAACD,QAAX,CAAoBiB,iBAApB,EAAuCrB,aAAvC,EAAsDoC,MAAtD,CAA3B;QACA,MAAMd,kBAAkB,CAACqB,KAAnB,CAAyB,CAAzB,EAA4B,CAACb,KAAD,CAA5B,CAAN;MACH;IACJ;EACJ,CATD;;EAWA,MAAMN,iBAAiB,GAAG,YAAY;IAClC,IAAI,OAAOO,MAAM,CAACC,QAAd,KAA2B,WAA/B,EAA4C;MACxC,MAAMC,QAAQ,GAAG,IAAI5B,MAAM,CAAC6B,SAAP,CAAiBC,YAArB,CAAkCJ,MAAM,CAACC,QAAzC,CAAjB;MACA,MAAMI,MAAM,GAAGH,QAAQ,CAACI,SAAT,EAAf;;MACA,IAAID,MAAJ,EAAY;QACR,MAAMd,kBAAkB,GAAG,IAAIjB,MAAM,CAACD,QAAX,CAAoBiB,iBAApB,EAAuCrB,aAAvC,EAAsDoC,MAAtD,CAA3B;QACA,MAAMQ,OAAO,GAAG,MAAMtB,kBAAkB,CAACuB,WAAnB,CAA+BT,MAAM,CAACU,UAAP,EAA/B,EAAoD,CAAC,CAAD,EAAI,CAAJ,CAApD,CAAtB,CAFQ,CAE2E;;QACnF,MAAMC,aAAa,GAAG,MAAMzB,kBAAkB,CAACyB,aAAnB,CAAiC,CAAjC,EAAoCX,MAAM,CAACU,UAAP,EAApC,CAA5B;QACA9B,iBAAiB,CAACT,WAAW,CAACJ,SAAS,CAAC6C,IAAV,CAAeJ,OAAO,CAACK,QAAR,EAAf,EAAmC,EAAnC,CAAD,CAAZ,CAAjB;MACH;IACJ;EACJ,CAXD;;EAaA,MAAMvB,aAAa,GAAG,YAAY;IAC9B,IAAIwB,UAAU,GAAG,EAAjB;IACA,IAAIC,cAAc,GAAG,EAArB;;IACA,IAAI,OAAOpB,MAAM,CAACC,QAAd,KAA2B,WAA/B,EAA4C;MACxC,MAAMC,QAAQ,GAAG,IAAI5B,MAAM,CAAC6B,SAAP,CAAiBC,YAArB,CAAkCJ,MAAM,CAACC,QAAzC,CAAjB;MACA,MAAMI,MAAM,GAAGH,QAAQ,CAACI,SAAT,EAAf;;MACA,IAAID,MAAJ,EAAY;QACR,MAAMd,kBAAkB,GAAG,IAAIjB,MAAM,CAACD,QAAX,CAAoBiB,iBAApB,EAAuCrB,aAAvC,EAAsDoC,MAAtD,CAA3B;QACA,MAAME,OAAO,GAAG,IAAIjC,MAAM,CAACD,QAAX,CAAoBe,UAApB,EAAgCjB,UAAhC,EAA4CkC,MAA5C,CAAhB;QACAc,UAAU,GAAG,MAAM5B,kBAAkB,CAACyB,aAAnB,CAAiC,CAAjC,EAAoCX,MAAM,CAACU,UAAP,EAApC,CAAnB;;QACA,KAAK,IAAIM,KAAK,GAAG,CAAjB,EAAoBA,KAAK,GAAGF,UAAU,CAACG,MAAvC,EAA+CD,KAAK,EAApD,EAAwD;UACpD,MAAME,QAAQ,GAAG,MAAMC,KAAK,CAAE,oFAAmFL,UAAU,CAACE,KAAD,CAAQ,OAAvG,CAA5B;UACA,MAAMI,YAAY,GAAG,MAAMF,QAAQ,CAACG,IAAT,EAA3B;UACAN,cAAc,CAACO,IAAf,CAAoBF,YAApB;QACH;MAEJ;IACJ;;IACD,OAAOL,cAAP;EACH,CAnBD;;EAqBA,MAAMvB,aAAa,GAAG,YAAY;IAC9B,IAAIuB,cAAc,GAAG,EAArB;;IACA,IAAI,OAAOpB,MAAM,CAACC,QAAd,KAA2B,WAA/B,EAA4C;MACxC,MAAMC,QAAQ,GAAG,IAAI5B,MAAM,CAAC6B,SAAP,CAAiBC,YAArB,CAAkCJ,MAAM,CAACC,QAAzC,CAAjB;MACA,MAAMI,MAAM,GAAGH,QAAQ,CAACI,SAAT,EAAf;;MACA,IAAID,MAAJ,EAAY;QACR,MAAME,OAAO,GAAG,IAAIjC,MAAM,CAACD,QAAX,CAAoBe,UAApB,EAAgCjB,UAAhC,EAA4CkC,MAA5C,CAAhB;QACA,MAAMuB,YAAY,GAAG,MAAMrB,OAAO,CAACsB,SAAR,CAAkBxB,MAAM,CAACU,UAAP,EAAlB,CAA3B;;QACA,KAAK,IAAIM,KAAK,GAAG,CAAjB,EAAoBA,KAAK,GAAGO,YAA5B,EAA0CP,KAAK,EAA/C,EAAmD;UAC/C,MAAMS,KAAK,GAAG,MAAMvB,OAAO,CAACwB,mBAAR,CAA4B1B,MAAM,CAACU,UAAP,EAA5B,EAAiDM,KAAjD,CAApB;UACA,MAAME,QAAQ,GAAG,MAAMC,KAAK,CAAE,oFAAmFM,KAAM,OAA3F,CAA5B;UACA,MAAML,YAAY,GAAG,MAAMF,QAAQ,CAACG,IAAT,EAA3B;UACAN,cAAc,CAACO,IAAf,CAAoBF,YAApB;QACH;MAEJ;IACJ;;IACD,OAAOL,cAAP;EACH,CAlBD;;EAoBA,oBACI;IAAA,wBACI;MAAK,KAAK,EAAE;QAACY,OAAO,EAAE,MAAV;QAAkBC,aAAa,EAAC,KAAhC;QAAuCC,cAAc,EAAE;MAAvD,CAAZ;MAAA,uBACI;QAAQ,OAAO,EAAE,MAAMvB,YAAY,CAAC,CAAD,CAAnC;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IADJ;MAAA;MAAA;MAAA;IAAA,QADJ,eAIG;MAAA,gCAAqB3B,cAArB;IAAA;MAAA;MAAA;MAAA;IAAA,QAJH,0CAMG;MAAK,KAAK,EAAE;QAACgD,OAAO,EAAE,MAAV;QAAkBC,aAAa,EAAC,KAAhC;QAAuCC,cAAc,EAAE;MAAvD,CAAZ;MAAA,WACMpD,YAAY,CAACqD,GAAb,CAAiBC,GAAG,iBACjB;QAAK,KAAK,EAAE;UAACJ,OAAO,EAAE,MAAV;UAAkBC,aAAa,EAAC,QAAhC;UAA0CC,cAAc,EAAE;QAA1D,CAAZ;QAAA,wBACI;UAAA,UAAIE,GAAG,CAACC;QAAR;UAAA;UAAA;UAAA;QAAA,QADJ,eAEI;UAAK,KAAK,EAAE;YAACC,KAAK,EAAE,OAAR;YAAiBC,YAAY,EAAE;UAA/B,CAAZ;UAAoD,GAAG,EAAG,oFAAmFH,GAAG,CAACI,OAAQ;QAAzJ;UAAA;UAAA;UAAA;QAAA,QAFJ,eAGI;UAAQ,OAAO,EAAE,MAAM/B,OAAO,CAAC2B,GAAG,CAACI,OAAL,CAA9B;UAAA;QAAA;UAAA;UAAA;UAAA;QAAA,QAHJ;MAAA;QAAA;QAAA;QAAA;MAAA,QADH,CADN,EAQMtD,YAAY,CAACiD,GAAb,CAAiBC,GAAG,iBACjB;QAAK,KAAK,EAAE;UAACJ,OAAO,EAAE,MAAV;UAAkBC,aAAa,EAAC,QAAhC;UAA0CC,cAAc,EAAE;QAA1D,CAAZ;QAAA,wBACI;UAAA,UAAIE,GAAG,CAACC;QAAR;UAAA;UAAA;UAAA;QAAA,QADJ,eAEI;UAAK,KAAK,EAAE;YAACC,KAAK,EAAE,OAAR;YAAiBC,YAAY,EAAE;UAA/B,CAAZ;UAAoD,GAAG,EAAG,oFAAmFH,GAAG,CAACI,OAAQ;QAAzJ;UAAA;UAAA;UAAA;QAAA,QAFJ,eAGI;UAAQ,OAAO,EAAE,MAAM1C,KAAK,CAACsC,GAAG,CAACI,OAAL,CAA5B;UAAA;QAAA;UAAA;UAAA;UAAA;QAAA,QAHJ;MAAA;QAAA;QAAA;QAAA;MAAA,QADH,CARN;IAAA;MAAA;MAAA;MAAA;IAAA,QANH;EAAA,gBADJ;AAyBH;;GArIuB7D,S;;KAAAA,S"},"metadata":{},"sourceType":"module"}