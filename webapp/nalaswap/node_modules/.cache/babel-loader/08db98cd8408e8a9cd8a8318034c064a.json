{"ast":null,"code":"var _jsxFileName = \"/Users/ja/Desktop/MyProjects/NalaSwap/webapp/nalaswap/src/pages/StakePage.js\",\n    _s = $RefreshSig$();\n\nimport * as React from 'react';\nimport stakingContractABI from \"../ABIS/StakingABI.json\";\nimport { BigNumber, Contract, ethers, utils } from 'ethers';\nimport { formatUnits, parseEther } from '@ethersproject/units';\nimport { useEffect, useState, Fragment } from \"react\";\nimport Box from '@mui/material/Box';\nimport ButtonGroup from '@mui/material/ButtonGroup';\nimport Button from '@mui/material/Button';\nimport TextField from '@mui/material/TextField';\nimport contractAddresses from \"../utils/contractsAddresses.json\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function StakePage() {\n  _s();\n\n  const [balance, setBalance] = useState(0);\n  const [balanceWithRewards, setBalanceWithRewards] = useState(0);\n  const [amount, setAmount] = useState(0);\n  const [rewardsPerDay, setRewardsPerDay] = useState(0);\n  const [errorMessage, setErrorMessage] = useState(\"\");\n  const contractAddress = contractAddresses.stakingContract;\n  const nlaTokenAddress = contractAddresses.nalaTokenAddress;\n  useEffect(() => {\n    getUserStakedAmount();\n    getRewardsPerDay();\n    getUserBalanceWithRewards();\n  }, []);\n\n  const stakeTokens = async amount => {\n    if (typeof window.ethereum !== 'undefined') {\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      const signer = provider.getSigner();\n\n      if (signer && parseInt(amount) > 0) {\n        const stakingContract = new ethers.Contract(contractAddress, stakingContractABI, signer);\n        const nlaToken = new ethers.Contract(nlaTokenAddress, [\"function approve(address _spender, uint256 _value) public returns (bool success)\"], signer);\n        nlaToken.connect(signer).approve(stakingContract.address, \"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\");\n\n        try {\n          const tx = await stakingContract.connect(signer).stakeTokens(ethers.utils.parseEther(amount.toString()));\n          tx.wait();\n          console.log(tx);\n        } catch (error) {\n          console.log(\"Transaction error\");\n        }\n      } else {\n        setErrorMessage(\"Cannot stake 0 tokens\");\n      }\n    }\n  };\n\n  const withdrawTokens = async amount => {\n    if (typeof window.ethereum !== 'undefined') {\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      const signer = provider.getSigner();\n\n      if (signer && parseInt(amount) > 0) {\n        const stakingContract = new ethers.Contract(contractAddress, stakingContractABI, signer);\n        const nlaToken = new ethers.Contract(nlaTokenAddress, [\"function approve(address _spender, uint256 _value) public returns (bool success)\"], signer);\n        nlaToken.connect(signer).approve(stakingContract.address, \"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\");\n\n        try {\n          const tx = await stakingContract.connect(signer).withdrawTokens(ethers.utils.parseEther(amount.toString()));\n          tx.wait();\n        } catch (error) {\n          console.log(\"Transaction error\");\n        }\n      } else {\n        setErrorMessage(\"Cannot stake 0 tokens\");\n      }\n    }\n  };\n\n  const getUserStakedAmount = async () => {\n    let balance;\n\n    if (typeof window.ethereum !== 'undefined') {\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      const signer = provider.getSigner();\n\n      if (signer) {\n        const stakingContract = new ethers.Contract(contractAddress, stakingContractABI, signer);\n\n        try {\n          balance = await stakingContract.stakerBalance(signer.getAddress());\n        } catch (error) {\n          console.log(\"Transaction error\");\n        }\n      }\n    } // console.log(formatUnits(BigNumber.from(balance.toString(), 18)));\n\n\n    setBalance(formatUnits(BigNumber.from(balance.toString(), 18)));\n  };\n\n  const getUserBalanceWithRewards = async () => {\n    let balance;\n\n    if (typeof window.ethereum !== 'undefined') {\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      const signer = provider.getSigner();\n\n      if (signer) {\n        const stakingContract = new ethers.Contract(contractAddress, stakingContractABI, signer);\n\n        try {\n          balance = await stakingContract.getBalanceWithRewards(signer.getAddress());\n        } catch (error) {\n          console.log(\"Transaction error\");\n        }\n      }\n    } // console.log(formatUnits(BigNumber.from(balance.toString(), 18)));\n\n\n    setBalanceWithRewards(formatUnits(BigNumber.from(balance.toString(), 18)));\n  };\n\n  const getRewardsPerDay = async () => {\n    let rewards;\n\n    if (typeof window.ethereum !== 'undefined') {\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      const signer = provider.getSigner();\n\n      if (signer) {\n        const stakingContract = new ethers.Contract(contractAddress, stakingContractABI, signer);\n\n        try {\n          rewards = await stakingContract.getRewardsPerDay(signer.getAddress());\n        } catch (error) {\n          console.log(\"Transaction error\");\n        }\n      }\n    }\n\n    setRewardsPerDay(formatUnits(BigNumber.from(rewards.toString(), 18)));\n  };\n\n  const buttons = [/*#__PURE__*/_jsxDEV(Button, {\n    onClick: () => stakeTokens(amount),\n    children: \"Deposit\"\n  }, \"Deposit\", false, {\n    fileName: _jsxFileName,\n    lineNumber: 138,\n    columnNumber: 9\n  }, this), /*#__PURE__*/_jsxDEV(Button, {\n    onClick: () => withdrawTokens(amount),\n    children: \"Withdraw\"\n  }, \"Withdraw\", false, {\n    fileName: _jsxFileName,\n    lineNumber: 139,\n    columnNumber: 9\n  }, this)];\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"small\", {\n      children: \"Stake your NLA tokens\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      component: \"form\",\n      sx: {\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center',\n        '& > *': {\n          m: 1\n        }\n      },\n      noValidate: true,\n      autoComplete: \"off\",\n      style: {\n        borderRadius: \"10px\",\n        border: \"2px solid #502199\",\n        marginBottom: \"5%\",\n        paddingBottom: \"10px\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          style: {\n            fontSize: \"25px\"\n          },\n          children: [\"Total staked: \", balance]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 160,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          style: {\n            fontSize: \"25px\"\n          },\n          children: [\"Current balance: \", balanceWithRewards]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 161,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          style: {\n            fontSize: \"25px\"\n          },\n          children: [\"Rewards per day: \", rewardsPerDay]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 162,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          style: {\n            fontSize: \"25px\"\n          },\n          children: [\"APR% \", balance]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 163,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(ButtonGroup, {\n        size: \"large\",\n        \"aria-label\": \"large button group\",\n        children: buttons\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(TextField, {\n        id: \"outlined-basic\",\n        label: \"Amount...\",\n        variant: \"outlined\",\n        size: \"small\",\n        type: \"number\",\n        onChange: e => setAmount(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"small\", {\n        style: {\n          color: \"red\"\n        },\n        children: errorMessage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 14\n    }, this)]\n  }, void 0, true);\n}\n\n_s(StakePage, \"Ajx0DbMGZRMn0I9hC1VxggLWyWY=\");\n\n_c = StakePage;\n\nvar _c;\n\n$RefreshReg$(_c, \"StakePage\");","map":{"version":3,"names":["React","stakingContractABI","BigNumber","Contract","ethers","utils","formatUnits","parseEther","useEffect","useState","Fragment","Box","ButtonGroup","Button","TextField","contractAddresses","StakePage","balance","setBalance","balanceWithRewards","setBalanceWithRewards","amount","setAmount","rewardsPerDay","setRewardsPerDay","errorMessage","setErrorMessage","contractAddress","stakingContract","nlaTokenAddress","nalaTokenAddress","getUserStakedAmount","getRewardsPerDay","getUserBalanceWithRewards","stakeTokens","window","ethereum","provider","providers","Web3Provider","signer","getSigner","parseInt","nlaToken","connect","approve","address","tx","toString","wait","console","log","error","withdrawTokens","stakerBalance","getAddress","from","getBalanceWithRewards","rewards","buttons","display","flexDirection","alignItems","m","borderRadius","border","marginBottom","paddingBottom","fontSize","e","target","value","color"],"sources":["/Users/ja/Desktop/MyProjects/NalaSwap/webapp/nalaswap/src/pages/StakePage.js"],"sourcesContent":["import * as React from 'react';\nimport stakingContractABI from \"../ABIS/StakingABI.json\";\nimport { BigNumber, Contract, ethers, utils } from 'ethers';\nimport { formatUnits, parseEther } from '@ethersproject/units';\nimport {useEffect, useState, Fragment} from \"react\";\nimport Box from '@mui/material/Box';\nimport ButtonGroup from '@mui/material/ButtonGroup';\nimport Button from '@mui/material/Button';\nimport TextField from '@mui/material/TextField';\nimport contractAddresses from \"../utils/contractsAddresses.json\";\n\nexport default function StakePage () {\n\n    const [balance, setBalance] = useState(0);\n    const [balanceWithRewards, setBalanceWithRewards] = useState(0);\n    const [amount, setAmount] = useState(0);\n    const [rewardsPerDay, setRewardsPerDay] = useState(0);\n    const [errorMessage, setErrorMessage] = useState(\"\");\n\n    const contractAddress = contractAddresses.stakingContract;\n    const nlaTokenAddress = contractAddresses.nalaTokenAddress;\n\n    useEffect(() => {\n        getUserStakedAmount();\n        getRewardsPerDay();\n        getUserBalanceWithRewards();\n    }, [])\n\n    const stakeTokens = async (amount) => {\n        if (typeof window.ethereum !== 'undefined') {\n            const provider = new ethers.providers.Web3Provider(window.ethereum)\n            const signer = provider.getSigner()\n            if (signer && parseInt(amount) > 0) {\n              const stakingContract = new ethers.Contract(contractAddress, stakingContractABI, signer);\n              const nlaToken = new ethers.Contract(nlaTokenAddress, [\"function approve(address _spender, uint256 _value) public returns (bool success)\"], signer);\n              nlaToken.connect(signer).approve(stakingContract.address, \"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\");\n              try {\n                const tx = await stakingContract.connect(signer).stakeTokens(\n                    ethers.utils.parseEther(amount.toString())\n                )\n                tx.wait();\n                console.log(tx);\n                } catch (error) {\n                    console.log(\"Transaction error\");\n                }\n            } else {\n                setErrorMessage(\"Cannot stake 0 tokens\");\n            }\n        }\n        \n    }\n\n    const withdrawTokens = async (amount) => {\n        if (typeof window.ethereum !== 'undefined') {\n            const provider = new ethers.providers.Web3Provider(window.ethereum)\n            const signer = provider.getSigner()\n            if (signer && parseInt(amount) > 0) {\n              const stakingContract = new ethers.Contract(contractAddress, stakingContractABI, signer);\n              const nlaToken = new ethers.Contract(nlaTokenAddress, [\"function approve(address _spender, uint256 _value) public returns (bool success)\"], signer);\n              nlaToken.connect(signer).approve(stakingContract.address, \"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\");\n              try {\n                const tx = await stakingContract.connect(signer).withdrawTokens(\n                    ethers.utils.parseEther(amount.toString())\n                )\n                tx.wait();\n                } catch (error) {\n                    console.log(\"Transaction error\");\n                }\n            } else {\n                setErrorMessage(\"Cannot stake 0 tokens\");\n            }\n        }\n        \n    }\n\n    const getUserStakedAmount = async () => {\n\n        let balance;\n\n        if (typeof window.ethereum !== 'undefined') {\n            const provider = new ethers.providers.Web3Provider(window.ethereum)\n            const signer = provider.getSigner()\n            if (signer) {\n              const stakingContract = new ethers.Contract(contractAddress, stakingContractABI, signer);\n              try {\n                balance = await stakingContract.stakerBalance(signer.getAddress());\n                } catch (error) {\n                    console.log(\"Transaction error\");\n                }\n            }\n        }\n\n        // console.log(formatUnits(BigNumber.from(balance.toString(), 18)));\n        setBalance(formatUnits(BigNumber.from(balance.toString(), 18)));\n    }\n\n    const getUserBalanceWithRewards = async () => {\n\n        let balance;\n\n        if (typeof window.ethereum !== 'undefined') {\n            const provider = new ethers.providers.Web3Provider(window.ethereum)\n            const signer = provider.getSigner()\n            if (signer) {\n              const stakingContract = new ethers.Contract(contractAddress, stakingContractABI, signer);\n              try {\n                balance = await stakingContract.getBalanceWithRewards(signer.getAddress());\n                } catch (error) {\n                    console.log(\"Transaction error\");\n                }\n            }\n        }\n\n        // console.log(formatUnits(BigNumber.from(balance.toString(), 18)));\n        setBalanceWithRewards(formatUnits(BigNumber.from(balance.toString(), 18)));\n    }\n\n    const getRewardsPerDay = async () => {\n        let rewards;\n\n        if (typeof window.ethereum !== 'undefined') {\n            const provider = new ethers.providers.Web3Provider(window.ethereum)\n            const signer = provider.getSigner()\n            if (signer) {\n              const stakingContract = new ethers.Contract(contractAddress, stakingContractABI, signer);\n              try {\n                rewards = await stakingContract.getRewardsPerDay(signer.getAddress());\n                } catch (error) {\n                    console.log(\"Transaction error\");\n                }\n            }\n        }\n\n        setRewardsPerDay(formatUnits(BigNumber.from(rewards.toString(), 18)));\n    }\n\n    const buttons = [\n        <Button key=\"Deposit\" onClick={() => stakeTokens(amount)}>Deposit</Button>,\n        <Button key=\"Withdraw\" onClick={() => withdrawTokens(amount)}>Withdraw</Button>,\n    ];\n\n    return (\n        <>\n            <small>Stake your NLA tokens</small>\n             <Box\n                component=\"form\"\n                sx={{\n                    display: 'flex',\n                    flexDirection: 'column',\n                    alignItems: 'center',\n                    '& > *': {\n                      m: 1,\n                    },\n                  }}\n                noValidate\n                autoComplete=\"off\"\n                style={{borderRadius:\"10px\", border:\"2px solid #502199\", marginBottom:\"5%\", paddingBottom: \"10px\"}}\n                >\n                <div >\n                    <p style={{fontSize: \"25px\"}}>Total staked: {balance}</p>\n                    <p style={{fontSize: \"25px\"}}>Current balance: {balanceWithRewards}</p>\n                    <p style={{fontSize: \"25px\"}}>Rewards per day: {rewardsPerDay}</p>\n                    <p style={{fontSize: \"25px\"}}>APR% {balance}</p>\n                </div>\n                <ButtonGroup size=\"large\" aria-label=\"large button group\">\n                    {buttons}\n                </ButtonGroup>\n                <TextField id=\"outlined-basic\" label=\"Amount...\" variant=\"outlined\" size=\"small\" type=\"number\" onChange={(e) => setAmount(e.target.value)}/>\n                <small style={{color: \"red\"}}>{errorMessage}</small>\n            </Box>\n        </>\n    )\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}