{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  Object.defineProperty(o, k2, {\n    enumerable: true,\n    get: function () {\n      return m[k];\n    }\n  });\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.resolveProjectPaths = exports.resolveConfig = void 0;\n\nconst ethereumjs_util_1 = require(\"ethereumjs-util\");\n\nconst fs = __importStar(require(\"fs\"));\n\nconst cloneDeep_1 = __importDefault(require(\"lodash/cloneDeep\"));\n\nconst path_1 = __importDefault(require(\"path\"));\n\nconst constants_1 = require(\"../../constants\");\n\nconst lang_1 = require(\"../../util/lang\");\n\nconst errors_1 = require(\"../errors\");\n\nconst default_config_1 = require(\"./default-config\");\n/**\n * This functions resolves the hardhat config, setting its defaults and\n * normalizing its types if necessary.\n *\n * @param userConfigPath the user config filepath\n * @param userConfig     the user config object\n *\n * @returns the resolved config\n */\n\n\nfunction resolveConfig(userConfigPath, userConfig) {\n  var _a;\n\n  userConfig = (0, cloneDeep_1.default)(userConfig);\n  return Object.assign(Object.assign({}, userConfig), {\n    defaultNetwork: (_a = userConfig.defaultNetwork) !== null && _a !== void 0 ? _a : default_config_1.defaultDefaultNetwork,\n    paths: resolveProjectPaths(userConfigPath, userConfig.paths),\n    networks: resolveNetworksConfig(userConfig.networks),\n    solidity: resolveSolidityConfig(userConfig),\n    mocha: resolveMochaConfig(userConfig)\n  });\n}\n\nexports.resolveConfig = resolveConfig;\n\nfunction resolveNetworksConfig() {\n  let networksConfig = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n  var _a;\n\n  const hardhatNetworkConfig = networksConfig[constants_1.HARDHAT_NETWORK_NAME];\n  const localhostNetworkConfig = (_a = networksConfig.localhost) !== null && _a !== void 0 ? _a : undefined;\n  const hardhat = resolveHardhatNetworkConfig(hardhatNetworkConfig);\n  const localhost = resolveHttpNetworkConfig(Object.assign(Object.assign({}, (0, cloneDeep_1.default)(default_config_1.defaultLocalhostNetworkParams)), localhostNetworkConfig));\n  const otherNetworks = (0, lang_1.fromEntries)(Object.entries(networksConfig).filter(_ref => {\n    let [name, config] = _ref;\n    return name !== \"localhost\" && name !== \"hardhat\" && config !== undefined && isHttpNetworkConfig(config);\n  }).map(_ref2 => {\n    let [name, config] = _ref2;\n    return [name, resolveHttpNetworkConfig(config)];\n  }));\n  return Object.assign({\n    hardhat,\n    localhost\n  }, otherNetworks);\n}\n\nfunction isHttpNetworkConfig(config) {\n  return \"url\" in config;\n}\n\nfunction normalizeHexString(str) {\n  const normalized = str.trim().toLowerCase();\n\n  if (normalized.startsWith(\"0x\")) {\n    return normalized;\n  }\n\n  return `0x${normalized}`;\n}\n\nfunction resolveHardhatNetworkConfig() {\n  let hardhatNetworkConfig = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n  var _a, _b, _c, _d, _e, _f, _g;\n\n  const clonedDefaultHardhatNetworkParams = (0, cloneDeep_1.default)(default_config_1.defaultHardhatNetworkParams);\n  const accounts = hardhatNetworkConfig.accounts === undefined ? default_config_1.defaultHardhatNetworkHdAccountsConfigParams : Array.isArray(hardhatNetworkConfig.accounts) ? hardhatNetworkConfig.accounts.map(_ref3 => {\n    let {\n      privateKey,\n      balance\n    } = _ref3;\n    return {\n      privateKey: normalizeHexString(privateKey),\n      balance\n    };\n  }) : Object.assign(Object.assign({}, default_config_1.defaultHardhatNetworkHdAccountsConfigParams), hardhatNetworkConfig.accounts);\n  const forking = hardhatNetworkConfig.forking !== undefined ? {\n    url: hardhatNetworkConfig.forking.url,\n    enabled: (_a = hardhatNetworkConfig.forking.enabled) !== null && _a !== void 0 ? _a : true\n  } : undefined;\n\n  if (forking !== undefined) {\n    const blockNumber = (_b = hardhatNetworkConfig === null || hardhatNetworkConfig === void 0 ? void 0 : hardhatNetworkConfig.forking) === null || _b === void 0 ? void 0 : _b.blockNumber;\n\n    if (blockNumber !== undefined) {\n      forking.blockNumber = (_c = hardhatNetworkConfig === null || hardhatNetworkConfig === void 0 ? void 0 : hardhatNetworkConfig.forking) === null || _c === void 0 ? void 0 : _c.blockNumber;\n    }\n  }\n\n  const mining = resolveMiningConfig(hardhatNetworkConfig.mining);\n  const minGasPrice = new ethereumjs_util_1.BN((_d = hardhatNetworkConfig.minGasPrice) !== null && _d !== void 0 ? _d : clonedDefaultHardhatNetworkParams.minGasPrice);\n  const blockGasLimit = (_e = hardhatNetworkConfig.blockGasLimit) !== null && _e !== void 0 ? _e : clonedDefaultHardhatNetworkParams.blockGasLimit;\n  const gas = (_f = hardhatNetworkConfig.gas) !== null && _f !== void 0 ? _f : blockGasLimit;\n  const initialDate = (_g = hardhatNetworkConfig.initialDate) !== null && _g !== void 0 ? _g : new Date().toISOString();\n  const chains = new Map(default_config_1.defaultHardhatNetworkParams.chains);\n\n  if (hardhatNetworkConfig.chains !== undefined) {\n    for (const [chainId, userChainConfig] of Object.entries(hardhatNetworkConfig.chains)) {\n      const chainConfig = {\n        hardforkHistory: new Map()\n      };\n\n      if (userChainConfig.hardforkHistory !== undefined) {\n        for (const [name, block] of Object.entries(userChainConfig.hardforkHistory)) {\n          chainConfig.hardforkHistory.set(name, block);\n        }\n      }\n\n      chains.set(parseInt(chainId, 10), chainConfig);\n    }\n  }\n\n  const config = Object.assign(Object.assign(Object.assign({}, clonedDefaultHardhatNetworkParams), hardhatNetworkConfig), {\n    accounts,\n    forking,\n    mining,\n    blockGasLimit,\n    gas,\n    initialDate,\n    minGasPrice,\n    chains\n  }); // We do it this way because ts gets lost otherwise\n\n  if (config.forking === undefined) {\n    delete config.forking;\n  }\n\n  return config;\n}\n\nfunction isHdAccountsConfig(accounts) {\n  return typeof accounts === \"object\" && !Array.isArray(accounts);\n}\n\nfunction resolveHttpNetworkConfig(networkConfig) {\n  const accounts = networkConfig.accounts === undefined ? default_config_1.defaultHttpNetworkParams.accounts : isHdAccountsConfig(networkConfig.accounts) ? Object.assign(Object.assign({}, default_config_1.defaultHdAccountsConfigParams), networkConfig.accounts) : Array.isArray(networkConfig.accounts) ? networkConfig.accounts.map(normalizeHexString) : \"remote\";\n  const url = networkConfig.url;\n  (0, errors_1.assertHardhatInvariant)(url !== undefined, \"Invalid http network config provided. URL missing.\");\n  return Object.assign(Object.assign(Object.assign({}, (0, cloneDeep_1.default)(default_config_1.defaultHttpNetworkParams)), networkConfig), {\n    accounts,\n    url\n  });\n}\n\nfunction resolveMiningConfig(userConfig) {\n  const mempool = resolveMempoolConfig(userConfig === null || userConfig === void 0 ? void 0 : userConfig.mempool);\n\n  if (userConfig === undefined) {\n    return {\n      auto: true,\n      interval: 0,\n      mempool\n    };\n  }\n\n  const {\n    auto,\n    interval\n  } = userConfig;\n\n  if (auto === undefined && interval === undefined) {\n    return {\n      auto: true,\n      interval: 0,\n      mempool\n    };\n  }\n\n  if (auto === undefined && interval !== undefined) {\n    return {\n      auto: false,\n      interval,\n      mempool\n    };\n  }\n\n  if (auto !== undefined && interval === undefined) {\n    return {\n      auto,\n      interval: 0,\n      mempool\n    };\n  } // ts can't infer it, but both values are defined here\n\n\n  return {\n    auto: auto,\n    interval: interval,\n    mempool\n  };\n}\n\nfunction resolveMempoolConfig(userConfig) {\n  if (userConfig === undefined) {\n    return {\n      order: \"priority\"\n    };\n  }\n\n  if (userConfig.order === undefined) {\n    return {\n      order: \"priority\"\n    };\n  }\n\n  return {\n    order: userConfig.order\n  };\n}\n\nfunction resolveSolidityConfig(userConfig) {\n  var _a, _b;\n\n  const userSolidityConfig = (_a = userConfig.solidity) !== null && _a !== void 0 ? _a : default_config_1.DEFAULT_SOLC_VERSION;\n  const multiSolcConfig = normalizeSolidityConfig(userSolidityConfig);\n  const overrides = (_b = multiSolcConfig.overrides) !== null && _b !== void 0 ? _b : {};\n  return {\n    compilers: multiSolcConfig.compilers.map(resolveCompiler),\n    overrides: (0, lang_1.fromEntries)(Object.entries(overrides).map(_ref4 => {\n      let [name, config] = _ref4;\n      return [name, resolveCompiler(config)];\n    }))\n  };\n}\n\nfunction normalizeSolidityConfig(solidityConfig) {\n  if (typeof solidityConfig === \"string\") {\n    return {\n      compilers: [{\n        version: solidityConfig\n      }]\n    };\n  }\n\n  if (\"version\" in solidityConfig) {\n    return {\n      compilers: [solidityConfig]\n    };\n  }\n\n  return solidityConfig;\n}\n\nfunction resolveCompiler(compiler) {\n  var _a;\n\n  const resolved = {\n    version: compiler.version,\n    settings: (_a = compiler.settings) !== null && _a !== void 0 ? _a : {}\n  };\n  resolved.settings.optimizer = Object.assign({\n    enabled: false,\n    runs: 200\n  }, resolved.settings.optimizer);\n\n  if (resolved.settings.outputSelection === undefined) {\n    resolved.settings.outputSelection = {};\n  }\n\n  for (const [file, contractSelection] of Object.entries(default_config_1.defaultSolcOutputSelection)) {\n    if (resolved.settings.outputSelection[file] === undefined) {\n      resolved.settings.outputSelection[file] = {};\n    }\n\n    for (const [contract, outputs] of Object.entries(contractSelection)) {\n      if (resolved.settings.outputSelection[file][contract] === undefined) {\n        resolved.settings.outputSelection[file][contract] = [];\n      }\n\n      for (const output of outputs) {\n        if (!resolved.settings.outputSelection[file][contract].includes(output)) {\n          resolved.settings.outputSelection[file][contract].push(output);\n        }\n      }\n    }\n  }\n\n  return resolved;\n}\n\nfunction resolveMochaConfig(userConfig) {\n  return Object.assign(Object.assign({}, (0, cloneDeep_1.default)(default_config_1.defaultMochaOptions)), userConfig.mocha);\n}\n/**\n * This function resolves the ProjectPathsConfig object from the user-provided config\n * and its path. The logic of this is not obvious and should well be document.\n * The good thing is that most users will never use this.\n *\n * Explanation:\n *    - paths.configFile is not overridable\n *    - If a path is absolute it is used \"as is\".\n *    - If the root path is relative, it's resolved from paths.configFile's dir.\n *    - If any other path is relative, it's resolved from paths.root.\n *    - Plugin-defined paths are not resolved, but encouraged to follow the same pattern.\n */\n\n\nfunction resolveProjectPaths(userConfigPath) {\n  let userPaths = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  const configFile = fs.realpathSync(userConfigPath);\n  const configDir = path_1.default.dirname(configFile);\n  const root = resolvePathFrom(configDir, \"\", userPaths.root);\n  return Object.assign(Object.assign({}, userPaths), {\n    root,\n    configFile,\n    sources: resolvePathFrom(root, \"contracts\", userPaths.sources),\n    cache: resolvePathFrom(root, \"cache\", userPaths.cache),\n    artifacts: resolvePathFrom(root, \"artifacts\", userPaths.artifacts),\n    tests: resolvePathFrom(root, \"test\", userPaths.tests)\n  });\n}\n\nexports.resolveProjectPaths = resolveProjectPaths;\n\nfunction resolvePathFrom(from, defaultPath) {\n  let relativeOrAbsolutePath = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : defaultPath;\n\n  if (path_1.default.isAbsolute(relativeOrAbsolutePath)) {\n    return relativeOrAbsolutePath;\n  }\n\n  return path_1.default.join(from, relativeOrAbsolutePath);\n}","map":{"version":3,"mappings":"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","names":["resolveConfig","userConfigPath","userConfig","defaultNetwork","_a","default_config_1","paths","resolveProjectPaths","networks","resolveNetworksConfig","solidity","resolveSolidityConfig","mocha","resolveMochaConfig","exports","networksConfig","hardhatNetworkConfig","constants_1","localhostNetworkConfig","localhost","undefined","hardhat","resolveHardhatNetworkConfig","resolveHttpNetworkConfig","otherNetworks","Object","entries","filter","name","config","isHttpNetworkConfig","map","normalizeHexString","str","normalized","trim","toLowerCase","startsWith","clonedDefaultHardhatNetworkParams","accounts","Array","isArray","privateKey","balance","forking","url","enabled","blockNumber","_b","_c","mining","resolveMiningConfig","minGasPrice","ethereumjs_util_1","_d","blockGasLimit","_e","gas","_f","initialDate","_g","Date","toISOString","chains","Map","chainId","userChainConfig","chainConfig","hardforkHistory","block","set","parseInt","isHdAccountsConfig","networkConfig","mempool","resolveMempoolConfig","auto","interval","order","userSolidityConfig","multiSolcConfig","normalizeSolidityConfig","overrides","compilers","resolveCompiler","solidityConfig","version","compiler","resolved","settings","optimizer","runs","outputSelection","file","contractSelection","contract","outputs","output","includes","push","userPaths","configFile","fs","realpathSync","configDir","path_1","dirname","root","resolvePathFrom","sources","cache","artifacts","tests","from","defaultPath","relativeOrAbsolutePath","isAbsolute","join"],"sourceRoot":"","sources":["../../../src/internal/core/config/config-resolution.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}