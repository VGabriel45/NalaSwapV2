{"ast":null,"code":"'use strict';\n\nconst {\n  kClients\n} = require('../core/symbols');\n\nconst Agent = require('../agent');\n\nconst {\n  kAgent,\n  kMockAgentSet,\n  kMockAgentGet,\n  kDispatches,\n  kIsMockActive,\n  kNetConnect,\n  kGetNetConnect,\n  kOptions,\n  kFactory\n} = require('./mock-symbols');\n\nconst MockClient = require('./mock-client');\n\nconst MockPool = require('./mock-pool');\n\nconst {\n  matchValue,\n  buildMockOptions\n} = require('./mock-utils');\n\nconst {\n  InvalidArgumentError\n} = require('../core/errors');\n\nconst Dispatcher = require('../dispatcher');\n\nclass FakeWeakRef {\n  constructor(value) {\n    this.value = value;\n  }\n\n  deref() {\n    return this.value;\n  }\n\n}\n\nclass MockAgent extends Dispatcher {\n  constructor(opts) {\n    super(opts);\n    this[kNetConnect] = true;\n    this[kIsMockActive] = true; // Instantiate Agent and encapsulate\n\n    if (opts && opts.agent && typeof opts.agent.dispatch !== 'function') {\n      throw new InvalidArgumentError('Argument opts.agent must implement Agent');\n    }\n\n    const agent = opts && opts.agent ? opts.agent : new Agent(opts);\n    this[kAgent] = agent;\n    this[kClients] = agent[kClients];\n    this[kOptions] = buildMockOptions(opts);\n  }\n\n  get(origin) {\n    let dispatcher = this[kMockAgentGet](origin);\n\n    if (!dispatcher) {\n      dispatcher = this[kFactory](origin);\n      this[kMockAgentSet](origin, dispatcher);\n    }\n\n    return dispatcher;\n  }\n\n  dispatch(opts, handler) {\n    // Call MockAgent.get to perform additional setup before dispatching as normal\n    this.get(opts.origin);\n    return this[kAgent].dispatch(opts, handler);\n  }\n\n  async close() {\n    await this[kAgent].close();\n    this[kClients].clear();\n  }\n\n  deactivate() {\n    this[kIsMockActive] = false;\n  }\n\n  activate() {\n    this[kIsMockActive] = true;\n  }\n\n  enableNetConnect(matcher) {\n    if (typeof matcher === 'string' || typeof matcher === 'function' || matcher instanceof RegExp) {\n      if (Array.isArray(this[kNetConnect])) {\n        this[kNetConnect].push(matcher);\n      } else {\n        this[kNetConnect] = [matcher];\n      }\n    } else if (typeof matcher === 'undefined') {\n      this[kNetConnect] = true;\n    } else {\n      throw new InvalidArgumentError('Unsupported matcher. Must be one of String|Function|RegExp.');\n    }\n  }\n\n  disableNetConnect() {\n    this[kNetConnect] = false;\n  }\n\n  [kMockAgentSet](origin, dispatcher) {\n    this[kClients].set(origin, new FakeWeakRef(dispatcher));\n  }\n\n  [kFactory](origin) {\n    const mockOptions = Object.assign({\n      agent: this\n    }, this[kOptions]);\n    return this[kOptions] && this[kOptions].connections === 1 ? new MockClient(origin, mockOptions) : new MockPool(origin, mockOptions);\n  }\n\n  [kMockAgentGet](origin) {\n    // First check if we can immediately find it\n    const ref = this[kClients].get(origin);\n\n    if (ref) {\n      return ref.deref();\n    } // If the origin is not a string create a dummy parent pool and return to user\n\n\n    if (typeof origin !== 'string') {\n      const dispatcher = this[kFactory]('http://localhost:9999');\n      this[kMockAgentSet](origin, dispatcher);\n      return dispatcher;\n    } // If we match, create a pool and assign the same dispatches\n\n\n    for (const [keyMatcher, nonExplicitRef] of Array.from(this[kClients])) {\n      const nonExplicitDispatcher = nonExplicitRef.deref();\n\n      if (nonExplicitDispatcher && typeof keyMatcher !== 'string' && matchValue(keyMatcher, origin)) {\n        const dispatcher = this[kFactory](origin);\n        this[kMockAgentSet](origin, dispatcher);\n        dispatcher[kDispatches] = nonExplicitDispatcher[kDispatches];\n        return dispatcher;\n      }\n    }\n  }\n\n  [kGetNetConnect]() {\n    return this[kNetConnect];\n  }\n\n}\n\nmodule.exports = MockAgent;","map":{"version":3,"names":["kClients","require","Agent","kAgent","kMockAgentSet","kMockAgentGet","kDispatches","kIsMockActive","kNetConnect","kGetNetConnect","kOptions","kFactory","MockClient","MockPool","matchValue","buildMockOptions","InvalidArgumentError","Dispatcher","FakeWeakRef","constructor","value","deref","MockAgent","opts","agent","dispatch","get","origin","dispatcher","handler","close","clear","deactivate","activate","enableNetConnect","matcher","RegExp","Array","isArray","push","disableNetConnect","set","mockOptions","Object","assign","connections","ref","keyMatcher","nonExplicitRef","from","nonExplicitDispatcher","module","exports"],"sources":["/Users/ja/Desktop/MyProjects/NalaSwap/webapp/nalaswap/node_modules/undici/lib/mock/mock-agent.js"],"sourcesContent":["'use strict'\n\nconst { kClients } = require('../core/symbols')\nconst Agent = require('../agent')\nconst {\n  kAgent,\n  kMockAgentSet,\n  kMockAgentGet,\n  kDispatches,\n  kIsMockActive,\n  kNetConnect,\n  kGetNetConnect,\n  kOptions,\n  kFactory\n} = require('./mock-symbols')\nconst MockClient = require('./mock-client')\nconst MockPool = require('./mock-pool')\nconst { matchValue, buildMockOptions } = require('./mock-utils')\nconst { InvalidArgumentError } = require('../core/errors')\nconst Dispatcher = require('../dispatcher')\n\nclass FakeWeakRef {\n  constructor (value) {\n    this.value = value\n  }\n\n  deref () {\n    return this.value\n  }\n}\n\nclass MockAgent extends Dispatcher {\n  constructor (opts) {\n    super(opts)\n\n    this[kNetConnect] = true\n    this[kIsMockActive] = true\n\n    // Instantiate Agent and encapsulate\n    if ((opts && opts.agent && typeof opts.agent.dispatch !== 'function')) {\n      throw new InvalidArgumentError('Argument opts.agent must implement Agent')\n    }\n    const agent = opts && opts.agent ? opts.agent : new Agent(opts)\n    this[kAgent] = agent\n\n    this[kClients] = agent[kClients]\n    this[kOptions] = buildMockOptions(opts)\n  }\n\n  get (origin) {\n    let dispatcher = this[kMockAgentGet](origin)\n\n    if (!dispatcher) {\n      dispatcher = this[kFactory](origin)\n      this[kMockAgentSet](origin, dispatcher)\n    }\n    return dispatcher\n  }\n\n  dispatch (opts, handler) {\n    // Call MockAgent.get to perform additional setup before dispatching as normal\n    this.get(opts.origin)\n    return this[kAgent].dispatch(opts, handler)\n  }\n\n  async close () {\n    await this[kAgent].close()\n    this[kClients].clear()\n  }\n\n  deactivate () {\n    this[kIsMockActive] = false\n  }\n\n  activate () {\n    this[kIsMockActive] = true\n  }\n\n  enableNetConnect (matcher) {\n    if (typeof matcher === 'string' || typeof matcher === 'function' || matcher instanceof RegExp) {\n      if (Array.isArray(this[kNetConnect])) {\n        this[kNetConnect].push(matcher)\n      } else {\n        this[kNetConnect] = [matcher]\n      }\n    } else if (typeof matcher === 'undefined') {\n      this[kNetConnect] = true\n    } else {\n      throw new InvalidArgumentError('Unsupported matcher. Must be one of String|Function|RegExp.')\n    }\n  }\n\n  disableNetConnect () {\n    this[kNetConnect] = false\n  }\n\n  [kMockAgentSet] (origin, dispatcher) {\n    this[kClients].set(origin, new FakeWeakRef(dispatcher))\n  }\n\n  [kFactory] (origin) {\n    const mockOptions = Object.assign({ agent: this }, this[kOptions])\n    return this[kOptions] && this[kOptions].connections === 1\n      ? new MockClient(origin, mockOptions)\n      : new MockPool(origin, mockOptions)\n  }\n\n  [kMockAgentGet] (origin) {\n    // First check if we can immediately find it\n    const ref = this[kClients].get(origin)\n    if (ref) {\n      return ref.deref()\n    }\n\n    // If the origin is not a string create a dummy parent pool and return to user\n    if (typeof origin !== 'string') {\n      const dispatcher = this[kFactory]('http://localhost:9999')\n      this[kMockAgentSet](origin, dispatcher)\n      return dispatcher\n    }\n\n    // If we match, create a pool and assign the same dispatches\n    for (const [keyMatcher, nonExplicitRef] of Array.from(this[kClients])) {\n      const nonExplicitDispatcher = nonExplicitRef.deref()\n      if (nonExplicitDispatcher && typeof keyMatcher !== 'string' && matchValue(keyMatcher, origin)) {\n        const dispatcher = this[kFactory](origin)\n        this[kMockAgentSet](origin, dispatcher)\n        dispatcher[kDispatches] = nonExplicitDispatcher[kDispatches]\n        return dispatcher\n      }\n    }\n  }\n\n  [kGetNetConnect] () {\n    return this[kNetConnect]\n  }\n}\n\nmodule.exports = MockAgent\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}