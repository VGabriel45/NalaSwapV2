{"ast":null,"code":"var _jsxFileName = \"/Users/ja/Desktop/MyProjects/NalaSwap/webapp/nalaswap/src/pages/NftsPage.js\",\n    _s = $RefreshSig$();\n\nimport * as React from 'react';\nimport nftAbi from \"../ABIS/NFTCollection.json\";\nimport { BigNumber, Contract, ethers, utils } from 'ethers';\nimport { useEffect, useState, Fragment } from \"react\";\nimport Box from '@mui/material/Box';\nimport ButtonGroup from '@mui/material/ButtonGroup';\nimport contractAddresses from \"../utils/contractsAddresses.json\";\nimport Button from '@mui/material/Button';\nimport Card from '@mui/material/Card';\nimport CardActions from '@mui/material/CardActions';\nimport CardContent from '@mui/material/CardContent';\nimport CardMedia from '@mui/material/CardMedia';\nimport Typography from '@mui/material/Typography';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function StakePage() {\n  _s();\n\n  const [errorMessage, setErrorMessage] = useState(\"\");\n  const [ownedNfts, setOwnedNfts] = useState([]);\n  const nftAddress = contractAddresses.nftCollectionAddress;\n  useEffect(() => {\n    const displayAndSet = async () => {\n      setOwnedNfts(await displayOwnedNfts());\n    };\n\n    displayAndSet();\n  }, []);\n\n  const getOwnedNFTS = async () => {\n    if (typeof window.ethereum !== 'undefined') {\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      const signer = provider.getSigner();\n      let nftArr = [];\n\n      if (signer) {\n        const nftContract = new ethers.Contract(nftAddress, nftAbi, signer);\n        const ownedNftsCount = parseInt(await nftContract.balanceOf(signer.getAddress()));\n\n        for (let index = 0; index < ownedNftsCount; index++) {\n          let nftId = await nftContract.tokenOfOwnerByIndex(signer.getAddress(), index);\n          nftArr.push(nftId);\n        }\n\n        return nftArr;\n      }\n    }\n  };\n\n  const displayOwnedNfts = async () => {\n    let ids = await getOwnedNFTS();\n    let nftMetadataArr = [];\n\n    for (let index = 0; index < ids.length; index++) {\n      const response = await fetch(`https://gateway.pinata.cloud/ipfs/QmSxkTx7LDNvYYJFFtSVDafd4DD4sAUYD34YydcTML6N7X/${ids[index]}.json`);\n      const responseJson = await response.json();\n      nftMetadataArr.push(responseJson);\n    }\n\n    return nftMetadataArr;\n  };\n\n  const mintNft = async () => {\n    if (typeof window.ethereum !== 'undefined') {\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      const signer = provider.getSigner();\n\n      if (signer) {\n        const nftContract = new ethers.Contract(nftAddress, nftAbi, signer);\n\n        try {\n          const tx = await nftContract.connect(signer).mint(signer.getAddress(), 1, {\n            value: ethers.utils.parseEther(\"1\"),\n            from: signer.getAddress()\n          });\n          tx.wait();\n          console.log(tx);\n        } catch (error) {\n          console.log(\"Transaction error\");\n        }\n      } else {\n        setErrorMessage(\"Cannot stake 0 tokens\");\n      }\n    }\n  };\n\n  const buttons = [/*#__PURE__*/_jsxDEV(Button, {\n    onClick: () => mintNft(),\n    children: \"Mint\"\n  }, \"Mint\", false, {\n    fileName: _jsxFileName,\n    lineNumber: 80,\n    columnNumber: 9\n  }, this)];\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"test\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(ButtonGroup, {\n      size: \"large\",\n      \"aria-label\": \"large button group\",\n      children: buttons\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 13\n    }, this), \"My Nfts\", /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: \"flex\",\n        flexDirection: \"row\",\n        justifyContent: \"space-between\"\n      },\n      children: ownedNfts.map(nft => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(Card, {\n          sx: {\n            maxWidth: 345\n          },\n          children: [/*#__PURE__*/_jsxDEV(CardMedia, {\n            height: \"140\",\n            src: `https://gateway.pinata.cloud/ipfs/QmcEfnhCfPn5SFA9PQ6YRELsTrDRSkapYiHwEAifuWtNQp/${nft.edition}.png`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 95,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(CardContent, {\n            children: [/*#__PURE__*/_jsxDEV(Typography, {\n              gutterBottom: true,\n              variant: \"h5\",\n              component: \"div\",\n              children: nft.name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 100,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"body2\",\n              color: \"text.secondary\",\n              children: \"An eye.\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 103,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 99,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(CardActions, {\n            children: [/*#__PURE__*/_jsxDEV(Button, {\n              size: \"small\",\n              children: \"Stake\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 108,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(Button, {\n              size: \"small\",\n              children: \"Destroy\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 109,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 107,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n}\n\n_s(StakePage, \"XWktUinxyM4q1aGn/qjPBzKVFNs=\");\n\n_c = StakePage;\n\nvar _c;\n\n$RefreshReg$(_c, \"StakePage\");","map":{"version":3,"names":["React","nftAbi","BigNumber","Contract","ethers","utils","useEffect","useState","Fragment","Box","ButtonGroup","contractAddresses","Button","Card","CardActions","CardContent","CardMedia","Typography","StakePage","errorMessage","setErrorMessage","ownedNfts","setOwnedNfts","nftAddress","nftCollectionAddress","displayAndSet","displayOwnedNfts","getOwnedNFTS","window","ethereum","provider","providers","Web3Provider","signer","getSigner","nftArr","nftContract","ownedNftsCount","parseInt","balanceOf","getAddress","index","nftId","tokenOfOwnerByIndex","push","ids","nftMetadataArr","length","response","fetch","responseJson","json","mintNft","tx","connect","mint","value","parseEther","from","wait","console","log","error","buttons","display","flexDirection","justifyContent","map","nft","maxWidth","edition","name"],"sources":["/Users/ja/Desktop/MyProjects/NalaSwap/webapp/nalaswap/src/pages/NftsPage.js"],"sourcesContent":["import * as React from 'react';\nimport nftAbi from \"../ABIS/NFTCollection.json\";\nimport { BigNumber, Contract, ethers, utils } from 'ethers';\nimport {useEffect, useState, Fragment} from \"react\";\nimport Box from '@mui/material/Box';\nimport ButtonGroup from '@mui/material/ButtonGroup';\nimport contractAddresses from \"../utils/contractsAddresses.json\";\nimport Button from '@mui/material/Button';\nimport Card from '@mui/material/Card';\nimport CardActions from '@mui/material/CardActions';\nimport CardContent from '@mui/material/CardContent';\nimport CardMedia from '@mui/material/CardMedia';\nimport Typography from '@mui/material/Typography';\n\nexport default function StakePage () {\n\n    const [errorMessage, setErrorMessage] = useState(\"\");\n    const [ownedNfts, setOwnedNfts] = useState([]);\n\n    const nftAddress = contractAddresses.nftCollectionAddress;\n\n    useEffect(() => {\n        const displayAndSet = async () => {setOwnedNfts(await displayOwnedNfts())};\n        displayAndSet();\n    }, [])\n\n    const getOwnedNFTS = async () => {\n        if (typeof window.ethereum !== 'undefined') {\n            const provider = new ethers.providers.Web3Provider(window.ethereum);\n            const signer = provider.getSigner();\n            let nftArr = [];\n            if (signer) {\n              const nftContract = new ethers.Contract(nftAddress, nftAbi, signer);\n              const ownedNftsCount = parseInt(await nftContract.balanceOf(signer.getAddress()));\n              for (let index = 0; index < ownedNftsCount; index++) {\n                    let nftId = await nftContract.tokenOfOwnerByIndex(signer.getAddress(), index);\n                    nftArr.push(nftId);                  \n              }\n              return nftArr;\n            }\n        }\n    }\n\n     const displayOwnedNfts = async () => {\n        let ids = await getOwnedNFTS();\n        let nftMetadataArr = [];\n        for (let index = 0; index < ids.length; index++) {\n            const response = await fetch(`https://gateway.pinata.cloud/ipfs/QmSxkTx7LDNvYYJFFtSVDafd4DD4sAUYD34YydcTML6N7X/${ids[index]}.json`)\n            const responseJson = await response.json();\n            nftMetadataArr.push(responseJson);\n        }\n        return nftMetadataArr;\n    }\n\n    const mintNft = async () => {\n        if (typeof window.ethereum !== 'undefined') {\n            const provider = new ethers.providers.Web3Provider(window.ethereum)\n            const signer = provider.getSigner()\n            if (signer) {\n              const nftContract = new ethers.Contract(nftAddress, nftAbi, signer);\n              try {\n                const tx = await nftContract.connect(signer).mint(\n                    signer.getAddress(),\n                    1,\n                    {value: ethers.utils.parseEther(\"1\"), from: signer.getAddress()}\n                )\n                tx.wait();\n                console.log(tx);\n                } catch (error) {\n                    console.log(\"Transaction error\");\n                }\n            } else {\n                setErrorMessage(\"Cannot stake 0 tokens\");\n            }\n        }\n        \n    }\n\n    const buttons = [\n        <Button key=\"Mint\" onClick={() => mintNft()}>Mint</Button>,\n    ];\n\n    return (\n        <>\n            <h1>test</h1>\n            <ButtonGroup size=\"large\" aria-label=\"large button group\">\n                {buttons}\n            </ButtonGroup>\n            My Nfts\n           \n            <div style={{display: \"flex\", flexDirection:\"row\", justifyContent: \"space-between\"}}>\n                {ownedNfts.map(nft => \n                    <div>\n                        <Card sx={{ maxWidth: 345 }}>\n                            <CardMedia\n                                height=\"140\"\n                                src={`https://gateway.pinata.cloud/ipfs/QmcEfnhCfPn5SFA9PQ6YRELsTrDRSkapYiHwEAifuWtNQp/${nft.edition}.png`}\n                            />\n                            <CardContent>\n                                <Typography gutterBottom variant=\"h5\" component=\"div\">\n                                {nft.name}\n                                </Typography>\n                                <Typography variant=\"body2\" color=\"text.secondary\">\n                                An eye.\n                                </Typography>\n                            </CardContent>\n                            <CardActions>\n                                <Button size=\"small\">Stake</Button>\n                                <Button size=\"small\">Destroy</Button>\n                            </CardActions>\n                        </Card>\n                    </div>\n                )}\n            </div>\n        </>\n    )\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}