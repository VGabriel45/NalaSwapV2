{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.mergeCompilationJobsWithoutBug = exports.mergeCompilationJobsWithBug = exports.createCompilationJobFromFile = exports.createCompilationJobsFromConnectedComponent = exports.CompilationJob = void 0;\n\nconst debug_1 = __importDefault(require(\"debug\"));\n\nconst semver_1 = __importDefault(require(\"semver\"));\n\nconst builtin_tasks_1 = require(\"../../types/builtin-tasks\");\n\nconst errors_1 = require(\"../core/errors\");\n\nconst log = (0, debug_1.default)(\"hardhat:core:compilation-job\"); // this should have a proper version range when it's fixed\n\nconst SOLC_BUG_9573_VERSIONS = \"*\";\n\nfunction isCompilationJobCreationError(x) {\n  return \"reason\" in x;\n}\n\nclass CompilationJob {\n  constructor(solidityConfig) {\n    this.solidityConfig = solidityConfig;\n    this._filesToCompile = new Map();\n  }\n\n  addFileToCompile(file, emitsArtifacts) {\n    const fileToCompile = this._filesToCompile.get(file.sourceName); // if the file doesn't exist, we add it\n    // we also add it if emitsArtifacts is true, to override it in case it was\n    // previously added but with a false emitsArtifacts\n\n\n    if (fileToCompile === undefined || emitsArtifacts) {\n      this._filesToCompile.set(file.sourceName, {\n        file,\n        emitsArtifacts\n      });\n    }\n  }\n\n  hasSolc9573Bug() {\n    var _a, _b, _c;\n\n    return ((_c = (_b = (_a = this.solidityConfig) === null || _a === void 0 ? void 0 : _a.settings) === null || _b === void 0 ? void 0 : _b.optimizer) === null || _c === void 0 ? void 0 : _c.enabled) === true && semver_1.default.satisfies(this.solidityConfig.version, SOLC_BUG_9573_VERSIONS);\n  }\n\n  merge(job) {\n    const {\n      isEqual\n    } = require(\"lodash\");\n\n    (0, errors_1.assertHardhatInvariant)(isEqual(this.solidityConfig, job.getSolcConfig()), \"Merging jobs with different solidity configurations\");\n    const mergedJobs = new CompilationJob(job.getSolcConfig());\n\n    for (const file of this.getResolvedFiles()) {\n      mergedJobs.addFileToCompile(file, this.emitsArtifacts(file));\n    }\n\n    for (const file of job.getResolvedFiles()) {\n      mergedJobs.addFileToCompile(file, job.emitsArtifacts(file));\n    }\n\n    return mergedJobs;\n  }\n\n  getSolcConfig() {\n    return this.solidityConfig;\n  }\n\n  isEmpty() {\n    return this._filesToCompile.size === 0;\n  }\n\n  getResolvedFiles() {\n    return [...this._filesToCompile.values()].map(x => x.file);\n  }\n  /**\n   * Check if the given file emits artifacts.\n   *\n   * If no file is given, check if *some* file in the job emits artifacts.\n   */\n\n\n  emitsArtifacts(file) {\n    const fileToCompile = this._filesToCompile.get(file.sourceName);\n\n    (0, errors_1.assertHardhatInvariant)(fileToCompile !== undefined, `File '${file.sourceName}' does not exist in this compilation job`);\n    return fileToCompile.emitsArtifacts;\n  }\n\n}\n\nexports.CompilationJob = CompilationJob;\n\nfunction mergeCompilationJobs(jobs, isMergeable) {\n  const {\n    flatten\n  } = require(\"lodash\");\n\n  const jobsMap = new Map();\n\n  for (const job of jobs) {\n    const mergedJobs = jobsMap.get(job.getSolcConfig());\n\n    if (isMergeable(job)) {\n      if (mergedJobs === undefined) {\n        jobsMap.set(job.getSolcConfig(), [job]);\n      } else if (mergedJobs.length === 1) {\n        const newJob = mergedJobs[0].merge(job);\n        jobsMap.set(job.getSolcConfig(), [newJob]);\n      } else {\n        (0, errors_1.assertHardhatInvariant)(false, \"More than one mergeable job was added for the same configuration\");\n      }\n    } else {\n      if (mergedJobs === undefined) {\n        jobsMap.set(job.getSolcConfig(), [job]);\n      } else {\n        jobsMap.set(job.getSolcConfig(), [...mergedJobs, job]);\n      }\n    }\n  }\n\n  return flatten([...jobsMap.values()]);\n}\n/**\n * Creates a list of compilation jobs from a dependency graph. *This function\n * assumes that the given graph is a connected component*.\n * Returns the list of compilation jobs on success, and a list of\n * non-compilable files on failure.\n */\n\n\nasync function createCompilationJobsFromConnectedComponent(connectedComponent, getFromFile) {\n  const compilationJobs = [];\n  const errors = [];\n\n  for (const file of connectedComponent.getResolvedFiles()) {\n    const compilationJobOrError = await getFromFile(file);\n\n    if (isCompilationJobCreationError(compilationJobOrError)) {\n      log(`'${file.absolutePath}' couldn't be compiled. Reason: '${compilationJobOrError}'`);\n      errors.push(compilationJobOrError);\n      continue;\n    }\n\n    compilationJobs.push(compilationJobOrError);\n  }\n\n  const jobs = mergeCompilationJobsWithBug(compilationJobs);\n  return {\n    jobs,\n    errors\n  };\n}\n\nexports.createCompilationJobsFromConnectedComponent = createCompilationJobsFromConnectedComponent;\n\nasync function createCompilationJobFromFile(dependencyGraph, file, solidityConfig) {\n  const directDependencies = dependencyGraph.getDependencies(file);\n  const transitiveDependencies = dependencyGraph.getTransitiveDependencies(file);\n  const compilerConfig = getCompilerConfigForFile(file, directDependencies, transitiveDependencies, solidityConfig); // if the config cannot be obtained, we just return the failure\n\n  if (isCompilationJobCreationError(compilerConfig)) {\n    return compilerConfig;\n  }\n\n  log(`File '${file.absolutePath}' will be compiled with version '${compilerConfig.version}'`);\n  const compilationJob = new CompilationJob(compilerConfig);\n  compilationJob.addFileToCompile(file, true);\n\n  for (const {\n    dependency\n  } of transitiveDependencies) {\n    log(`File '${dependency.absolutePath}' added as dependency of '${file.absolutePath}'`);\n    compilationJob.addFileToCompile(dependency, false);\n  }\n\n  return compilationJob;\n}\n\nexports.createCompilationJobFromFile = createCompilationJobFromFile;\n/**\n * Merge compilation jobs affected by the solc #9573 bug\n */\n\nfunction mergeCompilationJobsWithBug(compilationJobs) {\n  return mergeCompilationJobs(compilationJobs, job => job.hasSolc9573Bug());\n}\n\nexports.mergeCompilationJobsWithBug = mergeCompilationJobsWithBug;\n/**\n * Merge compilation jobs not affected by the solc #9573 bug\n */\n\nfunction mergeCompilationJobsWithoutBug(compilationJobs) {\n  return mergeCompilationJobs(compilationJobs, job => !job.hasSolc9573Bug());\n}\n\nexports.mergeCompilationJobsWithoutBug = mergeCompilationJobsWithoutBug;\n/**\n * Return the compiler config with the newest version that satisfies the given\n * version ranges, or a value indicating why the compiler couldn't be obtained.\n */\n\nfunction getCompilerConfigForFile(file, directDependencies, transitiveDependencies, solidityConfig) {\n  var _a;\n\n  const {\n    uniq\n  } = require(\"lodash\");\n\n  const transitiveDependenciesVersionPragmas = transitiveDependencies.map(_ref => {\n    let {\n      dependency\n    } = _ref;\n    return dependency.content.versionPragmas;\n  });\n  const versionRange = uniq([...file.content.versionPragmas, ...transitiveDependenciesVersionPragmas]).join(\" \");\n  const overrides = (_a = solidityConfig.overrides) !== null && _a !== void 0 ? _a : {};\n  const overriddenCompiler = overrides[file.sourceName]; // if there's an override, we only check that\n\n  if (overriddenCompiler !== undefined) {\n    if (!semver_1.default.satisfies(overriddenCompiler.version, versionRange)) {\n      return getCompilationJobCreationError(file, directDependencies, transitiveDependencies, [overriddenCompiler.version], true);\n    }\n\n    return overriddenCompiler;\n  } // if there's no override, we find a compiler that matches the version range\n\n\n  const compilerVersions = solidityConfig.compilers.map(x => x.version);\n  const matchingVersion = semver_1.default.maxSatisfying(compilerVersions, versionRange);\n\n  if (matchingVersion === null) {\n    return getCompilationJobCreationError(file, directDependencies, transitiveDependencies, compilerVersions, false);\n  }\n\n  const matchingConfig = solidityConfig.compilers.find(x => x.version === matchingVersion);\n  return matchingConfig;\n}\n\nfunction getCompilationJobCreationError(file, directDependencies, transitiveDependencies, compilerVersions, overriden) {\n  const fileVersionRange = file.content.versionPragmas.join(\" \");\n\n  if (semver_1.default.maxSatisfying(compilerVersions, fileVersionRange) === null) {\n    const reason = overriden ? builtin_tasks_1.CompilationJobCreationErrorReason.INCOMPATIBLE_OVERRIDEN_SOLC_VERSION : builtin_tasks_1.CompilationJobCreationErrorReason.NO_COMPATIBLE_SOLC_VERSION_FOUND;\n    return {\n      reason,\n      file\n    };\n  }\n\n  const incompatibleDirectImports = [];\n\n  for (const dependency of directDependencies) {\n    const dependencyVersionRange = dependency.content.versionPragmas.join(\" \");\n\n    if (!semver_1.default.intersects(fileVersionRange, dependencyVersionRange)) {\n      incompatibleDirectImports.push(dependency);\n    }\n  }\n\n  if (incompatibleDirectImports.length > 0) {\n    return {\n      reason: builtin_tasks_1.CompilationJobCreationErrorReason.DIRECTLY_IMPORTS_INCOMPATIBLE_FILE,\n      file,\n      extra: {\n        incompatibleDirectImports\n      }\n    };\n  }\n\n  const incompatibleIndirectImports = [];\n\n  for (const transitiveDependency of transitiveDependencies) {\n    const {\n      dependency\n    } = transitiveDependency;\n    const dependencyVersionRange = dependency.content.versionPragmas.join(\" \");\n\n    if (!semver_1.default.intersects(fileVersionRange, dependencyVersionRange)) {\n      incompatibleIndirectImports.push(transitiveDependency);\n    }\n  }\n\n  if (incompatibleIndirectImports.length > 0) {\n    return {\n      reason: builtin_tasks_1.CompilationJobCreationErrorReason.INDIRECTLY_IMPORTS_INCOMPATIBLE_FILE,\n      file,\n      extra: {\n        incompatibleIndirectImports\n      }\n    };\n  }\n\n  return {\n    reason: builtin_tasks_1.CompilationJobCreationErrorReason.OTHER_ERROR,\n    file\n  };\n}","map":{"version":3,"mappings":"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","names":["log","SOLC_BUG_9573_VERSIONS","isCompilationJobCreationError","x","CompilationJob","constructor","solidityConfig","Map","addFileToCompile","file","emitsArtifacts","fileToCompile","_filesToCompile","get","sourceName","undefined","set","hasSolc9573Bug","_a","settings","_b","optimizer","_c","enabled","semver_1","satisfies","version","merge","job","isEqual","require","getSolcConfig","mergedJobs","getResolvedFiles","isEmpty","size","values","map","exports","mergeCompilationJobs","jobs","isMergeable","flatten","jobsMap","length","newJob","createCompilationJobsFromConnectedComponent","connectedComponent","getFromFile","compilationJobs","errors","compilationJobOrError","absolutePath","push","mergeCompilationJobsWithBug","createCompilationJobFromFile","dependencyGraph","directDependencies","getDependencies","transitiveDependencies","getTransitiveDependencies","compilerConfig","getCompilerConfigForFile","compilationJob","dependency","mergeCompilationJobsWithoutBug","uniq","transitiveDependenciesVersionPragmas","content","versionPragmas","versionRange","join","overrides","overriddenCompiler","getCompilationJobCreationError","compilerVersions","compilers","matchingVersion","maxSatisfying","matchingConfig","find","overriden","fileVersionRange","reason","builtin_tasks_1","INCOMPATIBLE_OVERRIDEN_SOLC_VERSION","NO_COMPATIBLE_SOLC_VERSION_FOUND","incompatibleDirectImports","dependencyVersionRange","intersects","DIRECTLY_IMPORTS_INCOMPATIBLE_FILE","extra","incompatibleIndirectImports","transitiveDependency","INDIRECTLY_IMPORTS_INCOMPATIBLE_FILE","OTHER_ERROR"],"sourceRoot":"","sources":["../../src/internal/solidity/compilation-job.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}