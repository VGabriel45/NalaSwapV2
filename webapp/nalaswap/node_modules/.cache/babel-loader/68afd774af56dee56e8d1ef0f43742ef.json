{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  Object.defineProperty(o, k2, {\n    enumerable: true,\n    get: function () {\n      return m[k];\n    }\n  });\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getArtifactFromContractOutput = exports.Artifacts = void 0;\n\nconst debug_1 = __importDefault(require(\"debug\"));\n\nconst fs_extra_1 = __importDefault(require(\"fs-extra\"));\n\nconst os = __importStar(require(\"os\"));\n\nconst path = __importStar(require(\"path\"));\n\nconst contract_names_1 = require(\"../utils/contract-names\");\n\nconst source_names_1 = require(\"../utils/source-names\");\n\nconst constants_1 = require(\"./constants\");\n\nconst errors_1 = require(\"./core/errors\");\n\nconst errors_list_1 = require(\"./core/errors-list\");\n\nconst glob_1 = require(\"./util/glob\");\n\nconst hash_1 = require(\"./util/hash\");\n\nconst log = (0, debug_1.default)(\"hardhat:core:artifacts\");\n\nclass Artifacts {\n  constructor(_artifactsPath) {\n    this._artifactsPath = _artifactsPath;\n    this._buildInfosGlob = path.join(this._artifactsPath, constants_1.BUILD_INFO_DIR_NAME, \"**/*.json\");\n    this._dbgsGlob = path.join(this._artifactsPath, \"**/*.dbg.json\");\n    this._validArtifacts = [];\n  }\n\n  addValidArtifacts(validArtifacts) {\n    this._validArtifacts.push(...validArtifacts);\n  }\n\n  async readArtifact(name) {\n    const artifactPath = await this._getArtifactPath(name);\n    return fs_extra_1.default.readJson(artifactPath);\n  }\n\n  readArtifactSync(name) {\n    const artifactPath = this._getArtifactPathSync(name);\n\n    return fs_extra_1.default.readJsonSync(artifactPath);\n  }\n\n  async artifactExists(name) {\n    try {\n      await this.readArtifact(name);\n      return true;\n    } catch (_a) {\n      return false;\n    }\n  }\n\n  async getAllFullyQualifiedNames() {\n    const paths = await this.getArtifactPaths();\n    return paths.map(p => this._getFullyQualifiedNameFromPath(p)).sort();\n  }\n\n  async getBuildInfo(fullyQualifiedName) {\n    const artifactPath = this.formArtifactPathFromFullyQualifiedName(fullyQualifiedName);\n\n    const debugFilePath = this._getDebugFilePath(artifactPath);\n\n    const buildInfoPath = await this._getBuildInfoFromDebugFile(debugFilePath);\n\n    if (buildInfoPath === undefined) {\n      return undefined;\n    }\n\n    return fs_extra_1.default.readJSON(buildInfoPath);\n  }\n\n  async getArtifactPaths() {\n    const paths = await (0, glob_1.glob)(path.join(this._artifactsPath, \"**/*.json\"), {\n      ignore: [this._buildInfosGlob, this._dbgsGlob]\n    });\n    return paths.sort();\n  }\n\n  async getBuildInfoPaths() {\n    const paths = await (0, glob_1.glob)(this._buildInfosGlob);\n    return paths.sort();\n  }\n\n  async getDebugFilePaths() {\n    const paths = await (0, glob_1.glob)(this._dbgsGlob);\n    return paths.sort();\n  }\n\n  async saveArtifactAndDebugFile(artifact, pathToBuildInfo) {\n    // artifact\n    const fullyQualifiedName = (0, contract_names_1.getFullyQualifiedName)(artifact.sourceName, artifact.contractName);\n    const artifactPath = this.formArtifactPathFromFullyQualifiedName(fullyQualifiedName);\n    await fs_extra_1.default.ensureDir(path.dirname(artifactPath)); // write artifact\n\n    await fs_extra_1.default.writeJSON(artifactPath, artifact, {\n      spaces: 2\n    });\n\n    if (pathToBuildInfo === undefined) {\n      return;\n    } // save debug file\n\n\n    const debugFilePath = this._getDebugFilePath(artifactPath);\n\n    const debugFile = this._createDebugFile(artifactPath, pathToBuildInfo);\n\n    await fs_extra_1.default.writeJSON(debugFilePath, debugFile, {\n      spaces: 2\n    });\n  }\n\n  async saveBuildInfo(solcVersion, solcLongVersion, input, output) {\n    const buildInfoDir = path.join(this._artifactsPath, constants_1.BUILD_INFO_DIR_NAME);\n    await fs_extra_1.default.ensureDir(buildInfoDir);\n\n    const buildInfoName = this._getBuildInfoName(solcVersion, solcLongVersion, input);\n\n    const buildInfo = this._createBuildInfo(buildInfoName, solcVersion, solcLongVersion, input, output);\n\n    const buildInfoPath = path.join(buildInfoDir, `${buildInfoName}.json`);\n    await fs_extra_1.default.writeJson(buildInfoPath, buildInfo, {\n      spaces: 2\n    });\n    return buildInfoPath;\n  }\n  /**\n   * Remove all artifacts that don't correspond to the current solidity files\n   */\n\n\n  async removeObsoleteArtifacts() {\n    const validArtifactsPaths = new Set();\n\n    for (const {\n      sourceName,\n      artifacts\n    } of this._validArtifacts) {\n      for (const artifactName of artifacts) {\n        validArtifactsPaths.add(this._getArtifactPathSync((0, contract_names_1.getFullyQualifiedName)(sourceName, artifactName)));\n      }\n    }\n\n    const existingArtifactsPaths = await this.getArtifactPaths();\n\n    for (const artifactPath of existingArtifactsPaths) {\n      if (!validArtifactsPaths.has(artifactPath)) {\n        await this._removeArtifactFiles(artifactPath);\n      }\n    }\n\n    await this._removeObsoleteBuildInfos();\n  }\n  /**\n   * Returns the absolute path to the given artifact\n   */\n\n\n  formArtifactPathFromFullyQualifiedName(fullyQualifiedName) {\n    const {\n      sourceName,\n      contractName\n    } = (0, contract_names_1.parseFullyQualifiedName)(fullyQualifiedName);\n    return path.join(this._artifactsPath, sourceName, `${contractName}.json`);\n  }\n  /**\n   * Remove all build infos that aren't used by any debug file\n   */\n\n\n  async _removeObsoleteBuildInfos() {\n    const debugFiles = await this.getDebugFilePaths();\n    const validBuildInfos = new Set();\n\n    for (const debugFile of debugFiles) {\n      const buildInfoFile = await this._getBuildInfoFromDebugFile(debugFile);\n\n      if (buildInfoFile !== undefined) {\n        validBuildInfos.add(path.resolve(path.dirname(debugFile), buildInfoFile));\n      }\n    }\n\n    const buildInfoFiles = await this.getBuildInfoPaths();\n\n    for (const buildInfoFile of buildInfoFiles) {\n      if (!validBuildInfos.has(buildInfoFile)) {\n        log(`Removing buildInfo '${buildInfoFile}'`);\n        await fs_extra_1.default.unlink(buildInfoFile);\n      }\n    }\n  }\n\n  _getBuildInfoName(solcVersion, solcLongVersion, input) {\n    const json = JSON.stringify({\n      _format: constants_1.BUILD_INFO_FORMAT_VERSION,\n      solcVersion,\n      solcLongVersion,\n      input\n    });\n    return (0, hash_1.createNonCryptographicHashBasedIdentifier)(Buffer.from(json)).toString(\"hex\");\n  }\n  /**\n   * Returns the absolute path to the artifact that corresponds to the given\n   * name.\n   *\n   * If the name is fully qualified, the path is computed from it.  If not, an\n   * artifact that matches the given name is searched in the existing artifacts.\n   * If there is an ambiguity, an error is thrown.\n   */\n\n\n  async _getArtifactPath(name) {\n    if ((0, contract_names_1.isFullyQualifiedName)(name)) {\n      return this._getValidArtifactPathFromFullyQualifiedName(name);\n    }\n\n    const files = await this.getArtifactPaths();\n    return this._getArtifactPathFromFiles(name, files);\n  }\n\n  _createBuildInfo(id, solcVersion, solcLongVersion, input, output) {\n    return {\n      id,\n      _format: constants_1.BUILD_INFO_FORMAT_VERSION,\n      solcVersion,\n      solcLongVersion,\n      input,\n      output\n    };\n  }\n\n  _createDebugFile(artifactPath, pathToBuildInfo) {\n    const relativePathToBuildInfo = path.relative(path.dirname(artifactPath), pathToBuildInfo);\n    const debugFile = {\n      _format: constants_1.DEBUG_FILE_FORMAT_VERSION,\n      buildInfo: relativePathToBuildInfo\n    };\n    return debugFile;\n  }\n\n  _getArtifactPathsSync() {\n    const paths = (0, glob_1.globSync)(path.join(this._artifactsPath, \"**/*.json\"), {\n      ignore: [this._buildInfosGlob, this._dbgsGlob]\n    });\n    return paths.sort();\n  }\n  /**\n   * Sync version of _getArtifactPath\n   */\n\n\n  _getArtifactPathSync(name) {\n    if ((0, contract_names_1.isFullyQualifiedName)(name)) {\n      return this._getValidArtifactPathFromFullyQualifiedNameSync(name);\n    }\n\n    const files = this._getArtifactPathsSync();\n\n    return this._getArtifactPathFromFiles(name, files);\n  }\n  /**\n   * Same signature as imported function, but abstracted to handle the only error we consistently care about\n   */\n\n\n  async _trueCasePath(filePath, basePath) {\n    const {\n      trueCasePath\n    } = await Promise.resolve().then(() => __importStar(require(\"true-case-path\")));\n\n    try {\n      const result = await trueCasePath(filePath, basePath);\n      return result;\n    } catch (error) {\n      if (error instanceof Error) {\n        if (error.message.includes(\"no matching file exists\")) {\n          return null;\n        }\n      } // eslint-disable-next-line @nomiclabs/hardhat-internal-rules/only-hardhat-error\n\n\n      throw error;\n    }\n  }\n  /**\n   * Same signature as imported function, but abstracted to handle the only error we consistently care about\n   * and synchronous\n   */\n\n\n  _trueCasePathSync(filePath, basePath) {\n    const {\n      trueCasePathSync\n    } = require(\"true-case-path\");\n\n    try {\n      const result = trueCasePathSync(filePath, basePath);\n      return result;\n    } catch (error) {\n      if (error instanceof Error) {\n        if (error.message.includes(\"no matching file exists\")) {\n          return null;\n        }\n      } // eslint-disable-next-line @nomiclabs/hardhat-internal-rules/only-hardhat-error\n\n\n      throw error;\n    }\n  }\n  /**\n   * DO NOT DELETE OR CHANGE\n   *\n   * use this.formArtifactPathFromFullyQualifiedName instead\n   * @deprecated until typechain migrates to public version\n   * @see https://github.com/dethcrypto/TypeChain/issues/544\n   */\n\n\n  _getArtifactPathFromFullyQualifiedName(fullyQualifiedName) {\n    const {\n      sourceName,\n      contractName\n    } = (0, contract_names_1.parseFullyQualifiedName)(fullyQualifiedName);\n    return path.join(this._artifactsPath, sourceName, `${contractName}.json`);\n  }\n\n  async _getValidArtifactPathFromFullyQualifiedName(fullyQualifiedName) {\n    const artifactPath = this.formArtifactPathFromFullyQualifiedName(fullyQualifiedName);\n    const trueCaseArtifactPath = await this._trueCasePath(path.relative(this._artifactsPath, artifactPath), this._artifactsPath);\n\n    if (trueCaseArtifactPath === null) {\n      return this._handleWrongArtifactForFullyQualifiedName(fullyQualifiedName);\n    }\n\n    if (artifactPath !== trueCaseArtifactPath) {\n      throw new errors_1.HardhatError(errors_list_1.ERRORS.ARTIFACTS.WRONG_CASING, {\n        correct: trueCaseArtifactPath,\n        incorrect: artifactPath\n      });\n    }\n\n    return artifactPath;\n  }\n\n  _getAllContractNamesFromFiles(files) {\n    return files.map(file => {\n      const fqn = this._getFullyQualifiedNameFromPath(file);\n\n      return (0, contract_names_1.parseFullyQualifiedName)(fqn).contractName;\n    });\n  }\n\n  _getAllFullyQualifiedNamesSync() {\n    const paths = this._getArtifactPathsSync();\n\n    return paths.map(p => this._getFullyQualifiedNameFromPath(p)).sort();\n  }\n\n  _formatSuggestions(names, contractName) {\n    switch (names.length) {\n      case 0:\n        return \"\";\n\n      case 1:\n        return `Did you mean \"${names[0]}\"?`;\n\n      default:\n        return `We found some that were similar:\n\n${names.map(n => `  * ${n}`).join(os.EOL)}\n\nPlease replace \"${contractName}\" for the correct contract name wherever you are trying to read its artifact.\n`;\n    }\n  }\n\n  _handleWrongArtifactForFullyQualifiedName(fullyQualifiedName) {\n    const names = this._getAllFullyQualifiedNamesSync();\n\n    const similarNames = this._getSimilarContractNames(fullyQualifiedName, names);\n\n    throw new errors_1.HardhatError(errors_list_1.ERRORS.ARTIFACTS.NOT_FOUND, {\n      contractName: fullyQualifiedName,\n      suggestion: this._formatSuggestions(similarNames, fullyQualifiedName)\n    });\n  }\n\n  _handleWrongArtifactForContractName(contractName, files) {\n    const names = this._getAllContractNamesFromFiles(files);\n\n    let similarNames = this._getSimilarContractNames(contractName, names);\n\n    if (similarNames.length > 1) {\n      similarNames = this._filterDuplicatesAsFullyQualifiedNames(files, similarNames);\n    }\n\n    throw new errors_1.HardhatError(errors_list_1.ERRORS.ARTIFACTS.NOT_FOUND, {\n      contractName,\n      suggestion: this._formatSuggestions(similarNames, contractName)\n    });\n  }\n  /**\n   * If the project has these contracts:\n   *   - 'contracts/Greeter.sol:Greeter'\n   *   - 'contracts/Meeter.sol:Greeter'\n   *   - 'contracts/Greater.sol:Greater'\n   *  And the user tries to get an artifact with the name 'Greter', then\n   *  the suggestions will be 'Greeter', 'Greeter', and 'Greater'.\n   *\n   * We don't want to show duplicates here, so we use FQNs for those. The\n   * suggestions will then be:\n   *   - 'contracts/Greeter.sol:Greeter'\n   *   - 'contracts/Meeter.sol:Greeter'\n   *   - 'Greater'\n   */\n\n\n  _filterDuplicatesAsFullyQualifiedNames(files, similarNames) {\n    const outputNames = [];\n    const groups = similarNames.reduce((obj, cur) => {\n      // eslint-disable-next-line @typescript-eslint/strict-boolean-expressions\n      obj[cur] = obj[cur] ? obj[cur] + 1 : 1;\n      return obj;\n    }, {});\n\n    for (const [name, occurrences] of Object.entries(groups)) {\n      if (occurrences > 1) {\n        for (const file of files) {\n          if (path.basename(file) === `${name}.json`) {\n            outputNames.push(this._getFullyQualifiedNameFromPath(file));\n          }\n        }\n\n        continue;\n      }\n\n      outputNames.push(name);\n    }\n\n    return outputNames;\n  }\n  /**\n   *\n   * @param givenName can be FQN or contract name\n   * @param names MUST match type of givenName (i.e. array of FQN's if givenName is FQN)\n   * @returns\n   */\n\n\n  _getSimilarContractNames(givenName, names) {\n    let shortestDistance = constants_1.EDIT_DISTANCE_THRESHOLD;\n    let mostSimilarNames = [];\n\n    for (const name of names) {\n      const distance = (0, contract_names_1.findDistance)(givenName, name);\n\n      if (distance < shortestDistance) {\n        shortestDistance = distance;\n        mostSimilarNames = [name];\n        continue;\n      }\n\n      if (distance === shortestDistance) {\n        mostSimilarNames.push(name);\n        continue;\n      }\n    }\n\n    return mostSimilarNames;\n  }\n\n  _getValidArtifactPathFromFullyQualifiedNameSync(fullyQualifiedName) {\n    const artifactPath = this.formArtifactPathFromFullyQualifiedName(fullyQualifiedName);\n\n    const trueCaseArtifactPath = this._trueCasePathSync(path.relative(this._artifactsPath, artifactPath), this._artifactsPath);\n\n    if (trueCaseArtifactPath === null) {\n      return this._handleWrongArtifactForFullyQualifiedName(fullyQualifiedName);\n    }\n\n    if (artifactPath !== trueCaseArtifactPath) {\n      throw new errors_1.HardhatError(errors_list_1.ERRORS.ARTIFACTS.WRONG_CASING, {\n        correct: trueCaseArtifactPath,\n        incorrect: artifactPath\n      });\n    }\n\n    return artifactPath;\n  }\n\n  _getDebugFilePath(artifactPath) {\n    return artifactPath.replace(/\\.json$/, \".dbg.json\");\n  }\n\n  _getArtifactPathFromFiles(contractName, files) {\n    const matchingFiles = files.filter(file => {\n      return path.basename(file) === `${contractName}.json`;\n    });\n\n    if (matchingFiles.length === 0) {\n      return this._handleWrongArtifactForContractName(contractName, files);\n    }\n\n    if (matchingFiles.length > 1) {\n      const candidates = matchingFiles.map(file => this._getFullyQualifiedNameFromPath(file));\n      throw new errors_1.HardhatError(errors_list_1.ERRORS.ARTIFACTS.MULTIPLE_FOUND, {\n        contractName,\n        candidates: candidates.join(os.EOL)\n      });\n    }\n\n    return matchingFiles[0];\n  }\n  /**\n   * Returns the FQN of a contract giving the absolute path to its artifact.\n   *\n   * For example, given a path like\n   * `/path/to/project/artifacts/contracts/Foo.sol/Bar.json`, it'll return the\n   * FQN `contracts/Foo.sol:Bar`\n   */\n\n\n  _getFullyQualifiedNameFromPath(absolutePath) {\n    const sourceName = (0, source_names_1.replaceBackslashes)(path.relative(this._artifactsPath, path.dirname(absolutePath)));\n    const contractName = path.basename(absolutePath).replace(\".json\", \"\");\n    return (0, contract_names_1.getFullyQualifiedName)(sourceName, contractName);\n  }\n  /**\n   * Remove the artifact file, its debug file and, if it exists, its build\n   * info file.\n   */\n\n\n  async _removeArtifactFiles(artifactPath) {\n    await fs_extra_1.default.remove(artifactPath);\n\n    const debugFilePath = this._getDebugFilePath(artifactPath);\n\n    const buildInfoPath = await this._getBuildInfoFromDebugFile(debugFilePath);\n    await fs_extra_1.default.remove(debugFilePath);\n\n    if (buildInfoPath !== undefined) {\n      await fs_extra_1.default.remove(buildInfoPath);\n    }\n  }\n  /**\n   * Given the path to a debug file, returns the absolute path to its\n   * corresponding build info file if it exists, or undefined otherwise.\n   */\n\n\n  async _getBuildInfoFromDebugFile(debugFilePath) {\n    if (await fs_extra_1.default.pathExists(debugFilePath)) {\n      const {\n        buildInfo\n      } = await fs_extra_1.default.readJson(debugFilePath);\n      return path.resolve(path.dirname(debugFilePath), buildInfo);\n    }\n\n    return undefined;\n  }\n\n}\n\nexports.Artifacts = Artifacts;\n/**\n * Retrieves an artifact for the given `contractName` from the compilation output.\n *\n * @param sourceName The contract's source name.\n * @param contractName the contract's name.\n * @param contractOutput the contract's compilation output as emitted by `solc`.\n */\n\nfunction getArtifactFromContractOutput(sourceName, contractName, contractOutput) {\n  const evmBytecode = contractOutput.evm && contractOutput.evm.bytecode;\n  let bytecode = evmBytecode && evmBytecode.object ? evmBytecode.object : \"\";\n\n  if (bytecode.slice(0, 2).toLowerCase() !== \"0x\") {\n    bytecode = `0x${bytecode}`;\n  }\n\n  const evmDeployedBytecode = contractOutput.evm && contractOutput.evm.deployedBytecode;\n  let deployedBytecode = evmDeployedBytecode && evmDeployedBytecode.object ? evmDeployedBytecode.object : \"\";\n\n  if (deployedBytecode.slice(0, 2).toLowerCase() !== \"0x\") {\n    deployedBytecode = `0x${deployedBytecode}`;\n  }\n\n  const linkReferences = evmBytecode && evmBytecode.linkReferences ? evmBytecode.linkReferences : {};\n  const deployedLinkReferences = evmDeployedBytecode && evmDeployedBytecode.linkReferences ? evmDeployedBytecode.linkReferences : {};\n  return {\n    _format: constants_1.ARTIFACT_FORMAT_VERSION,\n    contractName,\n    sourceName,\n    abi: contractOutput.abi,\n    bytecode,\n    deployedBytecode,\n    linkReferences,\n    deployedLinkReferences\n  };\n}\n\nexports.getArtifactFromContractOutput = getArtifactFromContractOutput;","map":{"version":3,"mappings":"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","names":["log","Artifacts","constructor","_artifactsPath","_buildInfosGlob","path","join","constants_1","_dbgsGlob","_validArtifacts","addValidArtifacts","validArtifacts","push","readArtifact","name","artifactPath","_getArtifactPath","fs_extra_1","readJson","readArtifactSync","_getArtifactPathSync","readJsonSync","artifactExists","getAllFullyQualifiedNames","paths","getArtifactPaths","map","p","_getFullyQualifiedNameFromPath","sort","getBuildInfo","fullyQualifiedName","formArtifactPathFromFullyQualifiedName","debugFilePath","_getDebugFilePath","buildInfoPath","_getBuildInfoFromDebugFile","undefined","readJSON","ignore","getBuildInfoPaths","getDebugFilePaths","saveArtifactAndDebugFile","artifact","pathToBuildInfo","sourceName","contractName","ensureDir","dirname","writeJSON","spaces","debugFile","_createDebugFile","saveBuildInfo","solcVersion","solcLongVersion","input","output","buildInfoDir","buildInfoName","_getBuildInfoName","buildInfo","_createBuildInfo","writeJson","removeObsoleteArtifacts","validArtifactsPaths","Set","artifacts","artifactName","add","existingArtifactsPaths","has","_removeArtifactFiles","_removeObsoleteBuildInfos","debugFiles","validBuildInfos","buildInfoFile","resolve","buildInfoFiles","unlink","json","JSON","stringify","_format","Buffer","from","toString","_getValidArtifactPathFromFullyQualifiedName","files","_getArtifactPathFromFiles","id","relativePathToBuildInfo","relative","_getArtifactPathsSync","_getValidArtifactPathFromFullyQualifiedNameSync","_trueCasePath","filePath","basePath","trueCasePath","result","error","Error","message","includes","_trueCasePathSync","trueCasePathSync","require","_getArtifactPathFromFullyQualifiedName","trueCaseArtifactPath","_handleWrongArtifactForFullyQualifiedName","errors_1","errors_list_1","ARTIFACTS","WRONG_CASING","correct","incorrect","_getAllContractNamesFromFiles","file","fqn","_getAllFullyQualifiedNamesSync","_formatSuggestions","names","length","n","os","EOL","similarNames","_getSimilarContractNames","NOT_FOUND","suggestion","_handleWrongArtifactForContractName","_filterDuplicatesAsFullyQualifiedNames","outputNames","groups","reduce","obj","cur","occurrences","Object","entries","basename","givenName","shortestDistance","mostSimilarNames","distance","replace","matchingFiles","filter","candidates","MULTIPLE_FOUND","absolutePath","remove","pathExists","exports","getArtifactFromContractOutput","contractOutput","evmBytecode","evm","bytecode","object","slice","toLowerCase","evmDeployedBytecode","deployedBytecode","linkReferences","deployedLinkReferences","abi"],"sourceRoot":"","sources":["../src/internal/artifacts.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}