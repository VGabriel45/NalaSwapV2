{"ast":null,"code":"var _jsxFileName = \"/Users/ja/Desktop/MyProjects/NalaSwap/webapp/nalaswap/src/pages/StakePage.js\",\n    _s = $RefreshSig$();\n\nimport * as React from 'react';\nimport stakingContractABI from \"../ABIS/StakingABI.json\";\nimport nalaRouterABI from \"../ABIS/NalaRouter.json\";\nimport nlaTokenABI from \"../ABIS/NalaTokenABI.json\";\nimport { BigNumber, Contract, ethers, utils } from 'ethers';\nimport { formatUnits, parseEther } from '@ethersproject/units';\nimport { useEffect, useState, Fragment } from \"react\";\nimport Box from '@mui/material/Box';\nimport ButtonGroup from '@mui/material/ButtonGroup';\nimport Button from '@mui/material/Button';\nimport TextField from '@mui/material/TextField';\nimport contractAddresses from \"../utils/contractsAddresses.json\";\nimport { BigNumber as JsBigNumber } from 'bignumber.js';\nimport { Widget } from \"web3uikit\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function StakePage() {\n  _s();\n\n  const [balance, setBalance] = useState(0);\n  const [apr, setApr] = useState(0);\n  const [TVL, setTVL] = useState(0);\n  const [tokenPriceInBUSD, setTokenPriceInBUSD] = useState(0);\n  const [activeStakers, setActiveStakers] = useState(0);\n  const [balanceWithRewards, setBalanceWithRewards] = useState(0);\n  const [amount, setAmount] = useState(0);\n  const [rewardsPerDay, setRewardsPerDay] = useState(0);\n  const [errorMessage, setErrorMessage] = useState(\"\");\n  const contractAddress = contractAddresses.stakingContract;\n  const nlaTokenAddress = contractAddresses.nalaTokenAddress;\n  const nalaRouterAddress = contractAddresses.nalaRouterContract;\n  const wBNBTokenAddress = \"0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c\";\n  const BUSDTokenAddress = \"0xe9e7cea3dedca5984780bafc599bd69add087d56\";\n  const TOKENS_PER_BLOCK = 1;\n  useEffect(() => {\n    //  const timer = setInterval(async () => {\n    //     getUserStakedAmount();\n    //     getRewardsPerDay();\n    //     getTVL();\n    //     getActiveStakers();\n    //     getTokenPriceInBUSD();\n    //     getUserBalanceWithRewards();\n    //     getAPR(TOKENS_PER_BLOCK); // get staked amout without using async await inside useEffect\n    //   }, 1000);\n    // return () => clearInterval(timer);\n    getUserStakedAmount();\n    getRewardsPerDay();\n    getTVL();\n    getActiveStakers();\n    getTokenPriceInBUSD();\n    getUserBalanceWithRewards();\n    getAPR(TOKENS_PER_BLOCK); // get staked amout without using async await inside useEffect\n  }, []);\n\n  const getAPR = async tokenPerBlock => {\n    if (typeof window.ethereum !== 'undefined') {\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      const signer = provider.getSigner();\n\n      if (signer) {\n        try {\n          const pancakeRouterV2 = new ethers.Contract(\"0x10ED43C718714eb63d5aA57B78B54704E256024E\", [\"function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts)\"], signer);\n          const nalaToken = new ethers.Contract(nlaTokenAddress, nlaTokenABI, signer);\n          const totalStaked = await nalaToken.balanceOf(contractAddress);\n          console.log(`Total staked in staking contract = ${totalStaked / Math.pow(10, 18)}`);\n\n          if (totalStaked > 0) {\n            // how much NLA tokens we get for 1 BNB \n            const amountsOut = await pancakeRouterV2.getAmountsOut(ethers.utils.parseEther(\"1\"), [wBNBTokenAddress, nlaTokenAddress]);\n            const amoutOfNLAFor1BNB = formatUnits(amountsOut[1].toString(), 18);\n            const nlaPriceInBNB = 1 / amoutOfNLAFor1BNB; // NLA Token price in BNB\n\n            const totalRewardPricePerYear = new JsBigNumber(nlaPriceInBNB).times(tokenPerBlock).times(28640);\n            const totalStakingTokenInPool = new JsBigNumber(nlaPriceInBNB).times(totalStaked / Math.pow(10, 18));\n            const apr = totalRewardPricePerYear.div(totalStakingTokenInPool).times(10);\n            setApr(apr.toNumber());\n          }\n        } catch (error) {\n          setApr(0);\n        }\n      }\n    }\n  };\n\n  const stakeTokens = async amount => {\n    if (typeof window.ethereum !== 'undefined') {\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      const signer = provider.getSigner();\n\n      if (signer && parseInt(amount) > 0) {\n        const stakingContract = new ethers.Contract(contractAddress, stakingContractABI, signer);\n        const nlaToken = new ethers.Contract(nlaTokenAddress, [\"function approve(address _spender, uint256 _value) public returns (bool success)\"], signer);\n        const approveTx = await nlaToken.connect(signer).approve(stakingContract.address, \"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\");\n        approveTx.wait(3);\n\n        try {\n          const tx = await stakingContract.connect(signer).stakeTokens(ethers.utils.parseEther(amount.toString()));\n          tx.wait();\n          console.log(tx);\n        } catch (error) {\n          console.log(\"Transaction error\");\n        }\n      } else {\n        setErrorMessage(\"Cannot stake 0 tokens\");\n      }\n    }\n  };\n\n  const withdrawTokens = async amount => {\n    if (typeof window.ethereum !== 'undefined') {\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      const signer = provider.getSigner();\n\n      if (signer && parseInt(amount) > 0) {\n        const stakingContract = new ethers.Contract(contractAddress, stakingContractABI, signer);\n        const nlaToken = new ethers.Contract(nlaTokenAddress, [\"function approve(address _spender, uint256 _value) public returns (bool success)\"], signer);\n        nlaToken.connect(signer).approve(stakingContract.address, \"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\");\n\n        try {\n          const tx = await stakingContract.connect(signer).withdrawTokens(ethers.utils.parseEther(amount.toString()));\n          tx.wait();\n        } catch (error) {\n          console.log(\"Transaction error\");\n        }\n      } else {\n        setErrorMessage(\"Cannot stake 0 tokens\");\n      }\n    }\n  };\n\n  const getUserStakedAmount = async () => {\n    let balance;\n\n    if (typeof window.ethereum !== 'undefined') {\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      const signer = provider.getSigner();\n\n      if (signer) {\n        const stakingContract = new ethers.Contract(contractAddress, stakingContractABI, signer);\n\n        try {\n          balance = await stakingContract.stakerBalance(signer.getAddress());\n        } catch (error) {\n          console.log(\"Transaction error\");\n        }\n      }\n    } // console.log(formatUnits(BigNumber.from(balance.toString(), 18)));\n\n\n    setBalance(balance / Math.pow(10, 18));\n    return formatUnits(balance / Math.pow(10, 18));\n  };\n\n  const getUserBalanceWithRewards = async () => {\n    let balance;\n\n    if (typeof window.ethereum !== 'undefined') {\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      const signer = provider.getSigner();\n\n      if (signer) {\n        const stakingContract = new ethers.Contract(contractAddress, stakingContractABI, signer);\n\n        try {\n          balance = await stakingContract.getBalanceWithRewards(signer.getAddress());\n        } catch (error) {\n          console.log(\"Transaction error\");\n        }\n      }\n    } // console.log(formatUnits(BigNumber.from(balance.toString(), 18)));\n\n\n    setBalanceWithRewards(balance / Math.pow(10, 18));\n  };\n\n  const getRewardsPerDay = async () => {\n    let rewards = 0;\n\n    if (typeof window.ethereum !== 'undefined') {\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      const signer = provider.getSigner();\n\n      if (signer) {\n        const userStakedBalance = await getUserStakedAmount();\n\n        if (userStakedBalance > 0) {\n          const stakingContract = new ethers.Contract(contractAddress, stakingContractABI, signer);\n\n          try {\n            rewards = await stakingContract.getRewardsPerDay(signer.getAddress());\n            setRewardsPerDay(rewards / Math.pow(10, 18));\n          } catch (error) {\n            console.log(\"Transaction error\");\n          }\n        }\n      }\n    }\n  };\n\n  const getTVL = async () => {\n    if (typeof window.ethereum !== 'undefined') {\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      const signer = provider.getSigner();\n\n      if (signer) {\n        const nalaToken = new ethers.Contract(nlaTokenAddress, nlaTokenABI, signer);\n        const totalStaked = await nalaToken.balanceOf(contractAddress);\n        setTVL(totalStaked / Math.pow(10, 18));\n      }\n    }\n  };\n\n  const getTokenPriceInBUSD = async () => {\n    if (typeof window.ethereum !== 'undefined') {\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      const signer = provider.getSigner();\n\n      if (signer) {\n        const nalaRouter = new ethers.Contract(nalaRouterAddress, nalaRouterABI, signer);\n        const amountsOut = await nalaRouter.getAmountsOutTokens(ethers.utils.parseEther(\"1\"), [wBNBTokenAddress, nlaTokenAddress]);\n        const amoutOfNLAFor1BNB = formatUnits(amountsOut[1].toString(), 18);\n        const nlaPriceInBNB = 1 / amoutOfNLAFor1BNB;\n        console.log(`NLA price in BNB = ${nlaPriceInBNB}`);\n        const bnbPriceInBUSD = await nalaRouter.getAmountsOutTokens(ethers.utils.parseEther(\"1\"), [wBNBTokenAddress, BUSDTokenAddress]);\n        const nlaPriceInBUSD = formatUnits(bnbPriceInBUSD[1].toString(), 18) * nlaPriceInBNB;\n        console.log(`NLA price in BUSD = ${nlaPriceInBUSD}`);\n        setTokenPriceInBUSD(nlaPriceInBUSD);\n      }\n    }\n  };\n\n  const getActiveStakers = async () => {\n    if (typeof window.ethereum !== 'undefined') {\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      const signer = provider.getSigner();\n\n      if (signer) {\n        const stakingContract = new ethers.Contract(contractAddress, stakingContractABI, signer);\n\n        try {\n          const activeStakersLength = await stakingContract.getActiveStakeholders();\n          setActiveStakers(activeStakersLength);\n          console.log(`Active stakeholders = ${activeStakersLength}`);\n        } catch (error) {\n          console.log(error);\n        }\n      }\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: 'grid',\n        gap: '20px',\n        padding: '40px 20px',\n        width: \"530px\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"section\", {\n        style: {\n          display: 'flex',\n          gap: '20px'\n        },\n        children: [/*#__PURE__*/_jsxDEV(Widget, {\n          info: `${rewardsPerDay.toFixed(2)} NLA`,\n          title: \"Rewards per day\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 268,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Widget, {\n          info: `${TVL.toFixed(2)} NLA`,\n          title: \"Total NLA staked\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 269,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 267,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n        style: {\n          display: 'flex',\n          gap: '20px'\n        },\n        children: [/*#__PURE__*/_jsxDEV(Widget, {\n          info: `${apr.toFixed(2)}%`,\n          title: \"APR\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 272,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Widget, {\n          info: parseInt(activeStakers),\n          title: \"Active stakers\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 273,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Widget, {\n          info: `${tokenPriceInBUSD.toFixed(2)}$`,\n          title: \"NLA Price in $\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 274,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 271,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: 'flex',\n          flexDirection: 'row',\n          justifyContent: 'space-around'\n        },\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          style: {\n            marginRight: \"25%\"\n          },\n          color: \"secondary\",\n          variant: \"contained\",\n          onClick: () => stakeTokens(amount),\n          children: \"Stake\"\n        }, \"Deposit\", false, {\n          fileName: _jsxFileName,\n          lineNumber: 277,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          color: \"secondary\",\n          variant: \"contained\",\n          onClick: () => withdrawTokens(amount),\n          children: \"Withdraw\"\n        }, \"Withdraw\", false, {\n          fileName: _jsxFileName,\n          lineNumber: 278,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 276,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(TextField, {\n        id: \"outlined-basic\",\n        label: \"Amount...\",\n        variant: \"outlined\",\n        size: \"small\",\n        type: \"number\",\n        onChange: e => setAmount(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 280,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"small\", {\n        style: {\n          color: \"red\"\n        },\n        children: errorMessage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 281,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: 'flex',\n          flexDirection: 'row',\n          justifyContent: 'space-around'\n        },\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          style: {\n            marginRight: \"25%\"\n          },\n          color: \"secondary\",\n          variant: \"contained\",\n          onClick: () => stakeTokens(amount),\n          children: \"Stake\"\n        }, \"Deposit\", false, {\n          fileName: _jsxFileName,\n          lineNumber: 283,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          color: \"secondary\",\n          variant: \"contained\",\n          onClick: () => withdrawTokens(amount),\n          children: \"Withdraw\"\n        }, \"Withdraw\", false, {\n          fileName: _jsxFileName,\n          lineNumber: 284,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 282,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 266,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n}\n\n_s(StakePage, \"ScB9NfBNetxwFgOJ5trbfCXshy8=\");\n\n_c = StakePage;\n\nvar _c;\n\n$RefreshReg$(_c, \"StakePage\");","map":{"version":3,"names":["React","stakingContractABI","nalaRouterABI","nlaTokenABI","BigNumber","Contract","ethers","utils","formatUnits","parseEther","useEffect","useState","Fragment","Box","ButtonGroup","Button","TextField","contractAddresses","JsBigNumber","Widget","StakePage","balance","setBalance","apr","setApr","TVL","setTVL","tokenPriceInBUSD","setTokenPriceInBUSD","activeStakers","setActiveStakers","balanceWithRewards","setBalanceWithRewards","amount","setAmount","rewardsPerDay","setRewardsPerDay","errorMessage","setErrorMessage","contractAddress","stakingContract","nlaTokenAddress","nalaTokenAddress","nalaRouterAddress","nalaRouterContract","wBNBTokenAddress","BUSDTokenAddress","TOKENS_PER_BLOCK","getUserStakedAmount","getRewardsPerDay","getTVL","getActiveStakers","getTokenPriceInBUSD","getUserBalanceWithRewards","getAPR","tokenPerBlock","window","ethereum","provider","providers","Web3Provider","signer","getSigner","pancakeRouterV2","nalaToken","totalStaked","balanceOf","console","log","Math","pow","amountsOut","getAmountsOut","amoutOfNLAFor1BNB","toString","nlaPriceInBNB","totalRewardPricePerYear","times","totalStakingTokenInPool","div","toNumber","error","stakeTokens","parseInt","nlaToken","approveTx","connect","approve","address","wait","tx","withdrawTokens","stakerBalance","getAddress","getBalanceWithRewards","rewards","userStakedBalance","nalaRouter","getAmountsOutTokens","bnbPriceInBUSD","nlaPriceInBUSD","activeStakersLength","getActiveStakeholders","display","gap","padding","width","toFixed","flexDirection","justifyContent","marginRight","e","target","value","color"],"sources":["/Users/ja/Desktop/MyProjects/NalaSwap/webapp/nalaswap/src/pages/StakePage.js"],"sourcesContent":["import * as React from 'react';\nimport stakingContractABI from \"../ABIS/StakingABI.json\";\nimport nalaRouterABI from \"../ABIS/NalaRouter.json\";\nimport nlaTokenABI from \"../ABIS/NalaTokenABI.json\";\nimport { BigNumber, Contract, ethers, utils } from 'ethers';\nimport { formatUnits, parseEther } from '@ethersproject/units';\nimport {useEffect, useState, Fragment} from \"react\";\nimport Box from '@mui/material/Box';\nimport ButtonGroup from '@mui/material/ButtonGroup';\nimport Button from '@mui/material/Button';\nimport TextField from '@mui/material/TextField';\nimport contractAddresses from \"../utils/contractsAddresses.json\";\nimport {BigNumber as JsBigNumber} from 'bignumber.js'\nimport {Widget} from \"web3uikit\";\n\nexport default function StakePage () {\n\n    const [balance, setBalance] = useState(0);\n    const [apr, setApr] = useState(0);\n    const [TVL, setTVL] = useState(0);\n    const [tokenPriceInBUSD, setTokenPriceInBUSD] = useState(0);\n    const [activeStakers, setActiveStakers] = useState(0);\n    const [balanceWithRewards, setBalanceWithRewards] = useState(0);\n    const [amount, setAmount] = useState(0);\n    const [rewardsPerDay, setRewardsPerDay] = useState(0);\n    const [errorMessage, setErrorMessage] = useState(\"\");\n\n    const contractAddress = contractAddresses.stakingContract;\n    const nlaTokenAddress = contractAddresses.nalaTokenAddress;\n    const nalaRouterAddress = contractAddresses.nalaRouterContract;\n    const wBNBTokenAddress = \"0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c\";\n    const BUSDTokenAddress = \"0xe9e7cea3dedca5984780bafc599bd69add087d56\";\n\n    const TOKENS_PER_BLOCK = 1;\n\n    useEffect(() => {\n        //  const timer = setInterval(async () => {\n        //     getUserStakedAmount();\n        //     getRewardsPerDay();\n        //     getTVL();\n        //     getActiveStakers();\n        //     getTokenPriceInBUSD();\n        //     getUserBalanceWithRewards();\n        //     getAPR(TOKENS_PER_BLOCK); // get staked amout without using async await inside useEffect\n        //   }, 1000);\n        // return () => clearInterval(timer);\n        getUserStakedAmount();\n        getRewardsPerDay();\n        getTVL();\n        getActiveStakers();\n        getTokenPriceInBUSD();\n        getUserBalanceWithRewards();\n        getAPR(TOKENS_PER_BLOCK); // get staked amout without using async await inside useEffect\n    }, [])\n\n    const getAPR = async (\n        tokenPerBlock,\n      ) => {\n        if (typeof window.ethereum !== 'undefined') {\n            const provider = new ethers.providers.Web3Provider(window.ethereum)\n            const signer = provider.getSigner()\n            if(signer) {\n                try {\n                    const pancakeRouterV2 = new ethers.Contract(\"0x10ED43C718714eb63d5aA57B78B54704E256024E\", [\"function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts)\"], signer);\n                    const nalaToken = new ethers.Contract(nlaTokenAddress, nlaTokenABI, signer);\n                    const totalStaked = await nalaToken.balanceOf(contractAddress);\n                    console.log(`Total staked in staking contract = ${totalStaked / Math.pow(10, 18)}`);\n                    if(totalStaked > 0) {\n                        // how much NLA tokens we get for 1 BNB \n                        const amountsOut = await pancakeRouterV2\n                        .getAmountsOut(\n                            ethers.utils.parseEther(\"1\"), \n                            [wBNBTokenAddress, nlaTokenAddress]\n                        )\n\n                        const amoutOfNLAFor1BNB = formatUnits(amountsOut[1].toString(), 18);\n                        const nlaPriceInBNB = 1 / amoutOfNLAFor1BNB; // NLA Token price in BNB\n\n                        const totalRewardPricePerYear = new JsBigNumber(nlaPriceInBNB).times(tokenPerBlock).times(28640)\n                        const totalStakingTokenInPool = new JsBigNumber(nlaPriceInBNB).times(totalStaked / Math.pow(10, 18))\n                        const apr = totalRewardPricePerYear.div(totalStakingTokenInPool).times(10)\n\n                        setApr(apr.toNumber());\n                    }\n                } catch (error) {\n                    setApr(0);\n                }\n            }\n        }\n    }\n\n    const stakeTokens = async (amount) => {\n        if (typeof window.ethereum !== 'undefined') {\n            const provider = new ethers.providers.Web3Provider(window.ethereum)\n            const signer = provider.getSigner()\n            if (signer && parseInt(amount) > 0) {\n              const stakingContract = new ethers.Contract(contractAddress, stakingContractABI, signer);\n              const nlaToken = new ethers.Contract(nlaTokenAddress, [\"function approve(address _spender, uint256 _value) public returns (bool success)\"], signer);\n              const approveTx = await nlaToken.connect(signer).approve(stakingContract.address, \"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\");\n              approveTx.wait(3);\n              try {\n                const tx = await stakingContract.connect(signer).stakeTokens(\n                    ethers.utils.parseEther(amount.toString())\n                )\n                tx.wait();\n                console.log(tx);\n                } catch (error) {\n                    console.log(\"Transaction error\");\n                }\n            } else {\n                setErrorMessage(\"Cannot stake 0 tokens\");\n            }\n        }\n        \n    }\n\n    const withdrawTokens = async (amount) => {\n        if (typeof window.ethereum !== 'undefined') {\n            const provider = new ethers.providers.Web3Provider(window.ethereum)\n            const signer = provider.getSigner()\n            if (signer && parseInt(amount) > 0) {\n              const stakingContract = new ethers.Contract(contractAddress, stakingContractABI, signer);\n              const nlaToken = new ethers.Contract(nlaTokenAddress, [\"function approve(address _spender, uint256 _value) public returns (bool success)\"], signer);\n              nlaToken.connect(signer).approve(stakingContract.address, \"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\");\n              try {\n                const tx = await stakingContract.connect(signer).withdrawTokens(\n                    ethers.utils.parseEther(amount.toString())\n                )\n                tx.wait();\n                } catch (error) {\n                    console.log(\"Transaction error\");\n                }\n            } else {\n                setErrorMessage(\"Cannot stake 0 tokens\");\n            }\n        }\n        \n    }\n\n    const getUserStakedAmount = async () => {\n\n        let balance;\n\n        if (typeof window.ethereum !== 'undefined') {\n            const provider = new ethers.providers.Web3Provider(window.ethereum)\n            const signer = provider.getSigner()\n            if (signer) {\n              const stakingContract = new ethers.Contract(contractAddress, stakingContractABI, signer);\n              try {\n                balance = await stakingContract.stakerBalance(signer.getAddress());\n                } catch (error) {\n                    console.log(\"Transaction error\");\n                }\n            }\n        }\n\n        // console.log(formatUnits(BigNumber.from(balance.toString(), 18)));\n        setBalance(balance / Math.pow(10, 18));\n        return formatUnits(balance / Math.pow(10, 18));\n    }\n\n    const getUserBalanceWithRewards = async () => {\n\n        let balance;\n\n        if (typeof window.ethereum !== 'undefined') {\n            const provider = new ethers.providers.Web3Provider(window.ethereum)\n            const signer = provider.getSigner()\n            if (signer) {\n              const stakingContract = new ethers.Contract(contractAddress, stakingContractABI, signer);\n              try {\n                balance = await stakingContract.getBalanceWithRewards(signer.getAddress());\n                } catch (error) {\n                    console.log(\"Transaction error\");\n                }\n            }\n        }\n\n        // console.log(formatUnits(BigNumber.from(balance.toString(), 18)));\n        setBalanceWithRewards(balance / Math.pow(10, 18));\n    }\n\n    const getRewardsPerDay = async () => {\n        let rewards = 0;\n        if (typeof window.ethereum !== 'undefined') {\n            const provider = new ethers.providers.Web3Provider(window.ethereum)\n            const signer = provider.getSigner()\n            if (signer) {\n                const userStakedBalance = await getUserStakedAmount();\n                if(userStakedBalance > 0) {\n                    const stakingContract = new ethers.Contract(contractAddress, stakingContractABI, signer);\n                    try {\n                        rewards = await stakingContract.getRewardsPerDay(signer.getAddress());\n                        setRewardsPerDay(rewards / Math.pow(10, 18));\n                    } catch (error) {\n                        console.log(\"Transaction error\");\n                    }\n                }\n            }\n        }\n    }\n\n    const getTVL = async () => {\n        if (typeof window.ethereum !== 'undefined') {\n            const provider = new ethers.providers.Web3Provider(window.ethereum)\n            const signer = provider.getSigner()\n            if (signer) {\n                const nalaToken = new ethers.Contract(nlaTokenAddress, nlaTokenABI, signer);\n                const totalStaked = await nalaToken.balanceOf(contractAddress);\n                setTVL(totalStaked / Math.pow(10, 18));\n            }\n        }\n    }\n\n    const getTokenPriceInBUSD = async () => {\n        if (typeof window.ethereum !== 'undefined') {\n            const provider = new ethers.providers.Web3Provider(window.ethereum)\n            const signer = provider.getSigner()\n            if (signer) {\n                const nalaRouter = new ethers.Contract(nalaRouterAddress, nalaRouterABI, signer);\n                const amountsOut = await nalaRouter\n                .getAmountsOutTokens(\n                    ethers.utils.parseEther(\"1\"), \n                    [wBNBTokenAddress, nlaTokenAddress]\n                )\n\n                const amoutOfNLAFor1BNB = formatUnits(amountsOut[1].toString(), 18);\n                const nlaPriceInBNB = 1 / amoutOfNLAFor1BNB;\n\n                console.log(`NLA price in BNB = ${nlaPriceInBNB}`);\n\n                const bnbPriceInBUSD = await nalaRouter\n                .getAmountsOutTokens(\n                    ethers.utils.parseEther(\"1\"), \n                    [wBNBTokenAddress, BUSDTokenAddress]\n                )\n\n                const nlaPriceInBUSD = formatUnits(bnbPriceInBUSD[1].toString(), 18) * nlaPriceInBNB;\n\n                console.log(`NLA price in BUSD = ${nlaPriceInBUSD}`);\n\n                setTokenPriceInBUSD(nlaPriceInBUSD);\n            }\n        }\n    }\n\n    const getActiveStakers = async () => {\n        if (typeof window.ethereum !== 'undefined') {\n            const provider = new ethers.providers.Web3Provider(window.ethereum)\n            const signer = provider.getSigner()\n            if (signer) {\n                const stakingContract = new ethers.Contract(contractAddress, stakingContractABI, signer);\n                try {\n                    const activeStakersLength = await stakingContract.getActiveStakeholders();\n                    setActiveStakers(activeStakersLength);\n                    console.log(`Active stakeholders = ${activeStakersLength}`);\n                } catch (error) {\n                    console.log(error);\n                }\n            }\n        }\n    }\n\n    return (\n        <>\n            <div style={{ display: 'grid', gap: '20px', padding: '40px 20px', width: \"530px\" }}>\n                <section style={{ display: 'flex', gap: '20px' }}>\n                    <Widget info={`${rewardsPerDay.toFixed(2)} NLA`} title=\"Rewards per day\"/>\n                    <Widget info={`${TVL.toFixed(2)} NLA`} title=\"Total NLA staked\" />\n                </section>\n                <section style={{ display: 'flex', gap: '20px' }}>\n                    <Widget info={`${apr.toFixed(2)}%`} title=\"APR\" />\n                    <Widget info={parseInt(activeStakers)} title=\"Active stakers\" />\n                    <Widget info={`${tokenPriceInBUSD.toFixed(2)}$`} title=\"NLA Price in $\" />\n                </section>\n                <div style={{display: 'flex', flexDirection: 'row', justifyContent: 'space-around'}}>\n                    <Button style={{marginRight: \"25%\"}} color=\"secondary\" variant=\"contained\" key=\"Deposit\" onClick={() => stakeTokens(amount)}>Stake</Button>\n                    <Button color=\"secondary\" variant=\"contained\" key=\"Withdraw\" onClick={() => withdrawTokens(amount)}>Withdraw</Button>\n                </div>\n                <TextField id=\"outlined-basic\" label=\"Amount...\" variant=\"outlined\" size=\"small\" type=\"number\" onChange={(e) => setAmount(e.target.value)}/>\n                <small style={{color: \"red\"}}>{errorMessage}</small>\n                <div style={{display: 'flex', flexDirection: 'row', justifyContent: 'space-around'}}>\n                    <Button style={{marginRight: \"25%\"}} color=\"secondary\" variant=\"contained\" key=\"Deposit\" onClick={() => stakeTokens(amount)}>Stake</Button>\n                    <Button color=\"secondary\" variant=\"contained\" key=\"Withdraw\" onClick={() => withdrawTokens(amount)}>Withdraw</Button>\n                </div>\n            </div>\n        </>\n    )\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}